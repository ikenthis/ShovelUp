
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ProjectPhase
 * 
 */
export type ProjectPhase = $Result.DefaultSelection<Prisma.$ProjectPhasePayload>
/**
 * Model ProjectMember
 * 
 */
export type ProjectMember = $Result.DefaultSelection<Prisma.$ProjectMemberPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model PostAttachment
 * 
 */
export type PostAttachment = $Result.DefaultSelection<Prisma.$PostAttachmentPayload>
/**
 * Model PostMarkup
 * 
 */
export type PostMarkup = $Result.DefaultSelection<Prisma.$PostMarkupPayload>
/**
 * Model PostBimElement
 * 
 */
export type PostBimElement = $Result.DefaultSelection<Prisma.$PostBimElementPayload>
/**
 * Model PostLike
 * 
 */
export type PostLike = $Result.DefaultSelection<Prisma.$PostLikePayload>
/**
 * Model PostComment
 * 
 */
export type PostComment = $Result.DefaultSelection<Prisma.$PostCommentPayload>
/**
 * Model PostShare
 * 
 */
export type PostShare = $Result.DefaultSelection<Prisma.$PostSharePayload>
/**
 * Model PostMention
 * 
 */
export type PostMention = $Result.DefaultSelection<Prisma.$PostMentionPayload>
/**
 * Model PostHashtag
 * 
 */
export type PostHashtag = $Result.DefaultSelection<Prisma.$PostHashtagPayload>
/**
 * Model PostResolution
 * 
 */
export type PostResolution = $Result.DefaultSelection<Prisma.$PostResolutionPayload>
/**
 * Model RFI
 * 
 */
export type RFI = $Result.DefaultSelection<Prisma.$RFIPayload>
/**
 * Model Approval
 * 
 */
export type Approval = $Result.DefaultSelection<Prisma.$ApprovalPayload>
/**
 * Model SafetyIncident
 * 
 */
export type SafetyIncident = $Result.DefaultSelection<Prisma.$SafetyIncidentPayload>
/**
 * Model UserFollow
 * 
 */
export type UserFollow = $Result.DefaultSelection<Prisma.$UserFollowPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model XPTransaction
 * 
 */
export type XPTransaction = $Result.DefaultSelection<Prisma.$XPTransactionPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model ActivityLog
 * 
 */
export type ActivityLog = $Result.DefaultSelection<Prisma.$ActivityLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER',
  CLIENT: 'CLIENT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ProjectStatus: {
  PLANNING: 'PLANNING',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const PhaseStatus: {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

export type PhaseStatus = (typeof PhaseStatus)[keyof typeof PhaseStatus]


export const ProjectRole: {
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  ARCHITECT: 'ARCHITECT',
  ENGINEER: 'ENGINEER',
  CONTRACTOR: 'CONTRACTOR',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER',
  CLIENT_REP: 'CLIENT_REP'
};

export type ProjectRole = (typeof ProjectRole)[keyof typeof ProjectRole]


export const TaskStatus: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  BLOCKED: 'BLOCKED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const TaskPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type TaskPriority = (typeof TaskPriority)[keyof typeof TaskPriority]


export const DocumentType: {
  BLUEPRINT: 'BLUEPRINT',
  SPECIFICATION: 'SPECIFICATION',
  CONTRACT: 'CONTRACT',
  REPORT: 'REPORT',
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO',
  BIM_MODEL: 'BIM_MODEL',
  OTHER: 'OTHER'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const PostType: {
  GENERAL: 'GENERAL',
  DESIGN_ISSUE: 'DESIGN_ISSUE',
  CLASH_DETECTION: 'CLASH_DETECTION',
  CONSTRUCTION_ISSUE: 'CONSTRUCTION_ISSUE',
  SAFETY_INCIDENT: 'SAFETY_INCIDENT',
  PROGRESS_UPDATE: 'PROGRESS_UPDATE',
  RFI_REQUEST: 'RFI_REQUEST',
  QUALITY_ISSUE: 'QUALITY_ISSUE',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  KNOWLEDGE_SHARE: 'KNOWLEDGE_SHARE',
  CLIENT_UPDATE: 'CLIENT_UPDATE'
};

export type PostType = (typeof PostType)[keyof typeof PostType]


export const PostPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  CRITICAL: 'CRITICAL'
};

export type PostPriority = (typeof PostPriority)[keyof typeof PostPriority]


export const PostStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

export type PostStatus = (typeof PostStatus)[keyof typeof PostStatus]


export const AttachmentType: {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  DRAWING_2D: 'DRAWING_2D',
  BIM_MODEL: 'BIM_MODEL',
  AUDIO: 'AUDIO',
  LINK: 'LINK'
};

export type AttachmentType = (typeof AttachmentType)[keyof typeof AttachmentType]


export const MarkupType: {
  CIRCLE: 'CIRCLE',
  RECTANGLE: 'RECTANGLE',
  ARROW: 'ARROW',
  TEXT: 'TEXT',
  LINE: 'LINE',
  FREEHAND: 'FREEHAND',
  MEASUREMENT: 'MEASUREMENT',
  HIGHLIGHT: 'HIGHLIGHT',
  PIN: 'PIN'
};

export type MarkupType = (typeof MarkupType)[keyof typeof MarkupType]


export const BimDiscipline: {
  ARCHITECTURAL: 'ARCHITECTURAL',
  STRUCTURAL: 'STRUCTURAL',
  MECHANICAL: 'MECHANICAL',
  ELECTRICAL: 'ELECTRICAL',
  PLUMBING: 'PLUMBING',
  FIRE_PROTECTION: 'FIRE_PROTECTION',
  SITE: 'SITE',
  CIVIL: 'CIVIL'
};

export type BimDiscipline = (typeof BimDiscipline)[keyof typeof BimDiscipline]


export const RFIPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type RFIPriority = (typeof RFIPriority)[keyof typeof RFIPriority]


export const RFIStatus: {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESPONDED: 'RESPONDED',
  CLOSED: 'CLOSED'
};

export type RFIStatus = (typeof RFIStatus)[keyof typeof RFIStatus]


export const RFICategory: {
  CLARIFICATION: 'CLARIFICATION',
  DESIGN_CHANGE: 'DESIGN_CHANGE',
  SUBSTITUTION: 'SUBSTITUTION',
  CONFLICT_RESOLUTION: 'CONFLICT_RESOLUTION',
  SPECIFICATION_ISSUE: 'SPECIFICATION_ISSUE'
};

export type RFICategory = (typeof RFICategory)[keyof typeof RFICategory]


export const IncidentType: {
  INJURY: 'INJURY',
  NEAR_MISS: 'NEAR_MISS',
  PROPERTY_DAMAGE: 'PROPERTY_DAMAGE',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  SECURITY: 'SECURITY',
  EQUIPMENT_FAILURE: 'EQUIPMENT_FAILURE',
  PROCESS_DEVIATION: 'PROCESS_DEVIATION'
};

export type IncidentType = (typeof IncidentType)[keyof typeof IncidentType]


export const IncidentSeverity: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type IncidentSeverity = (typeof IncidentSeverity)[keyof typeof IncidentSeverity]


export const IncidentStatus: {
  REPORTED: 'REPORTED',
  INVESTIGATING: 'INVESTIGATING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

export type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus]


export const AchievementCategory: {
  SAFETY: 'SAFETY',
  QUALITY: 'QUALITY',
  COLLABORATION: 'COLLABORATION',
  INNOVATION: 'INNOVATION',
  LEADERSHIP: 'LEADERSHIP',
  LEARNING: 'LEARNING'
};

export type AchievementCategory = (typeof AchievementCategory)[keyof typeof AchievementCategory]


export const AchievementRarity: {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

export type AchievementRarity = (typeof AchievementRarity)[keyof typeof AchievementRarity]


export const BadgeCategory: {
  EXPERTISE: 'EXPERTISE',
  SAFETY: 'SAFETY',
  COLLABORATION: 'COLLABORATION',
  LEADERSHIP: 'LEADERSHIP',
  INNOVATION: 'INNOVATION',
  MILESTONE: 'MILESTONE'
};

export type BadgeCategory = (typeof BadgeCategory)[keyof typeof BadgeCategory]


export const XPCategory: {
  POST_CREATED: 'POST_CREATED',
  POST_LIKED: 'POST_LIKED',
  COMMENT_ADDED: 'COMMENT_ADDED',
  ISSUE_RESOLVED: 'ISSUE_RESOLVED',
  SAFETY_REPORT: 'SAFETY_REPORT',
  KNOWLEDGE_SHARE: 'KNOWLEDGE_SHARE',
  COLLABORATION: 'COLLABORATION',
  MILESTONE_ACHIEVED: 'MILESTONE_ACHIEVED'
};

export type XPCategory = (typeof XPCategory)[keyof typeof XPCategory]


export const AccessLevel: {
  RESTRICTED: 'RESTRICTED',
  STANDARD: 'STANDARD',
  ELEVATED: 'ELEVATED',
  CONFIDENTIAL: 'CONFIDENTIAL'
};

export type AccessLevel = (typeof AccessLevel)[keyof typeof AccessLevel]


export const ApprovalType: {
  DOCUMENT_REVIEW: 'DOCUMENT_REVIEW',
  RFI_RESPONSE: 'RFI_RESPONSE',
  CHANGE_ORDER: 'CHANGE_ORDER',
  BUDGET_APPROVAL: 'BUDGET_APPROVAL',
  SAFETY_CLEARANCE: 'SAFETY_CLEARANCE',
  QUALITY_SIGN_OFF: 'QUALITY_SIGN_OFF'
};

export type ApprovalType = (typeof ApprovalType)[keyof typeof ApprovalType]


export const ApprovalStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION'
};

export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus]


export const ApprovalPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type ApprovalPriority = (typeof ApprovalPriority)[keyof typeof ApprovalPriority]


export const ComplianceStatus: {
  PENDING: 'PENDING',
  COMPLIANT: 'COMPLIANT',
  NON_COMPLIANT: 'NON_COMPLIANT',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

export type ComplianceStatus = (typeof ComplianceStatus)[keyof typeof ComplianceStatus]


export const RiskLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const BusinessImpact: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type BusinessImpact = (typeof BusinessImpact)[keyof typeof BusinessImpact]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type PhaseStatus = $Enums.PhaseStatus

export const PhaseStatus: typeof $Enums.PhaseStatus

export type ProjectRole = $Enums.ProjectRole

export const ProjectRole: typeof $Enums.ProjectRole

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type TaskPriority = $Enums.TaskPriority

export const TaskPriority: typeof $Enums.TaskPriority

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type PostType = $Enums.PostType

export const PostType: typeof $Enums.PostType

export type PostPriority = $Enums.PostPriority

export const PostPriority: typeof $Enums.PostPriority

export type PostStatus = $Enums.PostStatus

export const PostStatus: typeof $Enums.PostStatus

export type AttachmentType = $Enums.AttachmentType

export const AttachmentType: typeof $Enums.AttachmentType

export type MarkupType = $Enums.MarkupType

export const MarkupType: typeof $Enums.MarkupType

export type BimDiscipline = $Enums.BimDiscipline

export const BimDiscipline: typeof $Enums.BimDiscipline

export type RFIPriority = $Enums.RFIPriority

export const RFIPriority: typeof $Enums.RFIPriority

export type RFIStatus = $Enums.RFIStatus

export const RFIStatus: typeof $Enums.RFIStatus

export type RFICategory = $Enums.RFICategory

export const RFICategory: typeof $Enums.RFICategory

export type IncidentType = $Enums.IncidentType

export const IncidentType: typeof $Enums.IncidentType

export type IncidentSeverity = $Enums.IncidentSeverity

export const IncidentSeverity: typeof $Enums.IncidentSeverity

export type IncidentStatus = $Enums.IncidentStatus

export const IncidentStatus: typeof $Enums.IncidentStatus

export type AchievementCategory = $Enums.AchievementCategory

export const AchievementCategory: typeof $Enums.AchievementCategory

export type AchievementRarity = $Enums.AchievementRarity

export const AchievementRarity: typeof $Enums.AchievementRarity

export type BadgeCategory = $Enums.BadgeCategory

export const BadgeCategory: typeof $Enums.BadgeCategory

export type XPCategory = $Enums.XPCategory

export const XPCategory: typeof $Enums.XPCategory

export type AccessLevel = $Enums.AccessLevel

export const AccessLevel: typeof $Enums.AccessLevel

export type ApprovalType = $Enums.ApprovalType

export const ApprovalType: typeof $Enums.ApprovalType

export type ApprovalStatus = $Enums.ApprovalStatus

export const ApprovalStatus: typeof $Enums.ApprovalStatus

export type ApprovalPriority = $Enums.ApprovalPriority

export const ApprovalPriority: typeof $Enums.ApprovalPriority

export type ComplianceStatus = $Enums.ComplianceStatus

export const ComplianceStatus: typeof $Enums.ComplianceStatus

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type BusinessImpact = $Enums.BusinessImpact

export const BusinessImpact: typeof $Enums.BusinessImpact

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectPhase`: Exposes CRUD operations for the **ProjectPhase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectPhases
    * const projectPhases = await prisma.projectPhase.findMany()
    * ```
    */
  get projectPhase(): Prisma.ProjectPhaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectMember`: Exposes CRUD operations for the **ProjectMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectMembers
    * const projectMembers = await prisma.projectMember.findMany()
    * ```
    */
  get projectMember(): Prisma.ProjectMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postAttachment`: Exposes CRUD operations for the **PostAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostAttachments
    * const postAttachments = await prisma.postAttachment.findMany()
    * ```
    */
  get postAttachment(): Prisma.PostAttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postMarkup`: Exposes CRUD operations for the **PostMarkup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostMarkups
    * const postMarkups = await prisma.postMarkup.findMany()
    * ```
    */
  get postMarkup(): Prisma.PostMarkupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postBimElement`: Exposes CRUD operations for the **PostBimElement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostBimElements
    * const postBimElements = await prisma.postBimElement.findMany()
    * ```
    */
  get postBimElement(): Prisma.PostBimElementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postLike`: Exposes CRUD operations for the **PostLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostLikes
    * const postLikes = await prisma.postLike.findMany()
    * ```
    */
  get postLike(): Prisma.PostLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postComment`: Exposes CRUD operations for the **PostComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostComments
    * const postComments = await prisma.postComment.findMany()
    * ```
    */
  get postComment(): Prisma.PostCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postShare`: Exposes CRUD operations for the **PostShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostShares
    * const postShares = await prisma.postShare.findMany()
    * ```
    */
  get postShare(): Prisma.PostShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postMention`: Exposes CRUD operations for the **PostMention** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostMentions
    * const postMentions = await prisma.postMention.findMany()
    * ```
    */
  get postMention(): Prisma.PostMentionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postHashtag`: Exposes CRUD operations for the **PostHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostHashtags
    * const postHashtags = await prisma.postHashtag.findMany()
    * ```
    */
  get postHashtag(): Prisma.PostHashtagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postResolution`: Exposes CRUD operations for the **PostResolution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostResolutions
    * const postResolutions = await prisma.postResolution.findMany()
    * ```
    */
  get postResolution(): Prisma.PostResolutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rFI`: Exposes CRUD operations for the **RFI** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RFIS
    * const rFIS = await prisma.rFI.findMany()
    * ```
    */
  get rFI(): Prisma.RFIDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approval`: Exposes CRUD operations for the **Approval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approval.findMany()
    * ```
    */
  get approval(): Prisma.ApprovalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.safetyIncident`: Exposes CRUD operations for the **SafetyIncident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SafetyIncidents
    * const safetyIncidents = await prisma.safetyIncident.findMany()
    * ```
    */
  get safetyIncident(): Prisma.SafetyIncidentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userFollow`: Exposes CRUD operations for the **UserFollow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFollows
    * const userFollows = await prisma.userFollow.findMany()
    * ```
    */
  get userFollow(): Prisma.UserFollowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.xPTransaction`: Exposes CRUD operations for the **XPTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more XPTransactions
    * const xPTransactions = await prisma.xPTransaction.findMany()
    * ```
    */
  get xPTransaction(): Prisma.XPTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityLog`: Exposes CRUD operations for the **ActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLog.findMany()
    * ```
    */
  get activityLog(): Prisma.ActivityLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organization: 'Organization',
    User: 'User',
    Project: 'Project',
    ProjectPhase: 'ProjectPhase',
    ProjectMember: 'ProjectMember',
    Task: 'Task',
    Post: 'Post',
    PostAttachment: 'PostAttachment',
    PostMarkup: 'PostMarkup',
    PostBimElement: 'PostBimElement',
    PostLike: 'PostLike',
    PostComment: 'PostComment',
    PostShare: 'PostShare',
    PostMention: 'PostMention',
    PostHashtag: 'PostHashtag',
    PostResolution: 'PostResolution',
    RFI: 'RFI',
    Approval: 'Approval',
    SafetyIncident: 'SafetyIncident',
    UserFollow: 'UserFollow',
    Achievement: 'Achievement',
    UserAchievement: 'UserAchievement',
    Badge: 'Badge',
    UserBadge: 'UserBadge',
    XPTransaction: 'XPTransaction',
    Document: 'Document',
    Comment: 'Comment',
    ActivityLog: 'ActivityLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "organization" | "user" | "project" | "projectPhase" | "projectMember" | "task" | "post" | "postAttachment" | "postMarkup" | "postBimElement" | "postLike" | "postComment" | "postShare" | "postMention" | "postHashtag" | "postResolution" | "rFI" | "approval" | "safetyIncident" | "userFollow" | "achievement" | "userAchievement" | "badge" | "userBadge" | "xPTransaction" | "document" | "comment" | "activityLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProjectPhase: {
        payload: Prisma.$ProjectPhasePayload<ExtArgs>
        fields: Prisma.ProjectPhaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectPhaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectPhaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          findFirst: {
            args: Prisma.ProjectPhaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectPhaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          findMany: {
            args: Prisma.ProjectPhaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>[]
          }
          create: {
            args: Prisma.ProjectPhaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          createMany: {
            args: Prisma.ProjectPhaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectPhaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>[]
          }
          delete: {
            args: Prisma.ProjectPhaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          update: {
            args: Prisma.ProjectPhaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          deleteMany: {
            args: Prisma.ProjectPhaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectPhaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectPhaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>[]
          }
          upsert: {
            args: Prisma.ProjectPhaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPhasePayload>
          }
          aggregate: {
            args: Prisma.ProjectPhaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectPhase>
          }
          groupBy: {
            args: Prisma.ProjectPhaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectPhaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectPhaseCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectPhaseCountAggregateOutputType> | number
          }
        }
      }
      ProjectMember: {
        payload: Prisma.$ProjectMemberPayload<ExtArgs>
        fields: Prisma.ProjectMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findFirst: {
            args: Prisma.ProjectMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findMany: {
            args: Prisma.ProjectMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          create: {
            args: Prisma.ProjectMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          createMany: {
            args: Prisma.ProjectMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          delete: {
            args: Prisma.ProjectMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          update: {
            args: Prisma.ProjectMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          deleteMany: {
            args: Prisma.ProjectMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          upsert: {
            args: Prisma.ProjectMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          aggregate: {
            args: Prisma.ProjectMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectMember>
          }
          groupBy: {
            args: Prisma.ProjectMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      PostAttachment: {
        payload: Prisma.$PostAttachmentPayload<ExtArgs>
        fields: Prisma.PostAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          findFirst: {
            args: Prisma.PostAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          findMany: {
            args: Prisma.PostAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>[]
          }
          create: {
            args: Prisma.PostAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          createMany: {
            args: Prisma.PostAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostAttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>[]
          }
          delete: {
            args: Prisma.PostAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          update: {
            args: Prisma.PostAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.PostAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostAttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>[]
          }
          upsert: {
            args: Prisma.PostAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostAttachmentPayload>
          }
          aggregate: {
            args: Prisma.PostAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostAttachment>
          }
          groupBy: {
            args: Prisma.PostAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<PostAttachmentCountAggregateOutputType> | number
          }
        }
      }
      PostMarkup: {
        payload: Prisma.$PostMarkupPayload<ExtArgs>
        fields: Prisma.PostMarkupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostMarkupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostMarkupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          findFirst: {
            args: Prisma.PostMarkupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostMarkupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          findMany: {
            args: Prisma.PostMarkupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>[]
          }
          create: {
            args: Prisma.PostMarkupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          createMany: {
            args: Prisma.PostMarkupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostMarkupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>[]
          }
          delete: {
            args: Prisma.PostMarkupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          update: {
            args: Prisma.PostMarkupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          deleteMany: {
            args: Prisma.PostMarkupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostMarkupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostMarkupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>[]
          }
          upsert: {
            args: Prisma.PostMarkupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMarkupPayload>
          }
          aggregate: {
            args: Prisma.PostMarkupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostMarkup>
          }
          groupBy: {
            args: Prisma.PostMarkupGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostMarkupGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostMarkupCountArgs<ExtArgs>
            result: $Utils.Optional<PostMarkupCountAggregateOutputType> | number
          }
        }
      }
      PostBimElement: {
        payload: Prisma.$PostBimElementPayload<ExtArgs>
        fields: Prisma.PostBimElementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostBimElementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostBimElementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          findFirst: {
            args: Prisma.PostBimElementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostBimElementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          findMany: {
            args: Prisma.PostBimElementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>[]
          }
          create: {
            args: Prisma.PostBimElementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          createMany: {
            args: Prisma.PostBimElementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostBimElementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>[]
          }
          delete: {
            args: Prisma.PostBimElementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          update: {
            args: Prisma.PostBimElementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          deleteMany: {
            args: Prisma.PostBimElementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostBimElementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostBimElementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>[]
          }
          upsert: {
            args: Prisma.PostBimElementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostBimElementPayload>
          }
          aggregate: {
            args: Prisma.PostBimElementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostBimElement>
          }
          groupBy: {
            args: Prisma.PostBimElementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostBimElementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostBimElementCountArgs<ExtArgs>
            result: $Utils.Optional<PostBimElementCountAggregateOutputType> | number
          }
        }
      }
      PostLike: {
        payload: Prisma.$PostLikePayload<ExtArgs>
        fields: Prisma.PostLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          findFirst: {
            args: Prisma.PostLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          findMany: {
            args: Prisma.PostLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>[]
          }
          create: {
            args: Prisma.PostLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          createMany: {
            args: Prisma.PostLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>[]
          }
          delete: {
            args: Prisma.PostLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          update: {
            args: Prisma.PostLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          deleteMany: {
            args: Prisma.PostLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>[]
          }
          upsert: {
            args: Prisma.PostLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          aggregate: {
            args: Prisma.PostLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostLike>
          }
          groupBy: {
            args: Prisma.PostLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostLikeCountArgs<ExtArgs>
            result: $Utils.Optional<PostLikeCountAggregateOutputType> | number
          }
        }
      }
      PostComment: {
        payload: Prisma.$PostCommentPayload<ExtArgs>
        fields: Prisma.PostCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          findFirst: {
            args: Prisma.PostCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          findMany: {
            args: Prisma.PostCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>[]
          }
          create: {
            args: Prisma.PostCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          createMany: {
            args: Prisma.PostCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>[]
          }
          delete: {
            args: Prisma.PostCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          update: {
            args: Prisma.PostCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          deleteMany: {
            args: Prisma.PostCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>[]
          }
          upsert: {
            args: Prisma.PostCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostCommentPayload>
          }
          aggregate: {
            args: Prisma.PostCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostComment>
          }
          groupBy: {
            args: Prisma.PostCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCommentCountArgs<ExtArgs>
            result: $Utils.Optional<PostCommentCountAggregateOutputType> | number
          }
        }
      }
      PostShare: {
        payload: Prisma.$PostSharePayload<ExtArgs>
        fields: Prisma.PostShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          findFirst: {
            args: Prisma.PostShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          findMany: {
            args: Prisma.PostShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>[]
          }
          create: {
            args: Prisma.PostShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          createMany: {
            args: Prisma.PostShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>[]
          }
          delete: {
            args: Prisma.PostShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          update: {
            args: Prisma.PostShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          deleteMany: {
            args: Prisma.PostShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>[]
          }
          upsert: {
            args: Prisma.PostShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSharePayload>
          }
          aggregate: {
            args: Prisma.PostShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostShare>
          }
          groupBy: {
            args: Prisma.PostShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostShareCountArgs<ExtArgs>
            result: $Utils.Optional<PostShareCountAggregateOutputType> | number
          }
        }
      }
      PostMention: {
        payload: Prisma.$PostMentionPayload<ExtArgs>
        fields: Prisma.PostMentionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostMentionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostMentionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          findFirst: {
            args: Prisma.PostMentionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostMentionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          findMany: {
            args: Prisma.PostMentionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>[]
          }
          create: {
            args: Prisma.PostMentionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          createMany: {
            args: Prisma.PostMentionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostMentionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>[]
          }
          delete: {
            args: Prisma.PostMentionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          update: {
            args: Prisma.PostMentionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          deleteMany: {
            args: Prisma.PostMentionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostMentionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostMentionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>[]
          }
          upsert: {
            args: Prisma.PostMentionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostMentionPayload>
          }
          aggregate: {
            args: Prisma.PostMentionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostMention>
          }
          groupBy: {
            args: Prisma.PostMentionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostMentionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostMentionCountArgs<ExtArgs>
            result: $Utils.Optional<PostMentionCountAggregateOutputType> | number
          }
        }
      }
      PostHashtag: {
        payload: Prisma.$PostHashtagPayload<ExtArgs>
        fields: Prisma.PostHashtagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostHashtagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostHashtagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          findFirst: {
            args: Prisma.PostHashtagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostHashtagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          findMany: {
            args: Prisma.PostHashtagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>[]
          }
          create: {
            args: Prisma.PostHashtagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          createMany: {
            args: Prisma.PostHashtagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostHashtagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>[]
          }
          delete: {
            args: Prisma.PostHashtagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          update: {
            args: Prisma.PostHashtagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          deleteMany: {
            args: Prisma.PostHashtagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostHashtagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostHashtagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>[]
          }
          upsert: {
            args: Prisma.PostHashtagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostHashtagPayload>
          }
          aggregate: {
            args: Prisma.PostHashtagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostHashtag>
          }
          groupBy: {
            args: Prisma.PostHashtagGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostHashtagGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostHashtagCountArgs<ExtArgs>
            result: $Utils.Optional<PostHashtagCountAggregateOutputType> | number
          }
        }
      }
      PostResolution: {
        payload: Prisma.$PostResolutionPayload<ExtArgs>
        fields: Prisma.PostResolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostResolutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostResolutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          findFirst: {
            args: Prisma.PostResolutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostResolutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          findMany: {
            args: Prisma.PostResolutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>[]
          }
          create: {
            args: Prisma.PostResolutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          createMany: {
            args: Prisma.PostResolutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostResolutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>[]
          }
          delete: {
            args: Prisma.PostResolutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          update: {
            args: Prisma.PostResolutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          deleteMany: {
            args: Prisma.PostResolutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostResolutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostResolutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>[]
          }
          upsert: {
            args: Prisma.PostResolutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostResolutionPayload>
          }
          aggregate: {
            args: Prisma.PostResolutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostResolution>
          }
          groupBy: {
            args: Prisma.PostResolutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostResolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostResolutionCountArgs<ExtArgs>
            result: $Utils.Optional<PostResolutionCountAggregateOutputType> | number
          }
        }
      }
      RFI: {
        payload: Prisma.$RFIPayload<ExtArgs>
        fields: Prisma.RFIFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RFIFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RFIFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          findFirst: {
            args: Prisma.RFIFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RFIFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          findMany: {
            args: Prisma.RFIFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>[]
          }
          create: {
            args: Prisma.RFICreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          createMany: {
            args: Prisma.RFICreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RFICreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>[]
          }
          delete: {
            args: Prisma.RFIDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          update: {
            args: Prisma.RFIUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          deleteMany: {
            args: Prisma.RFIDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RFIUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RFIUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>[]
          }
          upsert: {
            args: Prisma.RFIUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RFIPayload>
          }
          aggregate: {
            args: Prisma.RFIAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRFI>
          }
          groupBy: {
            args: Prisma.RFIGroupByArgs<ExtArgs>
            result: $Utils.Optional<RFIGroupByOutputType>[]
          }
          count: {
            args: Prisma.RFICountArgs<ExtArgs>
            result: $Utils.Optional<RFICountAggregateOutputType> | number
          }
        }
      }
      Approval: {
        payload: Prisma.$ApprovalPayload<ExtArgs>
        fields: Prisma.ApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findFirst: {
            args: Prisma.ApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findMany: {
            args: Prisma.ApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          create: {
            args: Prisma.ApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          createMany: {
            args: Prisma.ApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApprovalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          delete: {
            args: Prisma.ApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          update: {
            args: Prisma.ApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApprovalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          upsert: {
            args: Prisma.ApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          aggregate: {
            args: Prisma.ApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApproval>
          }
          groupBy: {
            args: Prisma.ApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalCountAggregateOutputType> | number
          }
        }
      }
      SafetyIncident: {
        payload: Prisma.$SafetyIncidentPayload<ExtArgs>
        fields: Prisma.SafetyIncidentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SafetyIncidentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SafetyIncidentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          findFirst: {
            args: Prisma.SafetyIncidentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SafetyIncidentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          findMany: {
            args: Prisma.SafetyIncidentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>[]
          }
          create: {
            args: Prisma.SafetyIncidentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          createMany: {
            args: Prisma.SafetyIncidentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SafetyIncidentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>[]
          }
          delete: {
            args: Prisma.SafetyIncidentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          update: {
            args: Prisma.SafetyIncidentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          deleteMany: {
            args: Prisma.SafetyIncidentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SafetyIncidentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SafetyIncidentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>[]
          }
          upsert: {
            args: Prisma.SafetyIncidentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SafetyIncidentPayload>
          }
          aggregate: {
            args: Prisma.SafetyIncidentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSafetyIncident>
          }
          groupBy: {
            args: Prisma.SafetyIncidentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SafetyIncidentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SafetyIncidentCountArgs<ExtArgs>
            result: $Utils.Optional<SafetyIncidentCountAggregateOutputType> | number
          }
        }
      }
      UserFollow: {
        payload: Prisma.$UserFollowPayload<ExtArgs>
        fields: Prisma.UserFollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          findFirst: {
            args: Prisma.UserFollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          findMany: {
            args: Prisma.UserFollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>[]
          }
          create: {
            args: Prisma.UserFollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          createMany: {
            args: Prisma.UserFollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserFollowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>[]
          }
          delete: {
            args: Prisma.UserFollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          update: {
            args: Prisma.UserFollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          deleteMany: {
            args: Prisma.UserFollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserFollowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>[]
          }
          upsert: {
            args: Prisma.UserFollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowPayload>
          }
          aggregate: {
            args: Prisma.UserFollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFollow>
          }
          groupBy: {
            args: Prisma.UserFollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFollowCountArgs<ExtArgs>
            result: $Utils.Optional<UserFollowCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserBadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      XPTransaction: {
        payload: Prisma.$XPTransactionPayload<ExtArgs>
        fields: Prisma.XPTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.XPTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.XPTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          findFirst: {
            args: Prisma.XPTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.XPTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          findMany: {
            args: Prisma.XPTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>[]
          }
          create: {
            args: Prisma.XPTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          createMany: {
            args: Prisma.XPTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.XPTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>[]
          }
          delete: {
            args: Prisma.XPTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          update: {
            args: Prisma.XPTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          deleteMany: {
            args: Prisma.XPTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.XPTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.XPTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>[]
          }
          upsert: {
            args: Prisma.XPTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XPTransactionPayload>
          }
          aggregate: {
            args: Prisma.XPTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateXPTransaction>
          }
          groupBy: {
            args: Prisma.XPTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<XPTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.XPTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<XPTransactionCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      ActivityLog: {
        payload: Prisma.$ActivityLogPayload<ExtArgs>
        fields: Prisma.ActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findMany: {
            args: Prisma.ActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          create: {
            args: Prisma.ActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          createMany: {
            args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          update: {
            args: Prisma.ActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLog>
          }
          groupBy: {
            args: Prisma.ActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    organization?: OrganizationOmit
    user?: UserOmit
    project?: ProjectOmit
    projectPhase?: ProjectPhaseOmit
    projectMember?: ProjectMemberOmit
    task?: TaskOmit
    post?: PostOmit
    postAttachment?: PostAttachmentOmit
    postMarkup?: PostMarkupOmit
    postBimElement?: PostBimElementOmit
    postLike?: PostLikeOmit
    postComment?: PostCommentOmit
    postShare?: PostShareOmit
    postMention?: PostMentionOmit
    postHashtag?: PostHashtagOmit
    postResolution?: PostResolutionOmit
    rFI?: RFIOmit
    approval?: ApprovalOmit
    safetyIncident?: SafetyIncidentOmit
    userFollow?: UserFollowOmit
    achievement?: AchievementOmit
    userAchievement?: UserAchievementOmit
    badge?: BadgeOmit
    userBadge?: UserBadgeOmit
    xPTransaction?: XPTransactionOmit
    document?: DocumentOmit
    comment?: CommentOmit
    activityLog?: ActivityLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
    projects: number
    posts: number
    rfis: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    projects?: boolean | OrganizationCountOutputTypeCountProjectsArgs
    posts?: boolean | OrganizationCountOutputTypeCountPostsArgs
    rfis?: boolean | OrganizationCountOutputTypeCountRfisArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountRfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignedTasks: number
    createdTasks: number
    projectMembers: number
    comments: number
    documents: number
    activityLogs: number
    posts: number
    postLikes: number
    postComments: number
    postShares: number
    mentions: number
    mentionedBy: number
    following: number
    followers: number
    submittedRFIs: number
    assignedRFIs: number
    achievements: number
    badges: number
    xpTransactions: number
    reportedIncidents: number
    assignedIncidents: number
    verifiedResolutions: number
    approvalsGiven: number
    approvalsReceived: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    createdTasks?: boolean | UserCountOutputTypeCountCreatedTasksArgs
    projectMembers?: boolean | UserCountOutputTypeCountProjectMembersArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    postLikes?: boolean | UserCountOutputTypeCountPostLikesArgs
    postComments?: boolean | UserCountOutputTypeCountPostCommentsArgs
    postShares?: boolean | UserCountOutputTypeCountPostSharesArgs
    mentions?: boolean | UserCountOutputTypeCountMentionsArgs
    mentionedBy?: boolean | UserCountOutputTypeCountMentionedByArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    submittedRFIs?: boolean | UserCountOutputTypeCountSubmittedRFIsArgs
    assignedRFIs?: boolean | UserCountOutputTypeCountAssignedRFIsArgs
    achievements?: boolean | UserCountOutputTypeCountAchievementsArgs
    badges?: boolean | UserCountOutputTypeCountBadgesArgs
    xpTransactions?: boolean | UserCountOutputTypeCountXpTransactionsArgs
    reportedIncidents?: boolean | UserCountOutputTypeCountReportedIncidentsArgs
    assignedIncidents?: boolean | UserCountOutputTypeCountAssignedIncidentsArgs
    verifiedResolutions?: boolean | UserCountOutputTypeCountVerifiedResolutionsArgs
    approvalsGiven?: boolean | UserCountOutputTypeCountApprovalsGivenArgs
    approvalsReceived?: boolean | UserCountOutputTypeCountApprovalsReceivedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMentionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMentionedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMentionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmittedRFIsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedRFIsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountXpTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XPTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportedIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SafetyIncidentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SafetyIncidentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVerifiedResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostResolutionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    phases: number
    tasks: number
    members: number
    documents: number
    comments: number
    activityLogs: number
    posts: number
    rfis: number
    safetyIncidents: number
    approvals: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phases?: boolean | ProjectCountOutputTypeCountPhasesArgs
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
    members?: boolean | ProjectCountOutputTypeCountMembersArgs
    documents?: boolean | ProjectCountOutputTypeCountDocumentsArgs
    comments?: boolean | ProjectCountOutputTypeCountCommentsArgs
    activityLogs?: boolean | ProjectCountOutputTypeCountActivityLogsArgs
    posts?: boolean | ProjectCountOutputTypeCountPostsArgs
    rfis?: boolean | ProjectCountOutputTypeCountRfisArgs
    safetyIncidents?: boolean | ProjectCountOutputTypeCountSafetyIncidentsArgs
    approvals?: boolean | ProjectCountOutputTypeCountApprovalsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectPhaseWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountRfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSafetyIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SafetyIncidentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }


  /**
   * Count Type ProjectPhaseCountOutputType
   */

  export type ProjectPhaseCountOutputType = {
    tasks: number
    posts: number
  }

  export type ProjectPhaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ProjectPhaseCountOutputTypeCountTasksArgs
    posts?: boolean | ProjectPhaseCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * ProjectPhaseCountOutputType without action
   */
  export type ProjectPhaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhaseCountOutputType
     */
    select?: ProjectPhaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectPhaseCountOutputType without action
   */
  export type ProjectPhaseCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectPhaseCountOutputType without action
   */
  export type ProjectPhaseCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    subtasks: number
    comments: number
    documents: number
    posts: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtasks?: boolean | TaskCountOutputTypeCountSubtasksArgs
    comments?: boolean | TaskCountOutputTypeCountCommentsArgs
    documents?: boolean | TaskCountOutputTypeCountDocumentsArgs
    posts?: boolean | TaskCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountSubtasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    attachments: number
    markups: number
    bimElements: number
    likes: number
    comments: number
    shares: number
    mentions: number
    hashtags: number
    rfis: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | PostCountOutputTypeCountAttachmentsArgs
    markups?: boolean | PostCountOutputTypeCountMarkupsArgs
    bimElements?: boolean | PostCountOutputTypeCountBimElementsArgs
    likes?: boolean | PostCountOutputTypeCountLikesArgs
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
    shares?: boolean | PostCountOutputTypeCountSharesArgs
    mentions?: boolean | PostCountOutputTypeCountMentionsArgs
    hashtags?: boolean | PostCountOutputTypeCountHashtagsArgs
    rfis?: boolean | PostCountOutputTypeCountRfisArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostAttachmentWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountMarkupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMarkupWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountBimElementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostBimElementWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostCommentWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostShareWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountMentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMentionWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountHashtagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostHashtagWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountRfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
  }


  /**
   * Count Type PostAttachmentCountOutputType
   */

  export type PostAttachmentCountOutputType = {
    markups: number
  }

  export type PostAttachmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    markups?: boolean | PostAttachmentCountOutputTypeCountMarkupsArgs
  }

  // Custom InputTypes
  /**
   * PostAttachmentCountOutputType without action
   */
  export type PostAttachmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachmentCountOutputType
     */
    select?: PostAttachmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostAttachmentCountOutputType without action
   */
  export type PostAttachmentCountOutputTypeCountMarkupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMarkupWhereInput
  }


  /**
   * Count Type PostCommentCountOutputType
   */

  export type PostCommentCountOutputType = {
    replies: number
  }

  export type PostCommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | PostCommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * PostCommentCountOutputType without action
   */
  export type PostCommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCommentCountOutputType
     */
    select?: PostCommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCommentCountOutputType without action
   */
  export type PostCommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostCommentWhereInput
  }


  /**
   * Count Type PostResolutionCountOutputType
   */

  export type PostResolutionCountOutputType = {
    posts: number
  }

  export type PostResolutionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | PostResolutionCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * PostResolutionCountOutputType without action
   */
  export type PostResolutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolutionCountOutputType
     */
    select?: PostResolutionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostResolutionCountOutputType without action
   */
  export type PostResolutionCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    userAchievements: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | AchievementCountOutputTypeCountUserAchievementsArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountUserAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Count Type BadgeCountOutputType
   */

  export type BadgeCountOutputType = {
    userBadges: number
  }

  export type BadgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | BadgeCountOutputTypeCountUserBadgesArgs
  }

  // Custom InputTypes
  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeCountOutputType
     */
    select?: BadgeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    maxProjects: number | null
    maxUsersPerProject: number | null
    apiRateLimit: number | null
    storageLimit: number | null
    auditRetention: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    maxProjects: number | null
    maxUsersPerProject: number | null
    apiRateLimit: number | null
    storageLimit: number | null
    auditRetention: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subscriptionTier: string | null
    maxProjects: number | null
    maxUsersPerProject: number | null
    apiRateLimit: number | null
    storageLimit: number | null
    customBranding: boolean | null
    ssoEnabled: boolean | null
    auditRetention: number | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subscriptionTier: string | null
    maxProjects: number | null
    maxUsersPerProject: number | null
    apiRateLimit: number | null
    storageLimit: number | null
    customBranding: boolean | null
    ssoEnabled: boolean | null
    auditRetention: number | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    logo: number
    settings: number
    createdAt: number
    updatedAt: number
    subscriptionTier: number
    maxProjects: number
    maxUsersPerProject: number
    apiRateLimit: number
    storageLimit: number
    customBranding: number
    ssoEnabled: number
    auditRetention: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    maxProjects?: true
    maxUsersPerProject?: true
    apiRateLimit?: true
    storageLimit?: true
    auditRetention?: true
  }

  export type OrganizationSumAggregateInputType = {
    maxProjects?: true
    maxUsersPerProject?: true
    apiRateLimit?: true
    storageLimit?: true
    auditRetention?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    subscriptionTier?: true
    maxProjects?: true
    maxUsersPerProject?: true
    apiRateLimit?: true
    storageLimit?: true
    customBranding?: true
    ssoEnabled?: true
    auditRetention?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    subscriptionTier?: true
    maxProjects?: true
    maxUsersPerProject?: true
    apiRateLimit?: true
    storageLimit?: true
    customBranding?: true
    ssoEnabled?: true
    auditRetention?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    subscriptionTier?: true
    maxProjects?: true
    maxUsersPerProject?: true
    apiRateLimit?: true
    storageLimit?: true
    customBranding?: true
    ssoEnabled?: true
    auditRetention?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    slug: string
    logo: string | null
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    subscriptionTier: string
    maxProjects: number
    maxUsersPerProject: number
    apiRateLimit: number
    storageLimit: number
    customBranding: boolean
    ssoEnabled: boolean
    auditRetention: number
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptionTier?: boolean
    maxProjects?: boolean
    maxUsersPerProject?: boolean
    apiRateLimit?: boolean
    storageLimit?: boolean
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    projects?: boolean | Organization$projectsArgs<ExtArgs>
    posts?: boolean | Organization$postsArgs<ExtArgs>
    rfis?: boolean | Organization$rfisArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptionTier?: boolean
    maxProjects?: boolean
    maxUsersPerProject?: boolean
    apiRateLimit?: boolean
    storageLimit?: boolean
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptionTier?: boolean
    maxProjects?: boolean
    maxUsersPerProject?: boolean
    apiRateLimit?: boolean
    storageLimit?: boolean
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptionTier?: boolean
    maxProjects?: boolean
    maxUsersPerProject?: boolean
    apiRateLimit?: boolean
    storageLimit?: boolean
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "logo" | "settings" | "createdAt" | "updatedAt" | "subscriptionTier" | "maxProjects" | "maxUsersPerProject" | "apiRateLimit" | "storageLimit" | "customBranding" | "ssoEnabled" | "auditRetention", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    projects?: boolean | Organization$projectsArgs<ExtArgs>
    posts?: boolean | Organization$postsArgs<ExtArgs>
    rfis?: boolean | Organization$rfisArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      rfis: Prisma.$RFIPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      logo: string | null
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      subscriptionTier: string
      maxProjects: number
      maxUsersPerProject: number
      apiRateLimit: number
      storageLimit: number
      customBranding: boolean
      ssoEnabled: boolean
      auditRetention: number
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends Organization$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends Organization$postsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rfis<T extends Organization$rfisArgs<ExtArgs> = {}>(args?: Subset<T, Organization$rfisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly logo: FieldRef<"Organization", 'String'>
    readonly settings: FieldRef<"Organization", 'Json'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
    readonly subscriptionTier: FieldRef<"Organization", 'String'>
    readonly maxProjects: FieldRef<"Organization", 'Int'>
    readonly maxUsersPerProject: FieldRef<"Organization", 'Int'>
    readonly apiRateLimit: FieldRef<"Organization", 'Int'>
    readonly storageLimit: FieldRef<"Organization", 'Int'>
    readonly customBranding: FieldRef<"Organization", 'Boolean'>
    readonly ssoEnabled: FieldRef<"Organization", 'Boolean'>
    readonly auditRetention: FieldRef<"Organization", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.projects
   */
  export type Organization$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Organization.posts
   */
  export type Organization$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Organization.rfis
   */
  export type Organization$rfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    cursor?: RFIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    experienceYears: number | null
    contributionScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    collaborationScore: number | null
  }

  export type UserSumAggregateOutputType = {
    experienceYears: number | null
    contributionScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    collaborationScore: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    bio: string | null
    specialization: string | null
    experienceYears: number | null
    location: string | null
    contributionScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    collaborationScore: number | null
    professionalLevel: string | null
    phoneNumber: string | null
    emergencyContact: string | null
    lastActiveProject: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    bio: string | null
    specialization: string | null
    experienceYears: number | null
    location: string | null
    contributionScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    collaborationScore: number | null
    professionalLevel: string | null
    phoneNumber: string | null
    emergencyContact: string | null
    lastActiveProject: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    avatar: number
    role: number
    isActive: number
    lastLoginAt: number
    bio: number
    specialization: number
    experienceYears: number
    location: number
    contributionScore: number
    safetyScore: number
    qualityScore: number
    collaborationScore: number
    professionalLevel: number
    certifications: number
    skills: number
    phoneNumber: number
    emergencyContact: number
    lastActiveProject: number
    timezone: number
    notificationPrefs: number
    workingHours: number
    createdAt: number
    updatedAt: number
    organizationId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    experienceYears?: true
    contributionScore?: true
    safetyScore?: true
    qualityScore?: true
    collaborationScore?: true
  }

  export type UserSumAggregateInputType = {
    experienceYears?: true
    contributionScore?: true
    safetyScore?: true
    qualityScore?: true
    collaborationScore?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    avatar?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    bio?: true
    specialization?: true
    experienceYears?: true
    location?: true
    contributionScore?: true
    safetyScore?: true
    qualityScore?: true
    collaborationScore?: true
    professionalLevel?: true
    phoneNumber?: true
    emergencyContact?: true
    lastActiveProject?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    avatar?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    bio?: true
    specialization?: true
    experienceYears?: true
    location?: true
    contributionScore?: true
    safetyScore?: true
    qualityScore?: true
    collaborationScore?: true
    professionalLevel?: true
    phoneNumber?: true
    emergencyContact?: true
    lastActiveProject?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    avatar?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    bio?: true
    specialization?: true
    experienceYears?: true
    location?: true
    contributionScore?: true
    safetyScore?: true
    qualityScore?: true
    collaborationScore?: true
    professionalLevel?: true
    certifications?: true
    skills?: true
    phoneNumber?: true
    emergencyContact?: true
    lastActiveProject?: true
    timezone?: true
    notificationPrefs?: true
    workingHours?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    avatar: string | null
    role: $Enums.UserRole
    isActive: boolean
    lastLoginAt: Date | null
    bio: string | null
    specialization: string | null
    experienceYears: number | null
    location: string | null
    contributionScore: number
    safetyScore: number
    qualityScore: number
    collaborationScore: number
    professionalLevel: string | null
    certifications: string[]
    skills: string[]
    phoneNumber: string | null
    emergencyContact: string | null
    lastActiveProject: string | null
    timezone: string
    notificationPrefs: JsonValue
    workingHours: JsonValue | null
    createdAt: Date
    updatedAt: Date
    organizationId: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    bio?: boolean
    specialization?: boolean
    experienceYears?: boolean
    location?: boolean
    contributionScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    collaborationScore?: boolean
    professionalLevel?: boolean
    certifications?: boolean
    skills?: boolean
    phoneNumber?: boolean
    emergencyContact?: boolean
    lastActiveProject?: boolean
    timezone?: boolean
    notificationPrefs?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    createdTasks?: boolean | User$createdTasksArgs<ExtArgs>
    projectMembers?: boolean | User$projectMembersArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    postComments?: boolean | User$postCommentsArgs<ExtArgs>
    postShares?: boolean | User$postSharesArgs<ExtArgs>
    mentions?: boolean | User$mentionsArgs<ExtArgs>
    mentionedBy?: boolean | User$mentionedByArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    submittedRFIs?: boolean | User$submittedRFIsArgs<ExtArgs>
    assignedRFIs?: boolean | User$assignedRFIsArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    badges?: boolean | User$badgesArgs<ExtArgs>
    xpTransactions?: boolean | User$xpTransactionsArgs<ExtArgs>
    reportedIncidents?: boolean | User$reportedIncidentsArgs<ExtArgs>
    assignedIncidents?: boolean | User$assignedIncidentsArgs<ExtArgs>
    verifiedResolutions?: boolean | User$verifiedResolutionsArgs<ExtArgs>
    approvalsGiven?: boolean | User$approvalsGivenArgs<ExtArgs>
    approvalsReceived?: boolean | User$approvalsReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    bio?: boolean
    specialization?: boolean
    experienceYears?: boolean
    location?: boolean
    contributionScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    collaborationScore?: boolean
    professionalLevel?: boolean
    certifications?: boolean
    skills?: boolean
    phoneNumber?: boolean
    emergencyContact?: boolean
    lastActiveProject?: boolean
    timezone?: boolean
    notificationPrefs?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    bio?: boolean
    specialization?: boolean
    experienceYears?: boolean
    location?: boolean
    contributionScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    collaborationScore?: boolean
    professionalLevel?: boolean
    certifications?: boolean
    skills?: boolean
    phoneNumber?: boolean
    emergencyContact?: boolean
    lastActiveProject?: boolean
    timezone?: boolean
    notificationPrefs?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    bio?: boolean
    specialization?: boolean
    experienceYears?: boolean
    location?: boolean
    contributionScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    collaborationScore?: boolean
    professionalLevel?: boolean
    certifications?: boolean
    skills?: boolean
    phoneNumber?: boolean
    emergencyContact?: boolean
    lastActiveProject?: boolean
    timezone?: boolean
    notificationPrefs?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "avatar" | "role" | "isActive" | "lastLoginAt" | "bio" | "specialization" | "experienceYears" | "location" | "contributionScore" | "safetyScore" | "qualityScore" | "collaborationScore" | "professionalLevel" | "certifications" | "skills" | "phoneNumber" | "emergencyContact" | "lastActiveProject" | "timezone" | "notificationPrefs" | "workingHours" | "createdAt" | "updatedAt" | "organizationId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    createdTasks?: boolean | User$createdTasksArgs<ExtArgs>
    projectMembers?: boolean | User$projectMembersArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    postComments?: boolean | User$postCommentsArgs<ExtArgs>
    postShares?: boolean | User$postSharesArgs<ExtArgs>
    mentions?: boolean | User$mentionsArgs<ExtArgs>
    mentionedBy?: boolean | User$mentionedByArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    submittedRFIs?: boolean | User$submittedRFIsArgs<ExtArgs>
    assignedRFIs?: boolean | User$assignedRFIsArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    badges?: boolean | User$badgesArgs<ExtArgs>
    xpTransactions?: boolean | User$xpTransactionsArgs<ExtArgs>
    reportedIncidents?: boolean | User$reportedIncidentsArgs<ExtArgs>
    assignedIncidents?: boolean | User$assignedIncidentsArgs<ExtArgs>
    verifiedResolutions?: boolean | User$verifiedResolutionsArgs<ExtArgs>
    approvalsGiven?: boolean | User$approvalsGivenArgs<ExtArgs>
    approvalsReceived?: boolean | User$approvalsReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[]
      createdTasks: Prisma.$TaskPayload<ExtArgs>[]
      projectMembers: Prisma.$ProjectMemberPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      postLikes: Prisma.$PostLikePayload<ExtArgs>[]
      postComments: Prisma.$PostCommentPayload<ExtArgs>[]
      postShares: Prisma.$PostSharePayload<ExtArgs>[]
      mentions: Prisma.$PostMentionPayload<ExtArgs>[]
      mentionedBy: Prisma.$PostMentionPayload<ExtArgs>[]
      following: Prisma.$UserFollowPayload<ExtArgs>[]
      followers: Prisma.$UserFollowPayload<ExtArgs>[]
      submittedRFIs: Prisma.$RFIPayload<ExtArgs>[]
      assignedRFIs: Prisma.$RFIPayload<ExtArgs>[]
      achievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      badges: Prisma.$UserBadgePayload<ExtArgs>[]
      xpTransactions: Prisma.$XPTransactionPayload<ExtArgs>[]
      reportedIncidents: Prisma.$SafetyIncidentPayload<ExtArgs>[]
      assignedIncidents: Prisma.$SafetyIncidentPayload<ExtArgs>[]
      verifiedResolutions: Prisma.$PostResolutionPayload<ExtArgs>[]
      approvalsGiven: Prisma.$ApprovalPayload<ExtArgs>[]
      approvalsReceived: Prisma.$ApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      avatar: string | null
      role: $Enums.UserRole
      isActive: boolean
      lastLoginAt: Date | null
      bio: string | null
      specialization: string | null
      experienceYears: number | null
      location: string | null
      contributionScore: number
      safetyScore: number
      qualityScore: number
      collaborationScore: number
      professionalLevel: string | null
      certifications: string[]
      skills: string[]
      phoneNumber: string | null
      emergencyContact: string | null
      lastActiveProject: string | null
      timezone: string
      notificationPrefs: Prisma.JsonValue
      workingHours: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      organizationId: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdTasks<T extends User$createdTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projectMembers<T extends User$projectMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$projectMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    postLikes<T extends User$postLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$postLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    postComments<T extends User$postCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$postCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    postShares<T extends User$postSharesArgs<ExtArgs> = {}>(args?: Subset<T, User$postSharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mentions<T extends User$mentionsArgs<ExtArgs> = {}>(args?: Subset<T, User$mentionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mentionedBy<T extends User$mentionedByArgs<ExtArgs> = {}>(args?: Subset<T, User$mentionedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submittedRFIs<T extends User$submittedRFIsArgs<ExtArgs> = {}>(args?: Subset<T, User$submittedRFIsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedRFIs<T extends User$assignedRFIsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedRFIsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    achievements<T extends User$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    badges<T extends User$badgesArgs<ExtArgs> = {}>(args?: Subset<T, User$badgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    xpTransactions<T extends User$xpTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$xpTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportedIncidents<T extends User$reportedIncidentsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportedIncidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedIncidents<T extends User$assignedIncidentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedIncidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    verifiedResolutions<T extends User$verifiedResolutionsArgs<ExtArgs> = {}>(args?: Subset<T, User$verifiedResolutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvalsGiven<T extends User$approvalsGivenArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalsGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvalsReceived<T extends User$approvalsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly bio: FieldRef<"User", 'String'>
    readonly specialization: FieldRef<"User", 'String'>
    readonly experienceYears: FieldRef<"User", 'Int'>
    readonly location: FieldRef<"User", 'String'>
    readonly contributionScore: FieldRef<"User", 'Int'>
    readonly safetyScore: FieldRef<"User", 'Int'>
    readonly qualityScore: FieldRef<"User", 'Int'>
    readonly collaborationScore: FieldRef<"User", 'Int'>
    readonly professionalLevel: FieldRef<"User", 'String'>
    readonly certifications: FieldRef<"User", 'String[]'>
    readonly skills: FieldRef<"User", 'String[]'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly emergencyContact: FieldRef<"User", 'String'>
    readonly lastActiveProject: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly notificationPrefs: FieldRef<"User", 'Json'>
    readonly workingHours: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly organizationId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.createdTasks
   */
  export type User$createdTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.projectMembers
   */
  export type User$projectMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.postLikes
   */
  export type User$postLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * User.postComments
   */
  export type User$postCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    where?: PostCommentWhereInput
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    cursor?: PostCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * User.postShares
   */
  export type User$postSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    where?: PostShareWhereInput
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    cursor?: PostShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostShareScalarFieldEnum | PostShareScalarFieldEnum[]
  }

  /**
   * User.mentions
   */
  export type User$mentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    where?: PostMentionWhereInput
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    cursor?: PostMentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * User.mentionedBy
   */
  export type User$mentionedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    where?: PostMentionWhereInput
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    cursor?: PostMentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    where?: UserFollowWhereInput
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    cursor?: UserFollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFollowScalarFieldEnum | UserFollowScalarFieldEnum[]
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    where?: UserFollowWhereInput
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    cursor?: UserFollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFollowScalarFieldEnum | UserFollowScalarFieldEnum[]
  }

  /**
   * User.submittedRFIs
   */
  export type User$submittedRFIsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    cursor?: RFIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * User.assignedRFIs
   */
  export type User$assignedRFIsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    cursor?: RFIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * User.achievements
   */
  export type User$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.badges
   */
  export type User$badgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.xpTransactions
   */
  export type User$xpTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    where?: XPTransactionWhereInput
    orderBy?: XPTransactionOrderByWithRelationInput | XPTransactionOrderByWithRelationInput[]
    cursor?: XPTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: XPTransactionScalarFieldEnum | XPTransactionScalarFieldEnum[]
  }

  /**
   * User.reportedIncidents
   */
  export type User$reportedIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    where?: SafetyIncidentWhereInput
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    cursor?: SafetyIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * User.assignedIncidents
   */
  export type User$assignedIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    where?: SafetyIncidentWhereInput
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    cursor?: SafetyIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * User.verifiedResolutions
   */
  export type User$verifiedResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    where?: PostResolutionWhereInput
    orderBy?: PostResolutionOrderByWithRelationInput | PostResolutionOrderByWithRelationInput[]
    cursor?: PostResolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostResolutionScalarFieldEnum | PostResolutionScalarFieldEnum[]
  }

  /**
   * User.approvalsGiven
   */
  export type User$approvalsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * User.approvalsReceived
   */
  export type User$approvalsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    budget: Decimal | null
    actualCost: Decimal | null
    progress: number | null
    collaborationScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    efficiencyScore: number | null
  }

  export type ProjectSumAggregateOutputType = {
    budget: Decimal | null
    actualCost: Decimal | null
    progress: number | null
    collaborationScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    efficiencyScore: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.ProjectStatus | null
    startDate: Date | null
    endDate: Date | null
    budget: Decimal | null
    actualCost: Decimal | null
    progress: number | null
    address: string | null
    bimModelUrl: string | null
    isPublic: boolean | null
    collaborationScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    efficiencyScore: number | null
    clientName: string | null
    contractNumber: string | null
    projectCode: string | null
    complianceStatus: $Enums.ComplianceStatus | null
    riskLevel: $Enums.RiskLevel | null
    clientApprovalRequired: boolean | null
    clientContactEmail: string | null
    clientContactName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.ProjectStatus | null
    startDate: Date | null
    endDate: Date | null
    budget: Decimal | null
    actualCost: Decimal | null
    progress: number | null
    address: string | null
    bimModelUrl: string | null
    isPublic: boolean | null
    collaborationScore: number | null
    safetyScore: number | null
    qualityScore: number | null
    efficiencyScore: number | null
    clientName: string | null
    contractNumber: string | null
    projectCode: string | null
    complianceStatus: $Enums.ComplianceStatus | null
    riskLevel: $Enums.RiskLevel | null
    clientApprovalRequired: boolean | null
    clientContactEmail: string | null
    clientContactName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    startDate: number
    endDate: number
    budget: number
    actualCost: number
    progress: number
    address: number
    coordinates: number
    bimModelUrl: number
    isPublic: number
    collaborationScore: number
    safetyScore: number
    qualityScore: number
    efficiencyScore: number
    clientName: number
    contractNumber: number
    projectCode: number
    regulatoryReqs: number
    complianceStatus: number
    riskLevel: number
    clientApprovalRequired: number
    clientContactEmail: number
    clientContactName: number
    createdAt: number
    updatedAt: number
    organizationId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    budget?: true
    actualCost?: true
    progress?: true
    collaborationScore?: true
    safetyScore?: true
    qualityScore?: true
    efficiencyScore?: true
  }

  export type ProjectSumAggregateInputType = {
    budget?: true
    actualCost?: true
    progress?: true
    collaborationScore?: true
    safetyScore?: true
    qualityScore?: true
    efficiencyScore?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    actualCost?: true
    progress?: true
    address?: true
    bimModelUrl?: true
    isPublic?: true
    collaborationScore?: true
    safetyScore?: true
    qualityScore?: true
    efficiencyScore?: true
    clientName?: true
    contractNumber?: true
    projectCode?: true
    complianceStatus?: true
    riskLevel?: true
    clientApprovalRequired?: true
    clientContactEmail?: true
    clientContactName?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    actualCost?: true
    progress?: true
    address?: true
    bimModelUrl?: true
    isPublic?: true
    collaborationScore?: true
    safetyScore?: true
    qualityScore?: true
    efficiencyScore?: true
    clientName?: true
    contractNumber?: true
    projectCode?: true
    complianceStatus?: true
    riskLevel?: true
    clientApprovalRequired?: true
    clientContactEmail?: true
    clientContactName?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    actualCost?: true
    progress?: true
    address?: true
    coordinates?: true
    bimModelUrl?: true
    isPublic?: true
    collaborationScore?: true
    safetyScore?: true
    qualityScore?: true
    efficiencyScore?: true
    clientName?: true
    contractNumber?: true
    projectCode?: true
    regulatoryReqs?: true
    complianceStatus?: true
    riskLevel?: true
    clientApprovalRequired?: true
    clientContactEmail?: true
    clientContactName?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: $Enums.ProjectStatus
    startDate: Date | null
    endDate: Date | null
    budget: Decimal | null
    actualCost: Decimal | null
    progress: number
    address: string | null
    coordinates: JsonValue | null
    bimModelUrl: string | null
    isPublic: boolean
    collaborationScore: number
    safetyScore: number
    qualityScore: number
    efficiencyScore: number
    clientName: string | null
    contractNumber: string | null
    projectCode: string | null
    regulatoryReqs: string[]
    complianceStatus: $Enums.ComplianceStatus
    riskLevel: $Enums.RiskLevel
    clientApprovalRequired: boolean
    clientContactEmail: string | null
    clientContactName: string | null
    createdAt: Date
    updatedAt: Date
    organizationId: string
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    actualCost?: boolean
    progress?: boolean
    address?: boolean
    coordinates?: boolean
    bimModelUrl?: boolean
    isPublic?: boolean
    collaborationScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    efficiencyScore?: boolean
    clientName?: boolean
    contractNumber?: boolean
    projectCode?: boolean
    regulatoryReqs?: boolean
    complianceStatus?: boolean
    riskLevel?: boolean
    clientApprovalRequired?: boolean
    clientContactEmail?: boolean
    clientContactName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    phases?: boolean | Project$phasesArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    activityLogs?: boolean | Project$activityLogsArgs<ExtArgs>
    posts?: boolean | Project$postsArgs<ExtArgs>
    rfis?: boolean | Project$rfisArgs<ExtArgs>
    safetyIncidents?: boolean | Project$safetyIncidentsArgs<ExtArgs>
    approvals?: boolean | Project$approvalsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    actualCost?: boolean
    progress?: boolean
    address?: boolean
    coordinates?: boolean
    bimModelUrl?: boolean
    isPublic?: boolean
    collaborationScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    efficiencyScore?: boolean
    clientName?: boolean
    contractNumber?: boolean
    projectCode?: boolean
    regulatoryReqs?: boolean
    complianceStatus?: boolean
    riskLevel?: boolean
    clientApprovalRequired?: boolean
    clientContactEmail?: boolean
    clientContactName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    actualCost?: boolean
    progress?: boolean
    address?: boolean
    coordinates?: boolean
    bimModelUrl?: boolean
    isPublic?: boolean
    collaborationScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    efficiencyScore?: boolean
    clientName?: boolean
    contractNumber?: boolean
    projectCode?: boolean
    regulatoryReqs?: boolean
    complianceStatus?: boolean
    riskLevel?: boolean
    clientApprovalRequired?: boolean
    clientContactEmail?: boolean
    clientContactName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    actualCost?: boolean
    progress?: boolean
    address?: boolean
    coordinates?: boolean
    bimModelUrl?: boolean
    isPublic?: boolean
    collaborationScore?: boolean
    safetyScore?: boolean
    qualityScore?: boolean
    efficiencyScore?: boolean
    clientName?: boolean
    contractNumber?: boolean
    projectCode?: boolean
    regulatoryReqs?: boolean
    complianceStatus?: boolean
    riskLevel?: boolean
    clientApprovalRequired?: boolean
    clientContactEmail?: boolean
    clientContactName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "status" | "startDate" | "endDate" | "budget" | "actualCost" | "progress" | "address" | "coordinates" | "bimModelUrl" | "isPublic" | "collaborationScore" | "safetyScore" | "qualityScore" | "efficiencyScore" | "clientName" | "contractNumber" | "projectCode" | "regulatoryReqs" | "complianceStatus" | "riskLevel" | "clientApprovalRequired" | "clientContactEmail" | "clientContactName" | "createdAt" | "updatedAt" | "organizationId", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    phases?: boolean | Project$phasesArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    activityLogs?: boolean | Project$activityLogsArgs<ExtArgs>
    posts?: boolean | Project$postsArgs<ExtArgs>
    rfis?: boolean | Project$rfisArgs<ExtArgs>
    safetyIncidents?: boolean | Project$safetyIncidentsArgs<ExtArgs>
    approvals?: boolean | Project$approvalsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      phases: Prisma.$ProjectPhasePayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      members: Prisma.$ProjectMemberPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      rfis: Prisma.$RFIPayload<ExtArgs>[]
      safetyIncidents: Prisma.$SafetyIncidentPayload<ExtArgs>[]
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: $Enums.ProjectStatus
      startDate: Date | null
      endDate: Date | null
      budget: Prisma.Decimal | null
      actualCost: Prisma.Decimal | null
      progress: number
      address: string | null
      coordinates: Prisma.JsonValue | null
      bimModelUrl: string | null
      isPublic: boolean
      collaborationScore: number
      safetyScore: number
      qualityScore: number
      efficiencyScore: number
      clientName: string | null
      contractNumber: string | null
      projectCode: string | null
      regulatoryReqs: string[]
      complianceStatus: $Enums.ComplianceStatus
      riskLevel: $Enums.RiskLevel
      clientApprovalRequired: boolean
      clientContactEmail: string | null
      clientContactName: string | null
      createdAt: Date
      updatedAt: Date
      organizationId: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    phases<T extends Project$phasesArgs<ExtArgs> = {}>(args?: Subset<T, Project$phasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends Project$membersArgs<ExtArgs> = {}>(args?: Subset<T, Project$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Project$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Project$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends Project$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, Project$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends Project$postsArgs<ExtArgs> = {}>(args?: Subset<T, Project$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rfis<T extends Project$rfisArgs<ExtArgs> = {}>(args?: Subset<T, Project$rfisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    safetyIncidents<T extends Project$safetyIncidentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$safetyIncidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvals<T extends Project$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Project$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly endDate: FieldRef<"Project", 'DateTime'>
    readonly budget: FieldRef<"Project", 'Decimal'>
    readonly actualCost: FieldRef<"Project", 'Decimal'>
    readonly progress: FieldRef<"Project", 'Float'>
    readonly address: FieldRef<"Project", 'String'>
    readonly coordinates: FieldRef<"Project", 'Json'>
    readonly bimModelUrl: FieldRef<"Project", 'String'>
    readonly isPublic: FieldRef<"Project", 'Boolean'>
    readonly collaborationScore: FieldRef<"Project", 'Int'>
    readonly safetyScore: FieldRef<"Project", 'Int'>
    readonly qualityScore: FieldRef<"Project", 'Int'>
    readonly efficiencyScore: FieldRef<"Project", 'Int'>
    readonly clientName: FieldRef<"Project", 'String'>
    readonly contractNumber: FieldRef<"Project", 'String'>
    readonly projectCode: FieldRef<"Project", 'String'>
    readonly regulatoryReqs: FieldRef<"Project", 'String[]'>
    readonly complianceStatus: FieldRef<"Project", 'ComplianceStatus'>
    readonly riskLevel: FieldRef<"Project", 'RiskLevel'>
    readonly clientApprovalRequired: FieldRef<"Project", 'Boolean'>
    readonly clientContactEmail: FieldRef<"Project", 'String'>
    readonly clientContactName: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly organizationId: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.phases
   */
  export type Project$phasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    where?: ProjectPhaseWhereInput
    orderBy?: ProjectPhaseOrderByWithRelationInput | ProjectPhaseOrderByWithRelationInput[]
    cursor?: ProjectPhaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectPhaseScalarFieldEnum | ProjectPhaseScalarFieldEnum[]
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.members
   */
  export type Project$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * Project.documents
   */
  export type Project$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Project.comments
   */
  export type Project$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Project.activityLogs
   */
  export type Project$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * Project.posts
   */
  export type Project$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Project.rfis
   */
  export type Project$rfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    cursor?: RFIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * Project.safetyIncidents
   */
  export type Project$safetyIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    where?: SafetyIncidentWhereInput
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    cursor?: SafetyIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * Project.approvals
   */
  export type Project$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ProjectPhase
   */

  export type AggregateProjectPhase = {
    _count: ProjectPhaseCountAggregateOutputType | null
    _avg: ProjectPhaseAvgAggregateOutputType | null
    _sum: ProjectPhaseSumAggregateOutputType | null
    _min: ProjectPhaseMinAggregateOutputType | null
    _max: ProjectPhaseMaxAggregateOutputType | null
  }

  export type ProjectPhaseAvgAggregateOutputType = {
    progress: number | null
    order: number | null
    budgetAllocated: Decimal | null
    actualCost: Decimal | null
  }

  export type ProjectPhaseSumAggregateOutputType = {
    progress: number | null
    order: number | null
    budgetAllocated: Decimal | null
    actualCost: Decimal | null
  }

  export type ProjectPhaseMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.PhaseStatus | null
    startDate: Date | null
    endDate: Date | null
    progress: number | null
    order: number | null
    budgetAllocated: Decimal | null
    actualCost: Decimal | null
    criticalPath: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ProjectPhaseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.PhaseStatus | null
    startDate: Date | null
    endDate: Date | null
    progress: number | null
    order: number | null
    budgetAllocated: Decimal | null
    actualCost: Decimal | null
    criticalPath: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ProjectPhaseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    startDate: number
    endDate: number
    progress: number
    order: number
    budgetAllocated: number
    actualCost: number
    milestones: number
    dependencies: number
    criticalPath: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type ProjectPhaseAvgAggregateInputType = {
    progress?: true
    order?: true
    budgetAllocated?: true
    actualCost?: true
  }

  export type ProjectPhaseSumAggregateInputType = {
    progress?: true
    order?: true
    budgetAllocated?: true
    actualCost?: true
  }

  export type ProjectPhaseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    progress?: true
    order?: true
    budgetAllocated?: true
    actualCost?: true
    criticalPath?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ProjectPhaseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    progress?: true
    order?: true
    budgetAllocated?: true
    actualCost?: true
    criticalPath?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ProjectPhaseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    progress?: true
    order?: true
    budgetAllocated?: true
    actualCost?: true
    milestones?: true
    dependencies?: true
    criticalPath?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type ProjectPhaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectPhase to aggregate.
     */
    where?: ProjectPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectPhases to fetch.
     */
    orderBy?: ProjectPhaseOrderByWithRelationInput | ProjectPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectPhases
    **/
    _count?: true | ProjectPhaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectPhaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectPhaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectPhaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectPhaseMaxAggregateInputType
  }

  export type GetProjectPhaseAggregateType<T extends ProjectPhaseAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectPhase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectPhase[P]>
      : GetScalarType<T[P], AggregateProjectPhase[P]>
  }




  export type ProjectPhaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectPhaseWhereInput
    orderBy?: ProjectPhaseOrderByWithAggregationInput | ProjectPhaseOrderByWithAggregationInput[]
    by: ProjectPhaseScalarFieldEnum[] | ProjectPhaseScalarFieldEnum
    having?: ProjectPhaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectPhaseCountAggregateInputType | true
    _avg?: ProjectPhaseAvgAggregateInputType
    _sum?: ProjectPhaseSumAggregateInputType
    _min?: ProjectPhaseMinAggregateInputType
    _max?: ProjectPhaseMaxAggregateInputType
  }

  export type ProjectPhaseGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: $Enums.PhaseStatus
    startDate: Date | null
    endDate: Date | null
    progress: number
    order: number
    budgetAllocated: Decimal | null
    actualCost: Decimal | null
    milestones: JsonValue
    dependencies: string[]
    criticalPath: boolean
    createdAt: Date
    updatedAt: Date
    projectId: string
    _count: ProjectPhaseCountAggregateOutputType | null
    _avg: ProjectPhaseAvgAggregateOutputType | null
    _sum: ProjectPhaseSumAggregateOutputType | null
    _min: ProjectPhaseMinAggregateOutputType | null
    _max: ProjectPhaseMaxAggregateOutputType | null
  }

  type GetProjectPhaseGroupByPayload<T extends ProjectPhaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectPhaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectPhaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectPhaseGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectPhaseGroupByOutputType[P]>
        }
      >
    >


  export type ProjectPhaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    progress?: boolean
    order?: boolean
    budgetAllocated?: boolean
    actualCost?: boolean
    milestones?: boolean
    dependencies?: boolean
    criticalPath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | ProjectPhase$tasksArgs<ExtArgs>
    posts?: boolean | ProjectPhase$postsArgs<ExtArgs>
    _count?: boolean | ProjectPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectPhase"]>

  export type ProjectPhaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    progress?: boolean
    order?: boolean
    budgetAllocated?: boolean
    actualCost?: boolean
    milestones?: boolean
    dependencies?: boolean
    criticalPath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectPhase"]>

  export type ProjectPhaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    progress?: boolean
    order?: boolean
    budgetAllocated?: boolean
    actualCost?: boolean
    milestones?: boolean
    dependencies?: boolean
    criticalPath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectPhase"]>

  export type ProjectPhaseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    progress?: boolean
    order?: boolean
    budgetAllocated?: boolean
    actualCost?: boolean
    milestones?: boolean
    dependencies?: boolean
    criticalPath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }

  export type ProjectPhaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "status" | "startDate" | "endDate" | "progress" | "order" | "budgetAllocated" | "actualCost" | "milestones" | "dependencies" | "criticalPath" | "createdAt" | "updatedAt" | "projectId", ExtArgs["result"]["projectPhase"]>
  export type ProjectPhaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | ProjectPhase$tasksArgs<ExtArgs>
    posts?: boolean | ProjectPhase$postsArgs<ExtArgs>
    _count?: boolean | ProjectPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectPhaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectPhaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectPhasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectPhase"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: $Enums.PhaseStatus
      startDate: Date | null
      endDate: Date | null
      progress: number
      order: number
      budgetAllocated: Prisma.Decimal | null
      actualCost: Prisma.Decimal | null
      milestones: Prisma.JsonValue
      dependencies: string[]
      criticalPath: boolean
      createdAt: Date
      updatedAt: Date
      projectId: string
    }, ExtArgs["result"]["projectPhase"]>
    composites: {}
  }

  type ProjectPhaseGetPayload<S extends boolean | null | undefined | ProjectPhaseDefaultArgs> = $Result.GetResult<Prisma.$ProjectPhasePayload, S>

  type ProjectPhaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectPhaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectPhaseCountAggregateInputType | true
    }

  export interface ProjectPhaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectPhase'], meta: { name: 'ProjectPhase' } }
    /**
     * Find zero or one ProjectPhase that matches the filter.
     * @param {ProjectPhaseFindUniqueArgs} args - Arguments to find a ProjectPhase
     * @example
     * // Get one ProjectPhase
     * const projectPhase = await prisma.projectPhase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectPhaseFindUniqueArgs>(args: SelectSubset<T, ProjectPhaseFindUniqueArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectPhase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectPhaseFindUniqueOrThrowArgs} args - Arguments to find a ProjectPhase
     * @example
     * // Get one ProjectPhase
     * const projectPhase = await prisma.projectPhase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectPhaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectPhaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectPhase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseFindFirstArgs} args - Arguments to find a ProjectPhase
     * @example
     * // Get one ProjectPhase
     * const projectPhase = await prisma.projectPhase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectPhaseFindFirstArgs>(args?: SelectSubset<T, ProjectPhaseFindFirstArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectPhase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseFindFirstOrThrowArgs} args - Arguments to find a ProjectPhase
     * @example
     * // Get one ProjectPhase
     * const projectPhase = await prisma.projectPhase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectPhaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectPhaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectPhases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectPhases
     * const projectPhases = await prisma.projectPhase.findMany()
     * 
     * // Get first 10 ProjectPhases
     * const projectPhases = await prisma.projectPhase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectPhaseWithIdOnly = await prisma.projectPhase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectPhaseFindManyArgs>(args?: SelectSubset<T, ProjectPhaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectPhase.
     * @param {ProjectPhaseCreateArgs} args - Arguments to create a ProjectPhase.
     * @example
     * // Create one ProjectPhase
     * const ProjectPhase = await prisma.projectPhase.create({
     *   data: {
     *     // ... data to create a ProjectPhase
     *   }
     * })
     * 
     */
    create<T extends ProjectPhaseCreateArgs>(args: SelectSubset<T, ProjectPhaseCreateArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectPhases.
     * @param {ProjectPhaseCreateManyArgs} args - Arguments to create many ProjectPhases.
     * @example
     * // Create many ProjectPhases
     * const projectPhase = await prisma.projectPhase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectPhaseCreateManyArgs>(args?: SelectSubset<T, ProjectPhaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectPhases and returns the data saved in the database.
     * @param {ProjectPhaseCreateManyAndReturnArgs} args - Arguments to create many ProjectPhases.
     * @example
     * // Create many ProjectPhases
     * const projectPhase = await prisma.projectPhase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectPhases and only return the `id`
     * const projectPhaseWithIdOnly = await prisma.projectPhase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectPhaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectPhaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectPhase.
     * @param {ProjectPhaseDeleteArgs} args - Arguments to delete one ProjectPhase.
     * @example
     * // Delete one ProjectPhase
     * const ProjectPhase = await prisma.projectPhase.delete({
     *   where: {
     *     // ... filter to delete one ProjectPhase
     *   }
     * })
     * 
     */
    delete<T extends ProjectPhaseDeleteArgs>(args: SelectSubset<T, ProjectPhaseDeleteArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectPhase.
     * @param {ProjectPhaseUpdateArgs} args - Arguments to update one ProjectPhase.
     * @example
     * // Update one ProjectPhase
     * const projectPhase = await prisma.projectPhase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectPhaseUpdateArgs>(args: SelectSubset<T, ProjectPhaseUpdateArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectPhases.
     * @param {ProjectPhaseDeleteManyArgs} args - Arguments to filter ProjectPhases to delete.
     * @example
     * // Delete a few ProjectPhases
     * const { count } = await prisma.projectPhase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectPhaseDeleteManyArgs>(args?: SelectSubset<T, ProjectPhaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectPhases
     * const projectPhase = await prisma.projectPhase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectPhaseUpdateManyArgs>(args: SelectSubset<T, ProjectPhaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectPhases and returns the data updated in the database.
     * @param {ProjectPhaseUpdateManyAndReturnArgs} args - Arguments to update many ProjectPhases.
     * @example
     * // Update many ProjectPhases
     * const projectPhase = await prisma.projectPhase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectPhases and only return the `id`
     * const projectPhaseWithIdOnly = await prisma.projectPhase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectPhaseUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectPhaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectPhase.
     * @param {ProjectPhaseUpsertArgs} args - Arguments to update or create a ProjectPhase.
     * @example
     * // Update or create a ProjectPhase
     * const projectPhase = await prisma.projectPhase.upsert({
     *   create: {
     *     // ... data to create a ProjectPhase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectPhase we want to update
     *   }
     * })
     */
    upsert<T extends ProjectPhaseUpsertArgs>(args: SelectSubset<T, ProjectPhaseUpsertArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseCountArgs} args - Arguments to filter ProjectPhases to count.
     * @example
     * // Count the number of ProjectPhases
     * const count = await prisma.projectPhase.count({
     *   where: {
     *     // ... the filter for the ProjectPhases we want to count
     *   }
     * })
    **/
    count<T extends ProjectPhaseCountArgs>(
      args?: Subset<T, ProjectPhaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectPhaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectPhaseAggregateArgs>(args: Subset<T, ProjectPhaseAggregateArgs>): Prisma.PrismaPromise<GetProjectPhaseAggregateType<T>>

    /**
     * Group by ProjectPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectPhaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectPhaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectPhaseGroupByArgs['orderBy'] }
        : { orderBy?: ProjectPhaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectPhaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectPhaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectPhase model
   */
  readonly fields: ProjectPhaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectPhase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectPhaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends ProjectPhase$tasksArgs<ExtArgs> = {}>(args?: Subset<T, ProjectPhase$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends ProjectPhase$postsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectPhase$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectPhase model
   */
  interface ProjectPhaseFieldRefs {
    readonly id: FieldRef<"ProjectPhase", 'String'>
    readonly name: FieldRef<"ProjectPhase", 'String'>
    readonly description: FieldRef<"ProjectPhase", 'String'>
    readonly status: FieldRef<"ProjectPhase", 'PhaseStatus'>
    readonly startDate: FieldRef<"ProjectPhase", 'DateTime'>
    readonly endDate: FieldRef<"ProjectPhase", 'DateTime'>
    readonly progress: FieldRef<"ProjectPhase", 'Float'>
    readonly order: FieldRef<"ProjectPhase", 'Int'>
    readonly budgetAllocated: FieldRef<"ProjectPhase", 'Decimal'>
    readonly actualCost: FieldRef<"ProjectPhase", 'Decimal'>
    readonly milestones: FieldRef<"ProjectPhase", 'Json'>
    readonly dependencies: FieldRef<"ProjectPhase", 'String[]'>
    readonly criticalPath: FieldRef<"ProjectPhase", 'Boolean'>
    readonly createdAt: FieldRef<"ProjectPhase", 'DateTime'>
    readonly updatedAt: FieldRef<"ProjectPhase", 'DateTime'>
    readonly projectId: FieldRef<"ProjectPhase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectPhase findUnique
   */
  export type ProjectPhaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ProjectPhase to fetch.
     */
    where: ProjectPhaseWhereUniqueInput
  }

  /**
   * ProjectPhase findUniqueOrThrow
   */
  export type ProjectPhaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ProjectPhase to fetch.
     */
    where: ProjectPhaseWhereUniqueInput
  }

  /**
   * ProjectPhase findFirst
   */
  export type ProjectPhaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ProjectPhase to fetch.
     */
    where?: ProjectPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectPhases to fetch.
     */
    orderBy?: ProjectPhaseOrderByWithRelationInput | ProjectPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectPhases.
     */
    cursor?: ProjectPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectPhases.
     */
    distinct?: ProjectPhaseScalarFieldEnum | ProjectPhaseScalarFieldEnum[]
  }

  /**
   * ProjectPhase findFirstOrThrow
   */
  export type ProjectPhaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ProjectPhase to fetch.
     */
    where?: ProjectPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectPhases to fetch.
     */
    orderBy?: ProjectPhaseOrderByWithRelationInput | ProjectPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectPhases.
     */
    cursor?: ProjectPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectPhases.
     */
    distinct?: ProjectPhaseScalarFieldEnum | ProjectPhaseScalarFieldEnum[]
  }

  /**
   * ProjectPhase findMany
   */
  export type ProjectPhaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ProjectPhases to fetch.
     */
    where?: ProjectPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectPhases to fetch.
     */
    orderBy?: ProjectPhaseOrderByWithRelationInput | ProjectPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectPhases.
     */
    cursor?: ProjectPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectPhases.
     */
    skip?: number
    distinct?: ProjectPhaseScalarFieldEnum | ProjectPhaseScalarFieldEnum[]
  }

  /**
   * ProjectPhase create
   */
  export type ProjectPhaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectPhase.
     */
    data: XOR<ProjectPhaseCreateInput, ProjectPhaseUncheckedCreateInput>
  }

  /**
   * ProjectPhase createMany
   */
  export type ProjectPhaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectPhases.
     */
    data: ProjectPhaseCreateManyInput | ProjectPhaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectPhase createManyAndReturn
   */
  export type ProjectPhaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectPhases.
     */
    data: ProjectPhaseCreateManyInput | ProjectPhaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectPhase update
   */
  export type ProjectPhaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectPhase.
     */
    data: XOR<ProjectPhaseUpdateInput, ProjectPhaseUncheckedUpdateInput>
    /**
     * Choose, which ProjectPhase to update.
     */
    where: ProjectPhaseWhereUniqueInput
  }

  /**
   * ProjectPhase updateMany
   */
  export type ProjectPhaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectPhases.
     */
    data: XOR<ProjectPhaseUpdateManyMutationInput, ProjectPhaseUncheckedUpdateManyInput>
    /**
     * Filter which ProjectPhases to update
     */
    where?: ProjectPhaseWhereInput
    /**
     * Limit how many ProjectPhases to update.
     */
    limit?: number
  }

  /**
   * ProjectPhase updateManyAndReturn
   */
  export type ProjectPhaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * The data used to update ProjectPhases.
     */
    data: XOR<ProjectPhaseUpdateManyMutationInput, ProjectPhaseUncheckedUpdateManyInput>
    /**
     * Filter which ProjectPhases to update
     */
    where?: ProjectPhaseWhereInput
    /**
     * Limit how many ProjectPhases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectPhase upsert
   */
  export type ProjectPhaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectPhase to update in case it exists.
     */
    where: ProjectPhaseWhereUniqueInput
    /**
     * In case the ProjectPhase found by the `where` argument doesn't exist, create a new ProjectPhase with this data.
     */
    create: XOR<ProjectPhaseCreateInput, ProjectPhaseUncheckedCreateInput>
    /**
     * In case the ProjectPhase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectPhaseUpdateInput, ProjectPhaseUncheckedUpdateInput>
  }

  /**
   * ProjectPhase delete
   */
  export type ProjectPhaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    /**
     * Filter which ProjectPhase to delete.
     */
    where: ProjectPhaseWhereUniqueInput
  }

  /**
   * ProjectPhase deleteMany
   */
  export type ProjectPhaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectPhases to delete
     */
    where?: ProjectPhaseWhereInput
    /**
     * Limit how many ProjectPhases to delete.
     */
    limit?: number
  }

  /**
   * ProjectPhase.tasks
   */
  export type ProjectPhase$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * ProjectPhase.posts
   */
  export type ProjectPhase$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * ProjectPhase without action
   */
  export type ProjectPhaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
  }


  /**
   * Model ProjectMember
   */

  export type AggregateProjectMember = {
    _count: ProjectMemberCountAggregateOutputType | null
    _avg: ProjectMemberAvgAggregateOutputType | null
    _sum: ProjectMemberSumAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  export type ProjectMemberAvgAggregateOutputType = {
    hourlyRate: Decimal | null
    maxHoursPerWeek: number | null
  }

  export type ProjectMemberSumAggregateOutputType = {
    hourlyRate: Decimal | null
    maxHoursPerWeek: number | null
  }

  export type ProjectMemberMinAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectRole | null
    joinedAt: Date | null
    hourlyRate: Decimal | null
    maxHoursPerWeek: number | null
    accessLevel: $Enums.AccessLevel | null
    isLead: boolean | null
    department: string | null
    costCenter: string | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberMaxAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectRole | null
    joinedAt: Date | null
    hourlyRate: Decimal | null
    maxHoursPerWeek: number | null
    accessLevel: $Enums.AccessLevel | null
    isLead: boolean | null
    department: string | null
    costCenter: string | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberCountAggregateOutputType = {
    id: number
    role: number
    joinedAt: number
    hourlyRate: number
    maxHoursPerWeek: number
    accessLevel: number
    isLead: number
    department: number
    costCenter: number
    userId: number
    projectId: number
    _all: number
  }


  export type ProjectMemberAvgAggregateInputType = {
    hourlyRate?: true
    maxHoursPerWeek?: true
  }

  export type ProjectMemberSumAggregateInputType = {
    hourlyRate?: true
    maxHoursPerWeek?: true
  }

  export type ProjectMemberMinAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    hourlyRate?: true
    maxHoursPerWeek?: true
    accessLevel?: true
    isLead?: true
    department?: true
    costCenter?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberMaxAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    hourlyRate?: true
    maxHoursPerWeek?: true
    accessLevel?: true
    isLead?: true
    department?: true
    costCenter?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberCountAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    hourlyRate?: true
    maxHoursPerWeek?: true
    accessLevel?: true
    isLead?: true
    department?: true
    costCenter?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ProjectMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMember to aggregate.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectMembers
    **/
    _count?: true | ProjectMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type GetProjectMemberAggregateType<T extends ProjectMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectMember[P]>
      : GetScalarType<T[P], AggregateProjectMember[P]>
  }




  export type ProjectMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithAggregationInput | ProjectMemberOrderByWithAggregationInput[]
    by: ProjectMemberScalarFieldEnum[] | ProjectMemberScalarFieldEnum
    having?: ProjectMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectMemberCountAggregateInputType | true
    _avg?: ProjectMemberAvgAggregateInputType
    _sum?: ProjectMemberSumAggregateInputType
    _min?: ProjectMemberMinAggregateInputType
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type ProjectMemberGroupByOutputType = {
    id: string
    role: $Enums.ProjectRole
    joinedAt: Date
    hourlyRate: Decimal | null
    maxHoursPerWeek: number | null
    accessLevel: $Enums.AccessLevel
    isLead: boolean
    department: string | null
    costCenter: string | null
    userId: string
    projectId: string
    _count: ProjectMemberCountAggregateOutputType | null
    _avg: ProjectMemberAvgAggregateOutputType | null
    _sum: ProjectMemberSumAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  type GetProjectMemberGroupByPayload<T extends ProjectMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
        }
      >
    >


  export type ProjectMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    hourlyRate?: boolean
    maxHoursPerWeek?: boolean
    accessLevel?: boolean
    isLead?: boolean
    department?: boolean
    costCenter?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    hourlyRate?: boolean
    maxHoursPerWeek?: boolean
    accessLevel?: boolean
    isLead?: boolean
    department?: boolean
    costCenter?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    hourlyRate?: boolean
    maxHoursPerWeek?: boolean
    accessLevel?: boolean
    isLead?: boolean
    department?: boolean
    costCenter?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectScalar = {
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    hourlyRate?: boolean
    maxHoursPerWeek?: boolean
    accessLevel?: boolean
    isLead?: boolean
    department?: boolean
    costCenter?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ProjectMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "joinedAt" | "hourlyRate" | "maxHoursPerWeek" | "accessLevel" | "isLead" | "department" | "costCenter" | "userId" | "projectId", ExtArgs["result"]["projectMember"]>
  export type ProjectMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.ProjectRole
      joinedAt: Date
      hourlyRate: Prisma.Decimal | null
      maxHoursPerWeek: number | null
      accessLevel: $Enums.AccessLevel
      isLead: boolean
      department: string | null
      costCenter: string | null
      userId: string
      projectId: string
    }, ExtArgs["result"]["projectMember"]>
    composites: {}
  }

  type ProjectMemberGetPayload<S extends boolean | null | undefined | ProjectMemberDefaultArgs> = $Result.GetResult<Prisma.$ProjectMemberPayload, S>

  type ProjectMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectMemberCountAggregateInputType | true
    }

  export interface ProjectMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectMember'], meta: { name: 'ProjectMember' } }
    /**
     * Find zero or one ProjectMember that matches the filter.
     * @param {ProjectMemberFindUniqueArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectMemberFindUniqueArgs>(args: SelectSubset<T, ProjectMemberFindUniqueArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectMemberFindUniqueOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectMemberFindFirstArgs>(args?: SelectSubset<T, ProjectMemberFindFirstArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany()
     * 
     * // Get first 10 ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectMemberFindManyArgs>(args?: SelectSubset<T, ProjectMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectMember.
     * @param {ProjectMemberCreateArgs} args - Arguments to create a ProjectMember.
     * @example
     * // Create one ProjectMember
     * const ProjectMember = await prisma.projectMember.create({
     *   data: {
     *     // ... data to create a ProjectMember
     *   }
     * })
     * 
     */
    create<T extends ProjectMemberCreateArgs>(args: SelectSubset<T, ProjectMemberCreateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectMembers.
     * @param {ProjectMemberCreateManyArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectMemberCreateManyArgs>(args?: SelectSubset<T, ProjectMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectMembers and returns the data saved in the database.
     * @param {ProjectMemberCreateManyAndReturnArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectMembers and only return the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectMember.
     * @param {ProjectMemberDeleteArgs} args - Arguments to delete one ProjectMember.
     * @example
     * // Delete one ProjectMember
     * const ProjectMember = await prisma.projectMember.delete({
     *   where: {
     *     // ... filter to delete one ProjectMember
     *   }
     * })
     * 
     */
    delete<T extends ProjectMemberDeleteArgs>(args: SelectSubset<T, ProjectMemberDeleteArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectMember.
     * @param {ProjectMemberUpdateArgs} args - Arguments to update one ProjectMember.
     * @example
     * // Update one ProjectMember
     * const projectMember = await prisma.projectMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectMemberUpdateArgs>(args: SelectSubset<T, ProjectMemberUpdateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectMembers.
     * @param {ProjectMemberDeleteManyArgs} args - Arguments to filter ProjectMembers to delete.
     * @example
     * // Delete a few ProjectMembers
     * const { count } = await prisma.projectMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectMemberDeleteManyArgs>(args?: SelectSubset<T, ProjectMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectMembers
     * const projectMember = await prisma.projectMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectMemberUpdateManyArgs>(args: SelectSubset<T, ProjectMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMembers and returns the data updated in the database.
     * @param {ProjectMemberUpdateManyAndReturnArgs} args - Arguments to update many ProjectMembers.
     * @example
     * // Update many ProjectMembers
     * const projectMember = await prisma.projectMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectMembers and only return the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectMember.
     * @param {ProjectMemberUpsertArgs} args - Arguments to update or create a ProjectMember.
     * @example
     * // Update or create a ProjectMember
     * const projectMember = await prisma.projectMember.upsert({
     *   create: {
     *     // ... data to create a ProjectMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectMember we want to update
     *   }
     * })
     */
    upsert<T extends ProjectMemberUpsertArgs>(args: SelectSubset<T, ProjectMemberUpsertArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberCountArgs} args - Arguments to filter ProjectMembers to count.
     * @example
     * // Count the number of ProjectMembers
     * const count = await prisma.projectMember.count({
     *   where: {
     *     // ... the filter for the ProjectMembers we want to count
     *   }
     * })
    **/
    count<T extends ProjectMemberCountArgs>(
      args?: Subset<T, ProjectMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectMemberAggregateArgs>(args: Subset<T, ProjectMemberAggregateArgs>): Prisma.PrismaPromise<GetProjectMemberAggregateType<T>>

    /**
     * Group by ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectMemberGroupByArgs['orderBy'] }
        : { orderBy?: ProjectMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectMember model
   */
  readonly fields: ProjectMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectMember model
   */
  interface ProjectMemberFieldRefs {
    readonly id: FieldRef<"ProjectMember", 'String'>
    readonly role: FieldRef<"ProjectMember", 'ProjectRole'>
    readonly joinedAt: FieldRef<"ProjectMember", 'DateTime'>
    readonly hourlyRate: FieldRef<"ProjectMember", 'Decimal'>
    readonly maxHoursPerWeek: FieldRef<"ProjectMember", 'Int'>
    readonly accessLevel: FieldRef<"ProjectMember", 'AccessLevel'>
    readonly isLead: FieldRef<"ProjectMember", 'Boolean'>
    readonly department: FieldRef<"ProjectMember", 'String'>
    readonly costCenter: FieldRef<"ProjectMember", 'String'>
    readonly userId: FieldRef<"ProjectMember", 'String'>
    readonly projectId: FieldRef<"ProjectMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectMember findUnique
   */
  export type ProjectMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findUniqueOrThrow
   */
  export type ProjectMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findFirst
   */
  export type ProjectMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findFirstOrThrow
   */
  export type ProjectMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findMany
   */
  export type ProjectMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMembers to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember create
   */
  export type ProjectMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectMember.
     */
    data: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
  }

  /**
   * ProjectMember createMany
   */
  export type ProjectMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectMember createManyAndReturn
   */
  export type ProjectMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMember update
   */
  export type ProjectMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectMember.
     */
    data: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
    /**
     * Choose, which ProjectMember to update.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember updateMany
   */
  export type ProjectMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectMembers.
     */
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMembers to update
     */
    where?: ProjectMemberWhereInput
    /**
     * Limit how many ProjectMembers to update.
     */
    limit?: number
  }

  /**
   * ProjectMember updateManyAndReturn
   */
  export type ProjectMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * The data used to update ProjectMembers.
     */
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMembers to update
     */
    where?: ProjectMemberWhereInput
    /**
     * Limit how many ProjectMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMember upsert
   */
  export type ProjectMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectMember to update in case it exists.
     */
    where: ProjectMemberWhereUniqueInput
    /**
     * In case the ProjectMember found by the `where` argument doesn't exist, create a new ProjectMember with this data.
     */
    create: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
    /**
     * In case the ProjectMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
  }

  /**
   * ProjectMember delete
   */
  export type ProjectMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter which ProjectMember to delete.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember deleteMany
   */
  export type ProjectMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMembers to delete
     */
    where?: ProjectMemberWhereInput
    /**
     * Limit how many ProjectMembers to delete.
     */
    limit?: number
  }

  /**
   * ProjectMember without action
   */
  export type ProjectMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectMember
     */
    omit?: ProjectMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
  }

  export type TaskSumAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.TaskPriority | null
    startDate: Date | null
    dueDate: Date | null
    completedAt: Date | null
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    isBlocked: boolean | null
    blockedReason: string | null
    blockedSince: Date | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    requiresApproval: boolean | null
    isClientVisible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    phaseId: string | null
    assigneeId: string | null
    createdById: string | null
    parentTaskId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.TaskPriority | null
    startDate: Date | null
    dueDate: Date | null
    completedAt: Date | null
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    isBlocked: boolean | null
    blockedReason: string | null
    blockedSince: Date | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    requiresApproval: boolean | null
    isClientVisible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    phaseId: string | null
    assigneeId: string | null
    createdById: string | null
    parentTaskId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    startDate: number
    dueDate: number
    completedAt: number
    estimatedHours: number
    actualHours: number
    progress: number
    tags: number
    isBlocked: number
    blockedReason: number
    blockedSince: number
    estimatedCost: number
    actualCost: number
    requiresApproval: number
    isClientVisible: number
    createdAt: number
    updatedAt: number
    projectId: number
    phaseId: number
    assigneeId: number
    createdById: number
    parentTaskId: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
    progress?: true
    estimatedCost?: true
    actualCost?: true
  }

  export type TaskSumAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
    progress?: true
    estimatedCost?: true
    actualCost?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    dueDate?: true
    completedAt?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    isBlocked?: true
    blockedReason?: true
    blockedSince?: true
    estimatedCost?: true
    actualCost?: true
    requiresApproval?: true
    isClientVisible?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    phaseId?: true
    assigneeId?: true
    createdById?: true
    parentTaskId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    dueDate?: true
    completedAt?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    isBlocked?: true
    blockedReason?: true
    blockedSince?: true
    estimatedCost?: true
    actualCost?: true
    requiresApproval?: true
    isClientVisible?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    phaseId?: true
    assigneeId?: true
    createdById?: true
    parentTaskId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    dueDate?: true
    completedAt?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    tags?: true
    isBlocked?: true
    blockedReason?: true
    blockedSince?: true
    estimatedCost?: true
    actualCost?: true
    requiresApproval?: true
    isClientVisible?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    phaseId?: true
    assigneeId?: true
    createdById?: true
    parentTaskId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.TaskStatus
    priority: $Enums.TaskPriority
    startDate: Date | null
    dueDate: Date | null
    completedAt: Date | null
    estimatedHours: number | null
    actualHours: number | null
    progress: number
    tags: string[]
    isBlocked: boolean
    blockedReason: string | null
    blockedSince: Date | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    requiresApproval: boolean
    isClientVisible: boolean
    createdAt: Date
    updatedAt: Date
    projectId: string
    phaseId: string | null
    assigneeId: string | null
    createdById: string
    parentTaskId: string | null
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    dueDate?: boolean
    completedAt?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    tags?: boolean
    isBlocked?: boolean
    blockedReason?: boolean
    blockedSince?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    phaseId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
    subtasks?: boolean | Task$subtasksArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    documents?: boolean | Task$documentsArgs<ExtArgs>
    posts?: boolean | Task$postsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    dueDate?: boolean
    completedAt?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    tags?: boolean
    isBlocked?: boolean
    blockedReason?: boolean
    blockedSince?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    phaseId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    dueDate?: boolean
    completedAt?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    tags?: boolean
    isBlocked?: boolean
    blockedReason?: boolean
    blockedSince?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    phaseId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    dueDate?: boolean
    completedAt?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    tags?: boolean
    isBlocked?: boolean
    blockedReason?: boolean
    blockedSince?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    phaseId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    parentTaskId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "startDate" | "dueDate" | "completedAt" | "estimatedHours" | "actualHours" | "progress" | "tags" | "isBlocked" | "blockedReason" | "blockedSince" | "estimatedCost" | "actualCost" | "requiresApproval" | "isClientVisible" | "createdAt" | "updatedAt" | "projectId" | "phaseId" | "assigneeId" | "createdById" | "parentTaskId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
    subtasks?: boolean | Task$subtasksArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    documents?: boolean | Task$documentsArgs<ExtArgs>
    posts?: boolean | Task$postsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Task$phaseArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentTask?: boolean | Task$parentTaskArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      phase: Prisma.$ProjectPhasePayload<ExtArgs> | null
      assignee: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      parentTask: Prisma.$TaskPayload<ExtArgs> | null
      subtasks: Prisma.$TaskPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.TaskStatus
      priority: $Enums.TaskPriority
      startDate: Date | null
      dueDate: Date | null
      completedAt: Date | null
      estimatedHours: number | null
      actualHours: number | null
      progress: number
      tags: string[]
      isBlocked: boolean
      blockedReason: string | null
      blockedSince: Date | null
      estimatedCost: Prisma.Decimal | null
      actualCost: Prisma.Decimal | null
      requiresApproval: boolean
      isClientVisible: boolean
      createdAt: Date
      updatedAt: Date
      projectId: string
      phaseId: string | null
      assigneeId: string | null
      createdById: string
      parentTaskId: string | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    phase<T extends Task$phaseArgs<ExtArgs> = {}>(args?: Subset<T, Task$phaseArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Task$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parentTask<T extends Task$parentTaskArgs<ExtArgs> = {}>(args?: Subset<T, Task$parentTaskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subtasks<T extends Task$subtasksArgs<ExtArgs> = {}>(args?: Subset<T, Task$subtasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Task$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Task$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends Task$postsArgs<ExtArgs> = {}>(args?: Subset<T, Task$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly priority: FieldRef<"Task", 'TaskPriority'>
    readonly startDate: FieldRef<"Task", 'DateTime'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly completedAt: FieldRef<"Task", 'DateTime'>
    readonly estimatedHours: FieldRef<"Task", 'Float'>
    readonly actualHours: FieldRef<"Task", 'Float'>
    readonly progress: FieldRef<"Task", 'Float'>
    readonly tags: FieldRef<"Task", 'String[]'>
    readonly isBlocked: FieldRef<"Task", 'Boolean'>
    readonly blockedReason: FieldRef<"Task", 'String'>
    readonly blockedSince: FieldRef<"Task", 'DateTime'>
    readonly estimatedCost: FieldRef<"Task", 'Decimal'>
    readonly actualCost: FieldRef<"Task", 'Decimal'>
    readonly requiresApproval: FieldRef<"Task", 'Boolean'>
    readonly isClientVisible: FieldRef<"Task", 'Boolean'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly projectId: FieldRef<"Task", 'String'>
    readonly phaseId: FieldRef<"Task", 'String'>
    readonly assigneeId: FieldRef<"Task", 'String'>
    readonly createdById: FieldRef<"Task", 'String'>
    readonly parentTaskId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.phase
   */
  export type Task$phaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    where?: ProjectPhaseWhereInput
  }

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task.parentTask
   */
  export type Task$parentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Task.subtasks
   */
  export type Task$subtasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task.comments
   */
  export type Task$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Task.documents
   */
  export type Task$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Task.posts
   */
  export type Task$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    shareCount: number | null
  }

  export type PostSumAggregateOutputType = {
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    shareCount: number | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    content: string | null
    type: $Enums.PostType | null
    priority: $Enums.PostPriority | null
    status: $Enums.PostStatus | null
    isPublic: boolean | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    shareCount: number | null
    requiresApproval: boolean | null
    approvedAt: Date | null
    approvedById: string | null
    isClientVisible: boolean | null
    estimatedResolution: Date | null
    actualResolution: Date | null
    businessImpact: $Enums.BusinessImpact | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    organizationId: string | null
    projectId: string | null
    phaseId: string | null
    taskId: string | null
    resolutionId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    content: string | null
    type: $Enums.PostType | null
    priority: $Enums.PostPriority | null
    status: $Enums.PostStatus | null
    isPublic: boolean | null
    viewCount: number | null
    likeCount: number | null
    commentCount: number | null
    shareCount: number | null
    requiresApproval: boolean | null
    approvedAt: Date | null
    approvedById: string | null
    isClientVisible: boolean | null
    estimatedResolution: Date | null
    actualResolution: Date | null
    businessImpact: $Enums.BusinessImpact | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    organizationId: string | null
    projectId: string | null
    phaseId: string | null
    taskId: string | null
    resolutionId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    content: number
    type: number
    priority: number
    status: number
    isPublic: number
    viewCount: number
    likeCount: number
    commentCount: number
    shareCount: number
    requiresApproval: number
    approvedAt: number
    approvedById: number
    isClientVisible: number
    estimatedResolution: number
    actualResolution: number
    businessImpact: number
    createdAt: number
    updatedAt: number
    authorId: number
    organizationId: number
    projectId: number
    phaseId: number
    taskId: number
    resolutionId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    viewCount?: true
    likeCount?: true
    commentCount?: true
    shareCount?: true
  }

  export type PostSumAggregateInputType = {
    viewCount?: true
    likeCount?: true
    commentCount?: true
    shareCount?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    content?: true
    type?: true
    priority?: true
    status?: true
    isPublic?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    shareCount?: true
    requiresApproval?: true
    approvedAt?: true
    approvedById?: true
    isClientVisible?: true
    estimatedResolution?: true
    actualResolution?: true
    businessImpact?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    organizationId?: true
    projectId?: true
    phaseId?: true
    taskId?: true
    resolutionId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    content?: true
    type?: true
    priority?: true
    status?: true
    isPublic?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    shareCount?: true
    requiresApproval?: true
    approvedAt?: true
    approvedById?: true
    isClientVisible?: true
    estimatedResolution?: true
    actualResolution?: true
    businessImpact?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    organizationId?: true
    projectId?: true
    phaseId?: true
    taskId?: true
    resolutionId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    content?: true
    type?: true
    priority?: true
    status?: true
    isPublic?: true
    viewCount?: true
    likeCount?: true
    commentCount?: true
    shareCount?: true
    requiresApproval?: true
    approvedAt?: true
    approvedById?: true
    isClientVisible?: true
    estimatedResolution?: true
    actualResolution?: true
    businessImpact?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    organizationId?: true
    projectId?: true
    phaseId?: true
    taskId?: true
    resolutionId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    content: string
    type: $Enums.PostType
    priority: $Enums.PostPriority
    status: $Enums.PostStatus
    isPublic: boolean
    viewCount: number
    likeCount: number
    commentCount: number
    shareCount: number
    requiresApproval: boolean
    approvedAt: Date | null
    approvedById: string | null
    isClientVisible: boolean
    estimatedResolution: Date | null
    actualResolution: Date | null
    businessImpact: $Enums.BusinessImpact
    createdAt: Date
    updatedAt: Date
    authorId: string
    organizationId: string
    projectId: string
    phaseId: string | null
    taskId: string | null
    resolutionId: string | null
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    status?: boolean
    isPublic?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    shareCount?: boolean
    requiresApproval?: boolean
    approvedAt?: boolean
    approvedById?: boolean
    isClientVisible?: boolean
    estimatedResolution?: boolean
    actualResolution?: boolean
    businessImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    projectId?: boolean
    phaseId?: boolean
    taskId?: boolean
    resolutionId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    attachments?: boolean | Post$attachmentsArgs<ExtArgs>
    markups?: boolean | Post$markupsArgs<ExtArgs>
    bimElements?: boolean | Post$bimElementsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    shares?: boolean | Post$sharesArgs<ExtArgs>
    mentions?: boolean | Post$mentionsArgs<ExtArgs>
    hashtags?: boolean | Post$hashtagsArgs<ExtArgs>
    rfis?: boolean | Post$rfisArgs<ExtArgs>
    safetyIncident?: boolean | Post$safetyIncidentArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    status?: boolean
    isPublic?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    shareCount?: boolean
    requiresApproval?: boolean
    approvedAt?: boolean
    approvedById?: boolean
    isClientVisible?: boolean
    estimatedResolution?: boolean
    actualResolution?: boolean
    businessImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    projectId?: boolean
    phaseId?: boolean
    taskId?: boolean
    resolutionId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    status?: boolean
    isPublic?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    shareCount?: boolean
    requiresApproval?: boolean
    approvedAt?: boolean
    approvedById?: boolean
    isClientVisible?: boolean
    estimatedResolution?: boolean
    actualResolution?: boolean
    businessImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    projectId?: boolean
    phaseId?: boolean
    taskId?: boolean
    resolutionId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    status?: boolean
    isPublic?: boolean
    viewCount?: boolean
    likeCount?: boolean
    commentCount?: boolean
    shareCount?: boolean
    requiresApproval?: boolean
    approvedAt?: boolean
    approvedById?: boolean
    isClientVisible?: boolean
    estimatedResolution?: boolean
    actualResolution?: boolean
    businessImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    projectId?: boolean
    phaseId?: boolean
    taskId?: boolean
    resolutionId?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "type" | "priority" | "status" | "isPublic" | "viewCount" | "likeCount" | "commentCount" | "shareCount" | "requiresApproval" | "approvedAt" | "approvedById" | "isClientVisible" | "estimatedResolution" | "actualResolution" | "businessImpact" | "createdAt" | "updatedAt" | "authorId" | "organizationId" | "projectId" | "phaseId" | "taskId" | "resolutionId", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    attachments?: boolean | Post$attachmentsArgs<ExtArgs>
    markups?: boolean | Post$markupsArgs<ExtArgs>
    bimElements?: boolean | Post$bimElementsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    shares?: boolean | Post$sharesArgs<ExtArgs>
    mentions?: boolean | Post$mentionsArgs<ExtArgs>
    hashtags?: boolean | Post$hashtagsArgs<ExtArgs>
    rfis?: boolean | Post$rfisArgs<ExtArgs>
    safetyIncident?: boolean | Post$safetyIncidentArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    phase?: boolean | Post$phaseArgs<ExtArgs>
    task?: boolean | Post$taskArgs<ExtArgs>
    resolution?: boolean | Post$resolutionArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
      phase: Prisma.$ProjectPhasePayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
      attachments: Prisma.$PostAttachmentPayload<ExtArgs>[]
      markups: Prisma.$PostMarkupPayload<ExtArgs>[]
      bimElements: Prisma.$PostBimElementPayload<ExtArgs>[]
      likes: Prisma.$PostLikePayload<ExtArgs>[]
      comments: Prisma.$PostCommentPayload<ExtArgs>[]
      shares: Prisma.$PostSharePayload<ExtArgs>[]
      mentions: Prisma.$PostMentionPayload<ExtArgs>[]
      hashtags: Prisma.$PostHashtagPayload<ExtArgs>[]
      rfis: Prisma.$RFIPayload<ExtArgs>[]
      safetyIncident: Prisma.$SafetyIncidentPayload<ExtArgs> | null
      resolution: Prisma.$PostResolutionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      type: $Enums.PostType
      priority: $Enums.PostPriority
      status: $Enums.PostStatus
      isPublic: boolean
      viewCount: number
      likeCount: number
      commentCount: number
      shareCount: number
      requiresApproval: boolean
      approvedAt: Date | null
      approvedById: string | null
      isClientVisible: boolean
      estimatedResolution: Date | null
      actualResolution: Date | null
      businessImpact: $Enums.BusinessImpact
      createdAt: Date
      updatedAt: Date
      authorId: string
      organizationId: string
      projectId: string
      phaseId: string | null
      taskId: string | null
      resolutionId: string | null
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    phase<T extends Post$phaseArgs<ExtArgs> = {}>(args?: Subset<T, Post$phaseArgs<ExtArgs>>): Prisma__ProjectPhaseClient<$Result.GetResult<Prisma.$ProjectPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends Post$taskArgs<ExtArgs> = {}>(args?: Subset<T, Post$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    attachments<T extends Post$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    markups<T extends Post$markupsArgs<ExtArgs> = {}>(args?: Subset<T, Post$markupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bimElements<T extends Post$bimElementsArgs<ExtArgs> = {}>(args?: Subset<T, Post$bimElementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shares<T extends Post$sharesArgs<ExtArgs> = {}>(args?: Subset<T, Post$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mentions<T extends Post$mentionsArgs<ExtArgs> = {}>(args?: Subset<T, Post$mentionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hashtags<T extends Post$hashtagsArgs<ExtArgs> = {}>(args?: Subset<T, Post$hashtagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rfis<T extends Post$rfisArgs<ExtArgs> = {}>(args?: Subset<T, Post$rfisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    safetyIncident<T extends Post$safetyIncidentArgs<ExtArgs> = {}>(args?: Subset<T, Post$safetyIncidentArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    resolution<T extends Post$resolutionArgs<ExtArgs> = {}>(args?: Subset<T, Post$resolutionArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly type: FieldRef<"Post", 'PostType'>
    readonly priority: FieldRef<"Post", 'PostPriority'>
    readonly status: FieldRef<"Post", 'PostStatus'>
    readonly isPublic: FieldRef<"Post", 'Boolean'>
    readonly viewCount: FieldRef<"Post", 'Int'>
    readonly likeCount: FieldRef<"Post", 'Int'>
    readonly commentCount: FieldRef<"Post", 'Int'>
    readonly shareCount: FieldRef<"Post", 'Int'>
    readonly requiresApproval: FieldRef<"Post", 'Boolean'>
    readonly approvedAt: FieldRef<"Post", 'DateTime'>
    readonly approvedById: FieldRef<"Post", 'String'>
    readonly isClientVisible: FieldRef<"Post", 'Boolean'>
    readonly estimatedResolution: FieldRef<"Post", 'DateTime'>
    readonly actualResolution: FieldRef<"Post", 'DateTime'>
    readonly businessImpact: FieldRef<"Post", 'BusinessImpact'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly authorId: FieldRef<"Post", 'String'>
    readonly organizationId: FieldRef<"Post", 'String'>
    readonly projectId: FieldRef<"Post", 'String'>
    readonly phaseId: FieldRef<"Post", 'String'>
    readonly taskId: FieldRef<"Post", 'String'>
    readonly resolutionId: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.phase
   */
  export type Post$phaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectPhase
     */
    select?: ProjectPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectPhase
     */
    omit?: ProjectPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectPhaseInclude<ExtArgs> | null
    where?: ProjectPhaseWhereInput
  }

  /**
   * Post.task
   */
  export type Post$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Post.attachments
   */
  export type Post$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    where?: PostAttachmentWhereInput
    orderBy?: PostAttachmentOrderByWithRelationInput | PostAttachmentOrderByWithRelationInput[]
    cursor?: PostAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostAttachmentScalarFieldEnum | PostAttachmentScalarFieldEnum[]
  }

  /**
   * Post.markups
   */
  export type Post$markupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    where?: PostMarkupWhereInput
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    cursor?: PostMarkupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostMarkupScalarFieldEnum | PostMarkupScalarFieldEnum[]
  }

  /**
   * Post.bimElements
   */
  export type Post$bimElementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    where?: PostBimElementWhereInput
    orderBy?: PostBimElementOrderByWithRelationInput | PostBimElementOrderByWithRelationInput[]
    cursor?: PostBimElementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostBimElementScalarFieldEnum | PostBimElementScalarFieldEnum[]
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    where?: PostCommentWhereInput
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    cursor?: PostCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * Post.shares
   */
  export type Post$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    where?: PostShareWhereInput
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    cursor?: PostShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostShareScalarFieldEnum | PostShareScalarFieldEnum[]
  }

  /**
   * Post.mentions
   */
  export type Post$mentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    where?: PostMentionWhereInput
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    cursor?: PostMentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * Post.hashtags
   */
  export type Post$hashtagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    where?: PostHashtagWhereInput
    orderBy?: PostHashtagOrderByWithRelationInput | PostHashtagOrderByWithRelationInput[]
    cursor?: PostHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostHashtagScalarFieldEnum | PostHashtagScalarFieldEnum[]
  }

  /**
   * Post.rfis
   */
  export type Post$rfisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    cursor?: RFIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * Post.safetyIncident
   */
  export type Post$safetyIncidentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    where?: SafetyIncidentWhereInput
  }

  /**
   * Post.resolution
   */
  export type Post$resolutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    where?: PostResolutionWhereInput
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model PostAttachment
   */

  export type AggregatePostAttachment = {
    _count: PostAttachmentCountAggregateOutputType | null
    _avg: PostAttachmentAvgAggregateOutputType | null
    _sum: PostAttachmentSumAggregateOutputType | null
    _min: PostAttachmentMinAggregateOutputType | null
    _max: PostAttachmentMaxAggregateOutputType | null
  }

  export type PostAttachmentAvgAggregateOutputType = {
    fileSize: number | null
    order: number | null
  }

  export type PostAttachmentSumAggregateOutputType = {
    fileSize: number | null
    order: number | null
  }

  export type PostAttachmentMinAggregateOutputType = {
    id: string | null
    type: $Enums.AttachmentType | null
    fileUrl: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    order: number | null
    isConfidential: boolean | null
    accessLevel: $Enums.AccessLevel | null
    postId: string | null
  }

  export type PostAttachmentMaxAggregateOutputType = {
    id: string | null
    type: $Enums.AttachmentType | null
    fileUrl: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    order: number | null
    isConfidential: boolean | null
    accessLevel: $Enums.AccessLevel | null
    postId: string | null
  }

  export type PostAttachmentCountAggregateOutputType = {
    id: number
    type: number
    fileUrl: number
    fileName: number
    fileSize: number
    mimeType: number
    metadata: number
    order: number
    isConfidential: number
    accessLevel: number
    postId: number
    _all: number
  }


  export type PostAttachmentAvgAggregateInputType = {
    fileSize?: true
    order?: true
  }

  export type PostAttachmentSumAggregateInputType = {
    fileSize?: true
    order?: true
  }

  export type PostAttachmentMinAggregateInputType = {
    id?: true
    type?: true
    fileUrl?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    order?: true
    isConfidential?: true
    accessLevel?: true
    postId?: true
  }

  export type PostAttachmentMaxAggregateInputType = {
    id?: true
    type?: true
    fileUrl?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    order?: true
    isConfidential?: true
    accessLevel?: true
    postId?: true
  }

  export type PostAttachmentCountAggregateInputType = {
    id?: true
    type?: true
    fileUrl?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    metadata?: true
    order?: true
    isConfidential?: true
    accessLevel?: true
    postId?: true
    _all?: true
  }

  export type PostAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostAttachment to aggregate.
     */
    where?: PostAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostAttachments to fetch.
     */
    orderBy?: PostAttachmentOrderByWithRelationInput | PostAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostAttachments
    **/
    _count?: true | PostAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostAttachmentMaxAggregateInputType
  }

  export type GetPostAttachmentAggregateType<T extends PostAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePostAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostAttachment[P]>
      : GetScalarType<T[P], AggregatePostAttachment[P]>
  }




  export type PostAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostAttachmentWhereInput
    orderBy?: PostAttachmentOrderByWithAggregationInput | PostAttachmentOrderByWithAggregationInput[]
    by: PostAttachmentScalarFieldEnum[] | PostAttachmentScalarFieldEnum
    having?: PostAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostAttachmentCountAggregateInputType | true
    _avg?: PostAttachmentAvgAggregateInputType
    _sum?: PostAttachmentSumAggregateInputType
    _min?: PostAttachmentMinAggregateInputType
    _max?: PostAttachmentMaxAggregateInputType
  }

  export type PostAttachmentGroupByOutputType = {
    id: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata: JsonValue | null
    order: number
    isConfidential: boolean
    accessLevel: $Enums.AccessLevel
    postId: string
    _count: PostAttachmentCountAggregateOutputType | null
    _avg: PostAttachmentAvgAggregateOutputType | null
    _sum: PostAttachmentSumAggregateOutputType | null
    _min: PostAttachmentMinAggregateOutputType | null
    _max: PostAttachmentMaxAggregateOutputType | null
  }

  type GetPostAttachmentGroupByPayload<T extends PostAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], PostAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type PostAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileUrl?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    metadata?: boolean
    order?: boolean
    isConfidential?: boolean
    accessLevel?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    markups?: boolean | PostAttachment$markupsArgs<ExtArgs>
    _count?: boolean | PostAttachmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postAttachment"]>

  export type PostAttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileUrl?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    metadata?: boolean
    order?: boolean
    isConfidential?: boolean
    accessLevel?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postAttachment"]>

  export type PostAttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileUrl?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    metadata?: boolean
    order?: boolean
    isConfidential?: boolean
    accessLevel?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postAttachment"]>

  export type PostAttachmentSelectScalar = {
    id?: boolean
    type?: boolean
    fileUrl?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    metadata?: boolean
    order?: boolean
    isConfidential?: boolean
    accessLevel?: boolean
    postId?: boolean
  }

  export type PostAttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "fileUrl" | "fileName" | "fileSize" | "mimeType" | "metadata" | "order" | "isConfidential" | "accessLevel" | "postId", ExtArgs["result"]["postAttachment"]>
  export type PostAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    markups?: boolean | PostAttachment$markupsArgs<ExtArgs>
    _count?: boolean | PostAttachmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostAttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostAttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostAttachment"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      markups: Prisma.$PostMarkupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.AttachmentType
      fileUrl: string
      fileName: string
      fileSize: number
      mimeType: string
      metadata: Prisma.JsonValue | null
      order: number
      isConfidential: boolean
      accessLevel: $Enums.AccessLevel
      postId: string
    }, ExtArgs["result"]["postAttachment"]>
    composites: {}
  }

  type PostAttachmentGetPayload<S extends boolean | null | undefined | PostAttachmentDefaultArgs> = $Result.GetResult<Prisma.$PostAttachmentPayload, S>

  type PostAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostAttachmentCountAggregateInputType | true
    }

  export interface PostAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostAttachment'], meta: { name: 'PostAttachment' } }
    /**
     * Find zero or one PostAttachment that matches the filter.
     * @param {PostAttachmentFindUniqueArgs} args - Arguments to find a PostAttachment
     * @example
     * // Get one PostAttachment
     * const postAttachment = await prisma.postAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostAttachmentFindUniqueArgs>(args: SelectSubset<T, PostAttachmentFindUniqueArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostAttachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostAttachmentFindUniqueOrThrowArgs} args - Arguments to find a PostAttachment
     * @example
     * // Get one PostAttachment
     * const postAttachment = await prisma.postAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PostAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentFindFirstArgs} args - Arguments to find a PostAttachment
     * @example
     * // Get one PostAttachment
     * const postAttachment = await prisma.postAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostAttachmentFindFirstArgs>(args?: SelectSubset<T, PostAttachmentFindFirstArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentFindFirstOrThrowArgs} args - Arguments to find a PostAttachment
     * @example
     * // Get one PostAttachment
     * const postAttachment = await prisma.postAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PostAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostAttachments
     * const postAttachments = await prisma.postAttachment.findMany()
     * 
     * // Get first 10 PostAttachments
     * const postAttachments = await prisma.postAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postAttachmentWithIdOnly = await prisma.postAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostAttachmentFindManyArgs>(args?: SelectSubset<T, PostAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostAttachment.
     * @param {PostAttachmentCreateArgs} args - Arguments to create a PostAttachment.
     * @example
     * // Create one PostAttachment
     * const PostAttachment = await prisma.postAttachment.create({
     *   data: {
     *     // ... data to create a PostAttachment
     *   }
     * })
     * 
     */
    create<T extends PostAttachmentCreateArgs>(args: SelectSubset<T, PostAttachmentCreateArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostAttachments.
     * @param {PostAttachmentCreateManyArgs} args - Arguments to create many PostAttachments.
     * @example
     * // Create many PostAttachments
     * const postAttachment = await prisma.postAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostAttachmentCreateManyArgs>(args?: SelectSubset<T, PostAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostAttachments and returns the data saved in the database.
     * @param {PostAttachmentCreateManyAndReturnArgs} args - Arguments to create many PostAttachments.
     * @example
     * // Create many PostAttachments
     * const postAttachment = await prisma.postAttachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostAttachments and only return the `id`
     * const postAttachmentWithIdOnly = await prisma.postAttachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostAttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PostAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostAttachment.
     * @param {PostAttachmentDeleteArgs} args - Arguments to delete one PostAttachment.
     * @example
     * // Delete one PostAttachment
     * const PostAttachment = await prisma.postAttachment.delete({
     *   where: {
     *     // ... filter to delete one PostAttachment
     *   }
     * })
     * 
     */
    delete<T extends PostAttachmentDeleteArgs>(args: SelectSubset<T, PostAttachmentDeleteArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostAttachment.
     * @param {PostAttachmentUpdateArgs} args - Arguments to update one PostAttachment.
     * @example
     * // Update one PostAttachment
     * const postAttachment = await prisma.postAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostAttachmentUpdateArgs>(args: SelectSubset<T, PostAttachmentUpdateArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostAttachments.
     * @param {PostAttachmentDeleteManyArgs} args - Arguments to filter PostAttachments to delete.
     * @example
     * // Delete a few PostAttachments
     * const { count } = await prisma.postAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostAttachmentDeleteManyArgs>(args?: SelectSubset<T, PostAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostAttachments
     * const postAttachment = await prisma.postAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostAttachmentUpdateManyArgs>(args: SelectSubset<T, PostAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostAttachments and returns the data updated in the database.
     * @param {PostAttachmentUpdateManyAndReturnArgs} args - Arguments to update many PostAttachments.
     * @example
     * // Update many PostAttachments
     * const postAttachment = await prisma.postAttachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostAttachments and only return the `id`
     * const postAttachmentWithIdOnly = await prisma.postAttachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostAttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PostAttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostAttachment.
     * @param {PostAttachmentUpsertArgs} args - Arguments to update or create a PostAttachment.
     * @example
     * // Update or create a PostAttachment
     * const postAttachment = await prisma.postAttachment.upsert({
     *   create: {
     *     // ... data to create a PostAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostAttachment we want to update
     *   }
     * })
     */
    upsert<T extends PostAttachmentUpsertArgs>(args: SelectSubset<T, PostAttachmentUpsertArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentCountArgs} args - Arguments to filter PostAttachments to count.
     * @example
     * // Count the number of PostAttachments
     * const count = await prisma.postAttachment.count({
     *   where: {
     *     // ... the filter for the PostAttachments we want to count
     *   }
     * })
    **/
    count<T extends PostAttachmentCountArgs>(
      args?: Subset<T, PostAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAttachmentAggregateArgs>(args: Subset<T, PostAttachmentAggregateArgs>): Prisma.PrismaPromise<GetPostAttachmentAggregateType<T>>

    /**
     * Group by PostAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: PostAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostAttachment model
   */
  readonly fields: PostAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    markups<T extends PostAttachment$markupsArgs<ExtArgs> = {}>(args?: Subset<T, PostAttachment$markupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostAttachment model
   */
  interface PostAttachmentFieldRefs {
    readonly id: FieldRef<"PostAttachment", 'String'>
    readonly type: FieldRef<"PostAttachment", 'AttachmentType'>
    readonly fileUrl: FieldRef<"PostAttachment", 'String'>
    readonly fileName: FieldRef<"PostAttachment", 'String'>
    readonly fileSize: FieldRef<"PostAttachment", 'Int'>
    readonly mimeType: FieldRef<"PostAttachment", 'String'>
    readonly metadata: FieldRef<"PostAttachment", 'Json'>
    readonly order: FieldRef<"PostAttachment", 'Int'>
    readonly isConfidential: FieldRef<"PostAttachment", 'Boolean'>
    readonly accessLevel: FieldRef<"PostAttachment", 'AccessLevel'>
    readonly postId: FieldRef<"PostAttachment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostAttachment findUnique
   */
  export type PostAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which PostAttachment to fetch.
     */
    where: PostAttachmentWhereUniqueInput
  }

  /**
   * PostAttachment findUniqueOrThrow
   */
  export type PostAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which PostAttachment to fetch.
     */
    where: PostAttachmentWhereUniqueInput
  }

  /**
   * PostAttachment findFirst
   */
  export type PostAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which PostAttachment to fetch.
     */
    where?: PostAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostAttachments to fetch.
     */
    orderBy?: PostAttachmentOrderByWithRelationInput | PostAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostAttachments.
     */
    cursor?: PostAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostAttachments.
     */
    distinct?: PostAttachmentScalarFieldEnum | PostAttachmentScalarFieldEnum[]
  }

  /**
   * PostAttachment findFirstOrThrow
   */
  export type PostAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which PostAttachment to fetch.
     */
    where?: PostAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostAttachments to fetch.
     */
    orderBy?: PostAttachmentOrderByWithRelationInput | PostAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostAttachments.
     */
    cursor?: PostAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostAttachments.
     */
    distinct?: PostAttachmentScalarFieldEnum | PostAttachmentScalarFieldEnum[]
  }

  /**
   * PostAttachment findMany
   */
  export type PostAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which PostAttachments to fetch.
     */
    where?: PostAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostAttachments to fetch.
     */
    orderBy?: PostAttachmentOrderByWithRelationInput | PostAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostAttachments.
     */
    cursor?: PostAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostAttachments.
     */
    skip?: number
    distinct?: PostAttachmentScalarFieldEnum | PostAttachmentScalarFieldEnum[]
  }

  /**
   * PostAttachment create
   */
  export type PostAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PostAttachment.
     */
    data: XOR<PostAttachmentCreateInput, PostAttachmentUncheckedCreateInput>
  }

  /**
   * PostAttachment createMany
   */
  export type PostAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostAttachments.
     */
    data: PostAttachmentCreateManyInput | PostAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostAttachment createManyAndReturn
   */
  export type PostAttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many PostAttachments.
     */
    data: PostAttachmentCreateManyInput | PostAttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostAttachment update
   */
  export type PostAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PostAttachment.
     */
    data: XOR<PostAttachmentUpdateInput, PostAttachmentUncheckedUpdateInput>
    /**
     * Choose, which PostAttachment to update.
     */
    where: PostAttachmentWhereUniqueInput
  }

  /**
   * PostAttachment updateMany
   */
  export type PostAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostAttachments.
     */
    data: XOR<PostAttachmentUpdateManyMutationInput, PostAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which PostAttachments to update
     */
    where?: PostAttachmentWhereInput
    /**
     * Limit how many PostAttachments to update.
     */
    limit?: number
  }

  /**
   * PostAttachment updateManyAndReturn
   */
  export type PostAttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * The data used to update PostAttachments.
     */
    data: XOR<PostAttachmentUpdateManyMutationInput, PostAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which PostAttachments to update
     */
    where?: PostAttachmentWhereInput
    /**
     * Limit how many PostAttachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostAttachment upsert
   */
  export type PostAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PostAttachment to update in case it exists.
     */
    where: PostAttachmentWhereUniqueInput
    /**
     * In case the PostAttachment found by the `where` argument doesn't exist, create a new PostAttachment with this data.
     */
    create: XOR<PostAttachmentCreateInput, PostAttachmentUncheckedCreateInput>
    /**
     * In case the PostAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostAttachmentUpdateInput, PostAttachmentUncheckedUpdateInput>
  }

  /**
   * PostAttachment delete
   */
  export type PostAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
    /**
     * Filter which PostAttachment to delete.
     */
    where: PostAttachmentWhereUniqueInput
  }

  /**
   * PostAttachment deleteMany
   */
  export type PostAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostAttachments to delete
     */
    where?: PostAttachmentWhereInput
    /**
     * Limit how many PostAttachments to delete.
     */
    limit?: number
  }

  /**
   * PostAttachment.markups
   */
  export type PostAttachment$markupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    where?: PostMarkupWhereInput
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    cursor?: PostMarkupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostMarkupScalarFieldEnum | PostMarkupScalarFieldEnum[]
  }

  /**
   * PostAttachment without action
   */
  export type PostAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostAttachment
     */
    select?: PostAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostAttachment
     */
    omit?: PostAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model PostMarkup
   */

  export type AggregatePostMarkup = {
    _count: PostMarkupCountAggregateOutputType | null
    _avg: PostMarkupAvgAggregateOutputType | null
    _sum: PostMarkupSumAggregateOutputType | null
    _min: PostMarkupMinAggregateOutputType | null
    _max: PostMarkupMaxAggregateOutputType | null
  }

  export type PostMarkupAvgAggregateOutputType = {
    strokeWidth: number | null
    opacity: number | null
  }

  export type PostMarkupSumAggregateOutputType = {
    strokeWidth: number | null
    opacity: number | null
  }

  export type PostMarkupMinAggregateOutputType = {
    id: string | null
    type: $Enums.MarkupType | null
    content: string | null
    color: string | null
    strokeWidth: number | null
    opacity: number | null
    attachmentId: string | null
    postId: string | null
  }

  export type PostMarkupMaxAggregateOutputType = {
    id: string | null
    type: $Enums.MarkupType | null
    content: string | null
    color: string | null
    strokeWidth: number | null
    opacity: number | null
    attachmentId: string | null
    postId: string | null
  }

  export type PostMarkupCountAggregateOutputType = {
    id: number
    type: number
    coordinates: number
    content: number
    color: number
    strokeWidth: number
    opacity: number
    attachmentId: number
    postId: number
    _all: number
  }


  export type PostMarkupAvgAggregateInputType = {
    strokeWidth?: true
    opacity?: true
  }

  export type PostMarkupSumAggregateInputType = {
    strokeWidth?: true
    opacity?: true
  }

  export type PostMarkupMinAggregateInputType = {
    id?: true
    type?: true
    content?: true
    color?: true
    strokeWidth?: true
    opacity?: true
    attachmentId?: true
    postId?: true
  }

  export type PostMarkupMaxAggregateInputType = {
    id?: true
    type?: true
    content?: true
    color?: true
    strokeWidth?: true
    opacity?: true
    attachmentId?: true
    postId?: true
  }

  export type PostMarkupCountAggregateInputType = {
    id?: true
    type?: true
    coordinates?: true
    content?: true
    color?: true
    strokeWidth?: true
    opacity?: true
    attachmentId?: true
    postId?: true
    _all?: true
  }

  export type PostMarkupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostMarkup to aggregate.
     */
    where?: PostMarkupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMarkups to fetch.
     */
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostMarkupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMarkups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMarkups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostMarkups
    **/
    _count?: true | PostMarkupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostMarkupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostMarkupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMarkupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMarkupMaxAggregateInputType
  }

  export type GetPostMarkupAggregateType<T extends PostMarkupAggregateArgs> = {
        [P in keyof T & keyof AggregatePostMarkup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostMarkup[P]>
      : GetScalarType<T[P], AggregatePostMarkup[P]>
  }




  export type PostMarkupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMarkupWhereInput
    orderBy?: PostMarkupOrderByWithAggregationInput | PostMarkupOrderByWithAggregationInput[]
    by: PostMarkupScalarFieldEnum[] | PostMarkupScalarFieldEnum
    having?: PostMarkupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostMarkupCountAggregateInputType | true
    _avg?: PostMarkupAvgAggregateInputType
    _sum?: PostMarkupSumAggregateInputType
    _min?: PostMarkupMinAggregateInputType
    _max?: PostMarkupMaxAggregateInputType
  }

  export type PostMarkupGroupByOutputType = {
    id: string
    type: $Enums.MarkupType
    coordinates: JsonValue
    content: string | null
    color: string
    strokeWidth: number
    opacity: number
    attachmentId: string
    postId: string
    _count: PostMarkupCountAggregateOutputType | null
    _avg: PostMarkupAvgAggregateOutputType | null
    _sum: PostMarkupSumAggregateOutputType | null
    _min: PostMarkupMinAggregateOutputType | null
    _max: PostMarkupMaxAggregateOutputType | null
  }

  type GetPostMarkupGroupByPayload<T extends PostMarkupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostMarkupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostMarkupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostMarkupGroupByOutputType[P]>
            : GetScalarType<T[P], PostMarkupGroupByOutputType[P]>
        }
      >
    >


  export type PostMarkupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    coordinates?: boolean
    content?: boolean
    color?: boolean
    strokeWidth?: boolean
    opacity?: boolean
    attachmentId?: boolean
    postId?: boolean
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMarkup"]>

  export type PostMarkupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    coordinates?: boolean
    content?: boolean
    color?: boolean
    strokeWidth?: boolean
    opacity?: boolean
    attachmentId?: boolean
    postId?: boolean
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMarkup"]>

  export type PostMarkupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    coordinates?: boolean
    content?: boolean
    color?: boolean
    strokeWidth?: boolean
    opacity?: boolean
    attachmentId?: boolean
    postId?: boolean
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMarkup"]>

  export type PostMarkupSelectScalar = {
    id?: boolean
    type?: boolean
    coordinates?: boolean
    content?: boolean
    color?: boolean
    strokeWidth?: boolean
    opacity?: boolean
    attachmentId?: boolean
    postId?: boolean
  }

  export type PostMarkupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "coordinates" | "content" | "color" | "strokeWidth" | "opacity" | "attachmentId" | "postId", ExtArgs["result"]["postMarkup"]>
  export type PostMarkupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostMarkupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostMarkupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachment?: boolean | PostAttachmentDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostMarkupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostMarkup"
    objects: {
      attachment: Prisma.$PostAttachmentPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.MarkupType
      coordinates: Prisma.JsonValue
      content: string | null
      color: string
      strokeWidth: number
      opacity: number
      attachmentId: string
      postId: string
    }, ExtArgs["result"]["postMarkup"]>
    composites: {}
  }

  type PostMarkupGetPayload<S extends boolean | null | undefined | PostMarkupDefaultArgs> = $Result.GetResult<Prisma.$PostMarkupPayload, S>

  type PostMarkupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostMarkupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostMarkupCountAggregateInputType | true
    }

  export interface PostMarkupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostMarkup'], meta: { name: 'PostMarkup' } }
    /**
     * Find zero or one PostMarkup that matches the filter.
     * @param {PostMarkupFindUniqueArgs} args - Arguments to find a PostMarkup
     * @example
     * // Get one PostMarkup
     * const postMarkup = await prisma.postMarkup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostMarkupFindUniqueArgs>(args: SelectSubset<T, PostMarkupFindUniqueArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostMarkup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostMarkupFindUniqueOrThrowArgs} args - Arguments to find a PostMarkup
     * @example
     * // Get one PostMarkup
     * const postMarkup = await prisma.postMarkup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostMarkupFindUniqueOrThrowArgs>(args: SelectSubset<T, PostMarkupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostMarkup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupFindFirstArgs} args - Arguments to find a PostMarkup
     * @example
     * // Get one PostMarkup
     * const postMarkup = await prisma.postMarkup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostMarkupFindFirstArgs>(args?: SelectSubset<T, PostMarkupFindFirstArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostMarkup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupFindFirstOrThrowArgs} args - Arguments to find a PostMarkup
     * @example
     * // Get one PostMarkup
     * const postMarkup = await prisma.postMarkup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostMarkupFindFirstOrThrowArgs>(args?: SelectSubset<T, PostMarkupFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostMarkups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostMarkups
     * const postMarkups = await prisma.postMarkup.findMany()
     * 
     * // Get first 10 PostMarkups
     * const postMarkups = await prisma.postMarkup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postMarkupWithIdOnly = await prisma.postMarkup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostMarkupFindManyArgs>(args?: SelectSubset<T, PostMarkupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostMarkup.
     * @param {PostMarkupCreateArgs} args - Arguments to create a PostMarkup.
     * @example
     * // Create one PostMarkup
     * const PostMarkup = await prisma.postMarkup.create({
     *   data: {
     *     // ... data to create a PostMarkup
     *   }
     * })
     * 
     */
    create<T extends PostMarkupCreateArgs>(args: SelectSubset<T, PostMarkupCreateArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostMarkups.
     * @param {PostMarkupCreateManyArgs} args - Arguments to create many PostMarkups.
     * @example
     * // Create many PostMarkups
     * const postMarkup = await prisma.postMarkup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostMarkupCreateManyArgs>(args?: SelectSubset<T, PostMarkupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostMarkups and returns the data saved in the database.
     * @param {PostMarkupCreateManyAndReturnArgs} args - Arguments to create many PostMarkups.
     * @example
     * // Create many PostMarkups
     * const postMarkup = await prisma.postMarkup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostMarkups and only return the `id`
     * const postMarkupWithIdOnly = await prisma.postMarkup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostMarkupCreateManyAndReturnArgs>(args?: SelectSubset<T, PostMarkupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostMarkup.
     * @param {PostMarkupDeleteArgs} args - Arguments to delete one PostMarkup.
     * @example
     * // Delete one PostMarkup
     * const PostMarkup = await prisma.postMarkup.delete({
     *   where: {
     *     // ... filter to delete one PostMarkup
     *   }
     * })
     * 
     */
    delete<T extends PostMarkupDeleteArgs>(args: SelectSubset<T, PostMarkupDeleteArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostMarkup.
     * @param {PostMarkupUpdateArgs} args - Arguments to update one PostMarkup.
     * @example
     * // Update one PostMarkup
     * const postMarkup = await prisma.postMarkup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostMarkupUpdateArgs>(args: SelectSubset<T, PostMarkupUpdateArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostMarkups.
     * @param {PostMarkupDeleteManyArgs} args - Arguments to filter PostMarkups to delete.
     * @example
     * // Delete a few PostMarkups
     * const { count } = await prisma.postMarkup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostMarkupDeleteManyArgs>(args?: SelectSubset<T, PostMarkupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMarkups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostMarkups
     * const postMarkup = await prisma.postMarkup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostMarkupUpdateManyArgs>(args: SelectSubset<T, PostMarkupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMarkups and returns the data updated in the database.
     * @param {PostMarkupUpdateManyAndReturnArgs} args - Arguments to update many PostMarkups.
     * @example
     * // Update many PostMarkups
     * const postMarkup = await prisma.postMarkup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostMarkups and only return the `id`
     * const postMarkupWithIdOnly = await prisma.postMarkup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostMarkupUpdateManyAndReturnArgs>(args: SelectSubset<T, PostMarkupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostMarkup.
     * @param {PostMarkupUpsertArgs} args - Arguments to update or create a PostMarkup.
     * @example
     * // Update or create a PostMarkup
     * const postMarkup = await prisma.postMarkup.upsert({
     *   create: {
     *     // ... data to create a PostMarkup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostMarkup we want to update
     *   }
     * })
     */
    upsert<T extends PostMarkupUpsertArgs>(args: SelectSubset<T, PostMarkupUpsertArgs<ExtArgs>>): Prisma__PostMarkupClient<$Result.GetResult<Prisma.$PostMarkupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostMarkups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupCountArgs} args - Arguments to filter PostMarkups to count.
     * @example
     * // Count the number of PostMarkups
     * const count = await prisma.postMarkup.count({
     *   where: {
     *     // ... the filter for the PostMarkups we want to count
     *   }
     * })
    **/
    count<T extends PostMarkupCountArgs>(
      args?: Subset<T, PostMarkupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostMarkupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostMarkup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostMarkupAggregateArgs>(args: Subset<T, PostMarkupAggregateArgs>): Prisma.PrismaPromise<GetPostMarkupAggregateType<T>>

    /**
     * Group by PostMarkup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMarkupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostMarkupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostMarkupGroupByArgs['orderBy'] }
        : { orderBy?: PostMarkupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostMarkupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostMarkupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostMarkup model
   */
  readonly fields: PostMarkupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostMarkup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostMarkupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attachment<T extends PostAttachmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostAttachmentDefaultArgs<ExtArgs>>): Prisma__PostAttachmentClient<$Result.GetResult<Prisma.$PostAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostMarkup model
   */
  interface PostMarkupFieldRefs {
    readonly id: FieldRef<"PostMarkup", 'String'>
    readonly type: FieldRef<"PostMarkup", 'MarkupType'>
    readonly coordinates: FieldRef<"PostMarkup", 'Json'>
    readonly content: FieldRef<"PostMarkup", 'String'>
    readonly color: FieldRef<"PostMarkup", 'String'>
    readonly strokeWidth: FieldRef<"PostMarkup", 'Float'>
    readonly opacity: FieldRef<"PostMarkup", 'Float'>
    readonly attachmentId: FieldRef<"PostMarkup", 'String'>
    readonly postId: FieldRef<"PostMarkup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostMarkup findUnique
   */
  export type PostMarkupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter, which PostMarkup to fetch.
     */
    where: PostMarkupWhereUniqueInput
  }

  /**
   * PostMarkup findUniqueOrThrow
   */
  export type PostMarkupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter, which PostMarkup to fetch.
     */
    where: PostMarkupWhereUniqueInput
  }

  /**
   * PostMarkup findFirst
   */
  export type PostMarkupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter, which PostMarkup to fetch.
     */
    where?: PostMarkupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMarkups to fetch.
     */
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMarkups.
     */
    cursor?: PostMarkupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMarkups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMarkups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMarkups.
     */
    distinct?: PostMarkupScalarFieldEnum | PostMarkupScalarFieldEnum[]
  }

  /**
   * PostMarkup findFirstOrThrow
   */
  export type PostMarkupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter, which PostMarkup to fetch.
     */
    where?: PostMarkupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMarkups to fetch.
     */
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMarkups.
     */
    cursor?: PostMarkupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMarkups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMarkups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMarkups.
     */
    distinct?: PostMarkupScalarFieldEnum | PostMarkupScalarFieldEnum[]
  }

  /**
   * PostMarkup findMany
   */
  export type PostMarkupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter, which PostMarkups to fetch.
     */
    where?: PostMarkupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMarkups to fetch.
     */
    orderBy?: PostMarkupOrderByWithRelationInput | PostMarkupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostMarkups.
     */
    cursor?: PostMarkupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMarkups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMarkups.
     */
    skip?: number
    distinct?: PostMarkupScalarFieldEnum | PostMarkupScalarFieldEnum[]
  }

  /**
   * PostMarkup create
   */
  export type PostMarkupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * The data needed to create a PostMarkup.
     */
    data: XOR<PostMarkupCreateInput, PostMarkupUncheckedCreateInput>
  }

  /**
   * PostMarkup createMany
   */
  export type PostMarkupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostMarkups.
     */
    data: PostMarkupCreateManyInput | PostMarkupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostMarkup createManyAndReturn
   */
  export type PostMarkupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * The data used to create many PostMarkups.
     */
    data: PostMarkupCreateManyInput | PostMarkupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostMarkup update
   */
  export type PostMarkupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * The data needed to update a PostMarkup.
     */
    data: XOR<PostMarkupUpdateInput, PostMarkupUncheckedUpdateInput>
    /**
     * Choose, which PostMarkup to update.
     */
    where: PostMarkupWhereUniqueInput
  }

  /**
   * PostMarkup updateMany
   */
  export type PostMarkupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostMarkups.
     */
    data: XOR<PostMarkupUpdateManyMutationInput, PostMarkupUncheckedUpdateManyInput>
    /**
     * Filter which PostMarkups to update
     */
    where?: PostMarkupWhereInput
    /**
     * Limit how many PostMarkups to update.
     */
    limit?: number
  }

  /**
   * PostMarkup updateManyAndReturn
   */
  export type PostMarkupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * The data used to update PostMarkups.
     */
    data: XOR<PostMarkupUpdateManyMutationInput, PostMarkupUncheckedUpdateManyInput>
    /**
     * Filter which PostMarkups to update
     */
    where?: PostMarkupWhereInput
    /**
     * Limit how many PostMarkups to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostMarkup upsert
   */
  export type PostMarkupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * The filter to search for the PostMarkup to update in case it exists.
     */
    where: PostMarkupWhereUniqueInput
    /**
     * In case the PostMarkup found by the `where` argument doesn't exist, create a new PostMarkup with this data.
     */
    create: XOR<PostMarkupCreateInput, PostMarkupUncheckedCreateInput>
    /**
     * In case the PostMarkup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostMarkupUpdateInput, PostMarkupUncheckedUpdateInput>
  }

  /**
   * PostMarkup delete
   */
  export type PostMarkupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
    /**
     * Filter which PostMarkup to delete.
     */
    where: PostMarkupWhereUniqueInput
  }

  /**
   * PostMarkup deleteMany
   */
  export type PostMarkupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostMarkups to delete
     */
    where?: PostMarkupWhereInput
    /**
     * Limit how many PostMarkups to delete.
     */
    limit?: number
  }

  /**
   * PostMarkup without action
   */
  export type PostMarkupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMarkup
     */
    select?: PostMarkupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMarkup
     */
    omit?: PostMarkupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMarkupInclude<ExtArgs> | null
  }


  /**
   * Model PostBimElement
   */

  export type AggregatePostBimElement = {
    _count: PostBimElementCountAggregateOutputType | null
    _min: PostBimElementMinAggregateOutputType | null
    _max: PostBimElementMaxAggregateOutputType | null
  }

  export type PostBimElementMinAggregateOutputType = {
    id: string | null
    elementId: string | null
    elementType: string | null
    elementName: string | null
    discipline: $Enums.BimDiscipline | null
    postId: string | null
  }

  export type PostBimElementMaxAggregateOutputType = {
    id: string | null
    elementId: string | null
    elementType: string | null
    elementName: string | null
    discipline: $Enums.BimDiscipline | null
    postId: string | null
  }

  export type PostBimElementCountAggregateOutputType = {
    id: number
    elementId: number
    elementType: number
    elementName: number
    discipline: number
    properties: number
    postId: number
    _all: number
  }


  export type PostBimElementMinAggregateInputType = {
    id?: true
    elementId?: true
    elementType?: true
    elementName?: true
    discipline?: true
    postId?: true
  }

  export type PostBimElementMaxAggregateInputType = {
    id?: true
    elementId?: true
    elementType?: true
    elementName?: true
    discipline?: true
    postId?: true
  }

  export type PostBimElementCountAggregateInputType = {
    id?: true
    elementId?: true
    elementType?: true
    elementName?: true
    discipline?: true
    properties?: true
    postId?: true
    _all?: true
  }

  export type PostBimElementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostBimElement to aggregate.
     */
    where?: PostBimElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostBimElements to fetch.
     */
    orderBy?: PostBimElementOrderByWithRelationInput | PostBimElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostBimElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostBimElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostBimElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostBimElements
    **/
    _count?: true | PostBimElementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostBimElementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostBimElementMaxAggregateInputType
  }

  export type GetPostBimElementAggregateType<T extends PostBimElementAggregateArgs> = {
        [P in keyof T & keyof AggregatePostBimElement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostBimElement[P]>
      : GetScalarType<T[P], AggregatePostBimElement[P]>
  }




  export type PostBimElementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostBimElementWhereInput
    orderBy?: PostBimElementOrderByWithAggregationInput | PostBimElementOrderByWithAggregationInput[]
    by: PostBimElementScalarFieldEnum[] | PostBimElementScalarFieldEnum
    having?: PostBimElementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostBimElementCountAggregateInputType | true
    _min?: PostBimElementMinAggregateInputType
    _max?: PostBimElementMaxAggregateInputType
  }

  export type PostBimElementGroupByOutputType = {
    id: string
    elementId: string
    elementType: string
    elementName: string | null
    discipline: $Enums.BimDiscipline
    properties: JsonValue | null
    postId: string
    _count: PostBimElementCountAggregateOutputType | null
    _min: PostBimElementMinAggregateOutputType | null
    _max: PostBimElementMaxAggregateOutputType | null
  }

  type GetPostBimElementGroupByPayload<T extends PostBimElementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostBimElementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostBimElementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostBimElementGroupByOutputType[P]>
            : GetScalarType<T[P], PostBimElementGroupByOutputType[P]>
        }
      >
    >


  export type PostBimElementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    elementId?: boolean
    elementType?: boolean
    elementName?: boolean
    discipline?: boolean
    properties?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postBimElement"]>

  export type PostBimElementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    elementId?: boolean
    elementType?: boolean
    elementName?: boolean
    discipline?: boolean
    properties?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postBimElement"]>

  export type PostBimElementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    elementId?: boolean
    elementType?: boolean
    elementName?: boolean
    discipline?: boolean
    properties?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postBimElement"]>

  export type PostBimElementSelectScalar = {
    id?: boolean
    elementId?: boolean
    elementType?: boolean
    elementName?: boolean
    discipline?: boolean
    properties?: boolean
    postId?: boolean
  }

  export type PostBimElementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "elementId" | "elementType" | "elementName" | "discipline" | "properties" | "postId", ExtArgs["result"]["postBimElement"]>
  export type PostBimElementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostBimElementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostBimElementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostBimElementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostBimElement"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      elementId: string
      elementType: string
      elementName: string | null
      discipline: $Enums.BimDiscipline
      properties: Prisma.JsonValue | null
      postId: string
    }, ExtArgs["result"]["postBimElement"]>
    composites: {}
  }

  type PostBimElementGetPayload<S extends boolean | null | undefined | PostBimElementDefaultArgs> = $Result.GetResult<Prisma.$PostBimElementPayload, S>

  type PostBimElementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostBimElementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostBimElementCountAggregateInputType | true
    }

  export interface PostBimElementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostBimElement'], meta: { name: 'PostBimElement' } }
    /**
     * Find zero or one PostBimElement that matches the filter.
     * @param {PostBimElementFindUniqueArgs} args - Arguments to find a PostBimElement
     * @example
     * // Get one PostBimElement
     * const postBimElement = await prisma.postBimElement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostBimElementFindUniqueArgs>(args: SelectSubset<T, PostBimElementFindUniqueArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostBimElement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostBimElementFindUniqueOrThrowArgs} args - Arguments to find a PostBimElement
     * @example
     * // Get one PostBimElement
     * const postBimElement = await prisma.postBimElement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostBimElementFindUniqueOrThrowArgs>(args: SelectSubset<T, PostBimElementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostBimElement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementFindFirstArgs} args - Arguments to find a PostBimElement
     * @example
     * // Get one PostBimElement
     * const postBimElement = await prisma.postBimElement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostBimElementFindFirstArgs>(args?: SelectSubset<T, PostBimElementFindFirstArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostBimElement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementFindFirstOrThrowArgs} args - Arguments to find a PostBimElement
     * @example
     * // Get one PostBimElement
     * const postBimElement = await prisma.postBimElement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostBimElementFindFirstOrThrowArgs>(args?: SelectSubset<T, PostBimElementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostBimElements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostBimElements
     * const postBimElements = await prisma.postBimElement.findMany()
     * 
     * // Get first 10 PostBimElements
     * const postBimElements = await prisma.postBimElement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postBimElementWithIdOnly = await prisma.postBimElement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostBimElementFindManyArgs>(args?: SelectSubset<T, PostBimElementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostBimElement.
     * @param {PostBimElementCreateArgs} args - Arguments to create a PostBimElement.
     * @example
     * // Create one PostBimElement
     * const PostBimElement = await prisma.postBimElement.create({
     *   data: {
     *     // ... data to create a PostBimElement
     *   }
     * })
     * 
     */
    create<T extends PostBimElementCreateArgs>(args: SelectSubset<T, PostBimElementCreateArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostBimElements.
     * @param {PostBimElementCreateManyArgs} args - Arguments to create many PostBimElements.
     * @example
     * // Create many PostBimElements
     * const postBimElement = await prisma.postBimElement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostBimElementCreateManyArgs>(args?: SelectSubset<T, PostBimElementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostBimElements and returns the data saved in the database.
     * @param {PostBimElementCreateManyAndReturnArgs} args - Arguments to create many PostBimElements.
     * @example
     * // Create many PostBimElements
     * const postBimElement = await prisma.postBimElement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostBimElements and only return the `id`
     * const postBimElementWithIdOnly = await prisma.postBimElement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostBimElementCreateManyAndReturnArgs>(args?: SelectSubset<T, PostBimElementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostBimElement.
     * @param {PostBimElementDeleteArgs} args - Arguments to delete one PostBimElement.
     * @example
     * // Delete one PostBimElement
     * const PostBimElement = await prisma.postBimElement.delete({
     *   where: {
     *     // ... filter to delete one PostBimElement
     *   }
     * })
     * 
     */
    delete<T extends PostBimElementDeleteArgs>(args: SelectSubset<T, PostBimElementDeleteArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostBimElement.
     * @param {PostBimElementUpdateArgs} args - Arguments to update one PostBimElement.
     * @example
     * // Update one PostBimElement
     * const postBimElement = await prisma.postBimElement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostBimElementUpdateArgs>(args: SelectSubset<T, PostBimElementUpdateArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostBimElements.
     * @param {PostBimElementDeleteManyArgs} args - Arguments to filter PostBimElements to delete.
     * @example
     * // Delete a few PostBimElements
     * const { count } = await prisma.postBimElement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostBimElementDeleteManyArgs>(args?: SelectSubset<T, PostBimElementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostBimElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostBimElements
     * const postBimElement = await prisma.postBimElement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostBimElementUpdateManyArgs>(args: SelectSubset<T, PostBimElementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostBimElements and returns the data updated in the database.
     * @param {PostBimElementUpdateManyAndReturnArgs} args - Arguments to update many PostBimElements.
     * @example
     * // Update many PostBimElements
     * const postBimElement = await prisma.postBimElement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostBimElements and only return the `id`
     * const postBimElementWithIdOnly = await prisma.postBimElement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostBimElementUpdateManyAndReturnArgs>(args: SelectSubset<T, PostBimElementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostBimElement.
     * @param {PostBimElementUpsertArgs} args - Arguments to update or create a PostBimElement.
     * @example
     * // Update or create a PostBimElement
     * const postBimElement = await prisma.postBimElement.upsert({
     *   create: {
     *     // ... data to create a PostBimElement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostBimElement we want to update
     *   }
     * })
     */
    upsert<T extends PostBimElementUpsertArgs>(args: SelectSubset<T, PostBimElementUpsertArgs<ExtArgs>>): Prisma__PostBimElementClient<$Result.GetResult<Prisma.$PostBimElementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostBimElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementCountArgs} args - Arguments to filter PostBimElements to count.
     * @example
     * // Count the number of PostBimElements
     * const count = await prisma.postBimElement.count({
     *   where: {
     *     // ... the filter for the PostBimElements we want to count
     *   }
     * })
    **/
    count<T extends PostBimElementCountArgs>(
      args?: Subset<T, PostBimElementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostBimElementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostBimElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostBimElementAggregateArgs>(args: Subset<T, PostBimElementAggregateArgs>): Prisma.PrismaPromise<GetPostBimElementAggregateType<T>>

    /**
     * Group by PostBimElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostBimElementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostBimElementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostBimElementGroupByArgs['orderBy'] }
        : { orderBy?: PostBimElementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostBimElementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostBimElementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostBimElement model
   */
  readonly fields: PostBimElementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostBimElement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostBimElementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostBimElement model
   */
  interface PostBimElementFieldRefs {
    readonly id: FieldRef<"PostBimElement", 'String'>
    readonly elementId: FieldRef<"PostBimElement", 'String'>
    readonly elementType: FieldRef<"PostBimElement", 'String'>
    readonly elementName: FieldRef<"PostBimElement", 'String'>
    readonly discipline: FieldRef<"PostBimElement", 'BimDiscipline'>
    readonly properties: FieldRef<"PostBimElement", 'Json'>
    readonly postId: FieldRef<"PostBimElement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostBimElement findUnique
   */
  export type PostBimElementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter, which PostBimElement to fetch.
     */
    where: PostBimElementWhereUniqueInput
  }

  /**
   * PostBimElement findUniqueOrThrow
   */
  export type PostBimElementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter, which PostBimElement to fetch.
     */
    where: PostBimElementWhereUniqueInput
  }

  /**
   * PostBimElement findFirst
   */
  export type PostBimElementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter, which PostBimElement to fetch.
     */
    where?: PostBimElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostBimElements to fetch.
     */
    orderBy?: PostBimElementOrderByWithRelationInput | PostBimElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostBimElements.
     */
    cursor?: PostBimElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostBimElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostBimElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostBimElements.
     */
    distinct?: PostBimElementScalarFieldEnum | PostBimElementScalarFieldEnum[]
  }

  /**
   * PostBimElement findFirstOrThrow
   */
  export type PostBimElementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter, which PostBimElement to fetch.
     */
    where?: PostBimElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostBimElements to fetch.
     */
    orderBy?: PostBimElementOrderByWithRelationInput | PostBimElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostBimElements.
     */
    cursor?: PostBimElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostBimElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostBimElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostBimElements.
     */
    distinct?: PostBimElementScalarFieldEnum | PostBimElementScalarFieldEnum[]
  }

  /**
   * PostBimElement findMany
   */
  export type PostBimElementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter, which PostBimElements to fetch.
     */
    where?: PostBimElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostBimElements to fetch.
     */
    orderBy?: PostBimElementOrderByWithRelationInput | PostBimElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostBimElements.
     */
    cursor?: PostBimElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostBimElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostBimElements.
     */
    skip?: number
    distinct?: PostBimElementScalarFieldEnum | PostBimElementScalarFieldEnum[]
  }

  /**
   * PostBimElement create
   */
  export type PostBimElementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * The data needed to create a PostBimElement.
     */
    data: XOR<PostBimElementCreateInput, PostBimElementUncheckedCreateInput>
  }

  /**
   * PostBimElement createMany
   */
  export type PostBimElementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostBimElements.
     */
    data: PostBimElementCreateManyInput | PostBimElementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostBimElement createManyAndReturn
   */
  export type PostBimElementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * The data used to create many PostBimElements.
     */
    data: PostBimElementCreateManyInput | PostBimElementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostBimElement update
   */
  export type PostBimElementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * The data needed to update a PostBimElement.
     */
    data: XOR<PostBimElementUpdateInput, PostBimElementUncheckedUpdateInput>
    /**
     * Choose, which PostBimElement to update.
     */
    where: PostBimElementWhereUniqueInput
  }

  /**
   * PostBimElement updateMany
   */
  export type PostBimElementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostBimElements.
     */
    data: XOR<PostBimElementUpdateManyMutationInput, PostBimElementUncheckedUpdateManyInput>
    /**
     * Filter which PostBimElements to update
     */
    where?: PostBimElementWhereInput
    /**
     * Limit how many PostBimElements to update.
     */
    limit?: number
  }

  /**
   * PostBimElement updateManyAndReturn
   */
  export type PostBimElementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * The data used to update PostBimElements.
     */
    data: XOR<PostBimElementUpdateManyMutationInput, PostBimElementUncheckedUpdateManyInput>
    /**
     * Filter which PostBimElements to update
     */
    where?: PostBimElementWhereInput
    /**
     * Limit how many PostBimElements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostBimElement upsert
   */
  export type PostBimElementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * The filter to search for the PostBimElement to update in case it exists.
     */
    where: PostBimElementWhereUniqueInput
    /**
     * In case the PostBimElement found by the `where` argument doesn't exist, create a new PostBimElement with this data.
     */
    create: XOR<PostBimElementCreateInput, PostBimElementUncheckedCreateInput>
    /**
     * In case the PostBimElement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostBimElementUpdateInput, PostBimElementUncheckedUpdateInput>
  }

  /**
   * PostBimElement delete
   */
  export type PostBimElementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
    /**
     * Filter which PostBimElement to delete.
     */
    where: PostBimElementWhereUniqueInput
  }

  /**
   * PostBimElement deleteMany
   */
  export type PostBimElementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostBimElements to delete
     */
    where?: PostBimElementWhereInput
    /**
     * Limit how many PostBimElements to delete.
     */
    limit?: number
  }

  /**
   * PostBimElement without action
   */
  export type PostBimElementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostBimElement
     */
    select?: PostBimElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostBimElement
     */
    omit?: PostBimElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostBimElementInclude<ExtArgs> | null
  }


  /**
   * Model PostLike
   */

  export type AggregatePostLike = {
    _count: PostLikeCountAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  export type PostLikeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
  }

  export type PostLikeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
  }

  export type PostLikeCountAggregateOutputType = {
    id: number
    userId: number
    postId: number
    createdAt: number
    _all: number
  }


  export type PostLikeMinAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
  }

  export type PostLikeMaxAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
  }

  export type PostLikeCountAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
    _all?: true
  }

  export type PostLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLike to aggregate.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostLikes
    **/
    _count?: true | PostLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostLikeMaxAggregateInputType
  }

  export type GetPostLikeAggregateType<T extends PostLikeAggregateArgs> = {
        [P in keyof T & keyof AggregatePostLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostLike[P]>
      : GetScalarType<T[P], AggregatePostLike[P]>
  }




  export type PostLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithAggregationInput | PostLikeOrderByWithAggregationInput[]
    by: PostLikeScalarFieldEnum[] | PostLikeScalarFieldEnum
    having?: PostLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostLikeCountAggregateInputType | true
    _min?: PostLikeMinAggregateInputType
    _max?: PostLikeMaxAggregateInputType
  }

  export type PostLikeGroupByOutputType = {
    id: string
    userId: string
    postId: string
    createdAt: Date
    _count: PostLikeCountAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  type GetPostLikeGroupByPayload<T extends PostLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
            : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
        }
      >
    >


  export type PostLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postLike"]>

  export type PostLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postLike"]>

  export type PostLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postLike"]>

  export type PostLikeSelectScalar = {
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
  }

  export type PostLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "postId" | "createdAt", ExtArgs["result"]["postLike"]>
  export type PostLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      postId: string
      createdAt: Date
    }, ExtArgs["result"]["postLike"]>
    composites: {}
  }

  type PostLikeGetPayload<S extends boolean | null | undefined | PostLikeDefaultArgs> = $Result.GetResult<Prisma.$PostLikePayload, S>

  type PostLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostLikeCountAggregateInputType | true
    }

  export interface PostLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostLike'], meta: { name: 'PostLike' } }
    /**
     * Find zero or one PostLike that matches the filter.
     * @param {PostLikeFindUniqueArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostLikeFindUniqueArgs>(args: SelectSubset<T, PostLikeFindUniqueArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostLikeFindUniqueOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, PostLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostLikeFindFirstArgs>(args?: SelectSubset<T, PostLikeFindFirstArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, PostLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostLikes
     * const postLikes = await prisma.postLike.findMany()
     * 
     * // Get first 10 PostLikes
     * const postLikes = await prisma.postLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postLikeWithIdOnly = await prisma.postLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostLikeFindManyArgs>(args?: SelectSubset<T, PostLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostLike.
     * @param {PostLikeCreateArgs} args - Arguments to create a PostLike.
     * @example
     * // Create one PostLike
     * const PostLike = await prisma.postLike.create({
     *   data: {
     *     // ... data to create a PostLike
     *   }
     * })
     * 
     */
    create<T extends PostLikeCreateArgs>(args: SelectSubset<T, PostLikeCreateArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostLikes.
     * @param {PostLikeCreateManyArgs} args - Arguments to create many PostLikes.
     * @example
     * // Create many PostLikes
     * const postLike = await prisma.postLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostLikeCreateManyArgs>(args?: SelectSubset<T, PostLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostLikes and returns the data saved in the database.
     * @param {PostLikeCreateManyAndReturnArgs} args - Arguments to create many PostLikes.
     * @example
     * // Create many PostLikes
     * const postLike = await prisma.postLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostLikes and only return the `id`
     * const postLikeWithIdOnly = await prisma.postLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, PostLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostLike.
     * @param {PostLikeDeleteArgs} args - Arguments to delete one PostLike.
     * @example
     * // Delete one PostLike
     * const PostLike = await prisma.postLike.delete({
     *   where: {
     *     // ... filter to delete one PostLike
     *   }
     * })
     * 
     */
    delete<T extends PostLikeDeleteArgs>(args: SelectSubset<T, PostLikeDeleteArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostLike.
     * @param {PostLikeUpdateArgs} args - Arguments to update one PostLike.
     * @example
     * // Update one PostLike
     * const postLike = await prisma.postLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostLikeUpdateArgs>(args: SelectSubset<T, PostLikeUpdateArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostLikes.
     * @param {PostLikeDeleteManyArgs} args - Arguments to filter PostLikes to delete.
     * @example
     * // Delete a few PostLikes
     * const { count } = await prisma.postLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostLikeDeleteManyArgs>(args?: SelectSubset<T, PostLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostLikes
     * const postLike = await prisma.postLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostLikeUpdateManyArgs>(args: SelectSubset<T, PostLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostLikes and returns the data updated in the database.
     * @param {PostLikeUpdateManyAndReturnArgs} args - Arguments to update many PostLikes.
     * @example
     * // Update many PostLikes
     * const postLike = await prisma.postLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostLikes and only return the `id`
     * const postLikeWithIdOnly = await prisma.postLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, PostLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostLike.
     * @param {PostLikeUpsertArgs} args - Arguments to update or create a PostLike.
     * @example
     * // Update or create a PostLike
     * const postLike = await prisma.postLike.upsert({
     *   create: {
     *     // ... data to create a PostLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostLike we want to update
     *   }
     * })
     */
    upsert<T extends PostLikeUpsertArgs>(args: SelectSubset<T, PostLikeUpsertArgs<ExtArgs>>): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeCountArgs} args - Arguments to filter PostLikes to count.
     * @example
     * // Count the number of PostLikes
     * const count = await prisma.postLike.count({
     *   where: {
     *     // ... the filter for the PostLikes we want to count
     *   }
     * })
    **/
    count<T extends PostLikeCountArgs>(
      args?: Subset<T, PostLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostLikeAggregateArgs>(args: Subset<T, PostLikeAggregateArgs>): Prisma.PrismaPromise<GetPostLikeAggregateType<T>>

    /**
     * Group by PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostLikeGroupByArgs['orderBy'] }
        : { orderBy?: PostLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostLike model
   */
  readonly fields: PostLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostLike model
   */
  interface PostLikeFieldRefs {
    readonly id: FieldRef<"PostLike", 'String'>
    readonly userId: FieldRef<"PostLike", 'String'>
    readonly postId: FieldRef<"PostLike", 'String'>
    readonly createdAt: FieldRef<"PostLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PostLike findUnique
   */
  export type PostLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike findUniqueOrThrow
   */
  export type PostLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike findFirst
   */
  export type PostLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike findFirstOrThrow
   */
  export type PostLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike findMany
   */
  export type PostLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLikes to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike create
   */
  export type PostLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a PostLike.
     */
    data: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
  }

  /**
   * PostLike createMany
   */
  export type PostLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostLikes.
     */
    data: PostLikeCreateManyInput | PostLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostLike createManyAndReturn
   */
  export type PostLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * The data used to create many PostLikes.
     */
    data: PostLikeCreateManyInput | PostLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostLike update
   */
  export type PostLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a PostLike.
     */
    data: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
    /**
     * Choose, which PostLike to update.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike updateMany
   */
  export type PostLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostLikes.
     */
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostLikes to update
     */
    where?: PostLikeWhereInput
    /**
     * Limit how many PostLikes to update.
     */
    limit?: number
  }

  /**
   * PostLike updateManyAndReturn
   */
  export type PostLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * The data used to update PostLikes.
     */
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostLikes to update
     */
    where?: PostLikeWhereInput
    /**
     * Limit how many PostLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostLike upsert
   */
  export type PostLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the PostLike to update in case it exists.
     */
    where: PostLikeWhereUniqueInput
    /**
     * In case the PostLike found by the `where` argument doesn't exist, create a new PostLike with this data.
     */
    create: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
    /**
     * In case the PostLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
  }

  /**
   * PostLike delete
   */
  export type PostLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter which PostLike to delete.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike deleteMany
   */
  export type PostLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLikes to delete
     */
    where?: PostLikeWhereInput
    /**
     * Limit how many PostLikes to delete.
     */
    limit?: number
  }

  /**
   * PostLike without action
   */
  export type PostLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostLike
     */
    omit?: PostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
  }


  /**
   * Model PostComment
   */

  export type AggregatePostComment = {
    _count: PostCommentCountAggregateOutputType | null
    _min: PostCommentMinAggregateOutputType | null
    _max: PostCommentMaxAggregateOutputType | null
  }

  export type PostCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    postId: string | null
    parentCommentId: string | null
  }

  export type PostCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    postId: string | null
    parentCommentId: string | null
  }

  export type PostCommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    authorId: number
    postId: number
    parentCommentId: number
    _all: number
  }


  export type PostCommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    postId?: true
    parentCommentId?: true
  }

  export type PostCommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    postId?: true
    parentCommentId?: true
  }

  export type PostCommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    postId?: true
    parentCommentId?: true
    _all?: true
  }

  export type PostCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostComment to aggregate.
     */
    where?: PostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostComments to fetch.
     */
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostComments
    **/
    _count?: true | PostCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostCommentMaxAggregateInputType
  }

  export type GetPostCommentAggregateType<T extends PostCommentAggregateArgs> = {
        [P in keyof T & keyof AggregatePostComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostComment[P]>
      : GetScalarType<T[P], AggregatePostComment[P]>
  }




  export type PostCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostCommentWhereInput
    orderBy?: PostCommentOrderByWithAggregationInput | PostCommentOrderByWithAggregationInput[]
    by: PostCommentScalarFieldEnum[] | PostCommentScalarFieldEnum
    having?: PostCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCommentCountAggregateInputType | true
    _min?: PostCommentMinAggregateInputType
    _max?: PostCommentMaxAggregateInputType
  }

  export type PostCommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    authorId: string
    postId: string
    parentCommentId: string | null
    _count: PostCommentCountAggregateOutputType | null
    _min: PostCommentMinAggregateOutputType | null
    _max: PostCommentMaxAggregateOutputType | null
  }

  type GetPostCommentGroupByPayload<T extends PostCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostCommentGroupByOutputType[P]>
            : GetScalarType<T[P], PostCommentGroupByOutputType[P]>
        }
      >
    >


  export type PostCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    postId?: boolean
    parentCommentId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
    replies?: boolean | PostComment$repliesArgs<ExtArgs>
    _count?: boolean | PostCommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postComment"]>

  export type PostCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    postId?: boolean
    parentCommentId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
  }, ExtArgs["result"]["postComment"]>

  export type PostCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    postId?: boolean
    parentCommentId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
  }, ExtArgs["result"]["postComment"]>

  export type PostCommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    postId?: boolean
    parentCommentId?: boolean
  }

  export type PostCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "authorId" | "postId" | "parentCommentId", ExtArgs["result"]["postComment"]>
  export type PostCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
    replies?: boolean | PostComment$repliesArgs<ExtArgs>
    _count?: boolean | PostCommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
  }
  export type PostCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    parentComment?: boolean | PostComment$parentCommentArgs<ExtArgs>
  }

  export type $PostCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostComment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
      parentComment: Prisma.$PostCommentPayload<ExtArgs> | null
      replies: Prisma.$PostCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      authorId: string
      postId: string
      parentCommentId: string | null
    }, ExtArgs["result"]["postComment"]>
    composites: {}
  }

  type PostCommentGetPayload<S extends boolean | null | undefined | PostCommentDefaultArgs> = $Result.GetResult<Prisma.$PostCommentPayload, S>

  type PostCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCommentCountAggregateInputType | true
    }

  export interface PostCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostComment'], meta: { name: 'PostComment' } }
    /**
     * Find zero or one PostComment that matches the filter.
     * @param {PostCommentFindUniqueArgs} args - Arguments to find a PostComment
     * @example
     * // Get one PostComment
     * const postComment = await prisma.postComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostCommentFindUniqueArgs>(args: SelectSubset<T, PostCommentFindUniqueArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostCommentFindUniqueOrThrowArgs} args - Arguments to find a PostComment
     * @example
     * // Get one PostComment
     * const postComment = await prisma.postComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, PostCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentFindFirstArgs} args - Arguments to find a PostComment
     * @example
     * // Get one PostComment
     * const postComment = await prisma.postComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostCommentFindFirstArgs>(args?: SelectSubset<T, PostCommentFindFirstArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentFindFirstOrThrowArgs} args - Arguments to find a PostComment
     * @example
     * // Get one PostComment
     * const postComment = await prisma.postComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, PostCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostComments
     * const postComments = await prisma.postComment.findMany()
     * 
     * // Get first 10 PostComments
     * const postComments = await prisma.postComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postCommentWithIdOnly = await prisma.postComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostCommentFindManyArgs>(args?: SelectSubset<T, PostCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostComment.
     * @param {PostCommentCreateArgs} args - Arguments to create a PostComment.
     * @example
     * // Create one PostComment
     * const PostComment = await prisma.postComment.create({
     *   data: {
     *     // ... data to create a PostComment
     *   }
     * })
     * 
     */
    create<T extends PostCommentCreateArgs>(args: SelectSubset<T, PostCommentCreateArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostComments.
     * @param {PostCommentCreateManyArgs} args - Arguments to create many PostComments.
     * @example
     * // Create many PostComments
     * const postComment = await prisma.postComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCommentCreateManyArgs>(args?: SelectSubset<T, PostCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostComments and returns the data saved in the database.
     * @param {PostCommentCreateManyAndReturnArgs} args - Arguments to create many PostComments.
     * @example
     * // Create many PostComments
     * const postComment = await prisma.postComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostComments and only return the `id`
     * const postCommentWithIdOnly = await prisma.postComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostComment.
     * @param {PostCommentDeleteArgs} args - Arguments to delete one PostComment.
     * @example
     * // Delete one PostComment
     * const PostComment = await prisma.postComment.delete({
     *   where: {
     *     // ... filter to delete one PostComment
     *   }
     * })
     * 
     */
    delete<T extends PostCommentDeleteArgs>(args: SelectSubset<T, PostCommentDeleteArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostComment.
     * @param {PostCommentUpdateArgs} args - Arguments to update one PostComment.
     * @example
     * // Update one PostComment
     * const postComment = await prisma.postComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostCommentUpdateArgs>(args: SelectSubset<T, PostCommentUpdateArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostComments.
     * @param {PostCommentDeleteManyArgs} args - Arguments to filter PostComments to delete.
     * @example
     * // Delete a few PostComments
     * const { count } = await prisma.postComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostCommentDeleteManyArgs>(args?: SelectSubset<T, PostCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostComments
     * const postComment = await prisma.postComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostCommentUpdateManyArgs>(args: SelectSubset<T, PostCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostComments and returns the data updated in the database.
     * @param {PostCommentUpdateManyAndReturnArgs} args - Arguments to update many PostComments.
     * @example
     * // Update many PostComments
     * const postComment = await prisma.postComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostComments and only return the `id`
     * const postCommentWithIdOnly = await prisma.postComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, PostCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostComment.
     * @param {PostCommentUpsertArgs} args - Arguments to update or create a PostComment.
     * @example
     * // Update or create a PostComment
     * const postComment = await prisma.postComment.upsert({
     *   create: {
     *     // ... data to create a PostComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostComment we want to update
     *   }
     * })
     */
    upsert<T extends PostCommentUpsertArgs>(args: SelectSubset<T, PostCommentUpsertArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentCountArgs} args - Arguments to filter PostComments to count.
     * @example
     * // Count the number of PostComments
     * const count = await prisma.postComment.count({
     *   where: {
     *     // ... the filter for the PostComments we want to count
     *   }
     * })
    **/
    count<T extends PostCommentCountArgs>(
      args?: Subset<T, PostCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostCommentAggregateArgs>(args: Subset<T, PostCommentAggregateArgs>): Prisma.PrismaPromise<GetPostCommentAggregateType<T>>

    /**
     * Group by PostComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostCommentGroupByArgs['orderBy'] }
        : { orderBy?: PostCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostComment model
   */
  readonly fields: PostCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parentComment<T extends PostComment$parentCommentArgs<ExtArgs> = {}>(args?: Subset<T, PostComment$parentCommentArgs<ExtArgs>>): Prisma__PostCommentClient<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends PostComment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, PostComment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostComment model
   */
  interface PostCommentFieldRefs {
    readonly id: FieldRef<"PostComment", 'String'>
    readonly content: FieldRef<"PostComment", 'String'>
    readonly createdAt: FieldRef<"PostComment", 'DateTime'>
    readonly updatedAt: FieldRef<"PostComment", 'DateTime'>
    readonly authorId: FieldRef<"PostComment", 'String'>
    readonly postId: FieldRef<"PostComment", 'String'>
    readonly parentCommentId: FieldRef<"PostComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostComment findUnique
   */
  export type PostCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter, which PostComment to fetch.
     */
    where: PostCommentWhereUniqueInput
  }

  /**
   * PostComment findUniqueOrThrow
   */
  export type PostCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter, which PostComment to fetch.
     */
    where: PostCommentWhereUniqueInput
  }

  /**
   * PostComment findFirst
   */
  export type PostCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter, which PostComment to fetch.
     */
    where?: PostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostComments to fetch.
     */
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostComments.
     */
    cursor?: PostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostComments.
     */
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * PostComment findFirstOrThrow
   */
  export type PostCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter, which PostComment to fetch.
     */
    where?: PostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostComments to fetch.
     */
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostComments.
     */
    cursor?: PostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostComments.
     */
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * PostComment findMany
   */
  export type PostCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter, which PostComments to fetch.
     */
    where?: PostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostComments to fetch.
     */
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostComments.
     */
    cursor?: PostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostComments.
     */
    skip?: number
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * PostComment create
   */
  export type PostCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a PostComment.
     */
    data: XOR<PostCommentCreateInput, PostCommentUncheckedCreateInput>
  }

  /**
   * PostComment createMany
   */
  export type PostCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostComments.
     */
    data: PostCommentCreateManyInput | PostCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostComment createManyAndReturn
   */
  export type PostCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * The data used to create many PostComments.
     */
    data: PostCommentCreateManyInput | PostCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostComment update
   */
  export type PostCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a PostComment.
     */
    data: XOR<PostCommentUpdateInput, PostCommentUncheckedUpdateInput>
    /**
     * Choose, which PostComment to update.
     */
    where: PostCommentWhereUniqueInput
  }

  /**
   * PostComment updateMany
   */
  export type PostCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostComments.
     */
    data: XOR<PostCommentUpdateManyMutationInput, PostCommentUncheckedUpdateManyInput>
    /**
     * Filter which PostComments to update
     */
    where?: PostCommentWhereInput
    /**
     * Limit how many PostComments to update.
     */
    limit?: number
  }

  /**
   * PostComment updateManyAndReturn
   */
  export type PostCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * The data used to update PostComments.
     */
    data: XOR<PostCommentUpdateManyMutationInput, PostCommentUncheckedUpdateManyInput>
    /**
     * Filter which PostComments to update
     */
    where?: PostCommentWhereInput
    /**
     * Limit how many PostComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostComment upsert
   */
  export type PostCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the PostComment to update in case it exists.
     */
    where: PostCommentWhereUniqueInput
    /**
     * In case the PostComment found by the `where` argument doesn't exist, create a new PostComment with this data.
     */
    create: XOR<PostCommentCreateInput, PostCommentUncheckedCreateInput>
    /**
     * In case the PostComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostCommentUpdateInput, PostCommentUncheckedUpdateInput>
  }

  /**
   * PostComment delete
   */
  export type PostCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    /**
     * Filter which PostComment to delete.
     */
    where: PostCommentWhereUniqueInput
  }

  /**
   * PostComment deleteMany
   */
  export type PostCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostComments to delete
     */
    where?: PostCommentWhereInput
    /**
     * Limit how many PostComments to delete.
     */
    limit?: number
  }

  /**
   * PostComment.parentComment
   */
  export type PostComment$parentCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    where?: PostCommentWhereInput
  }

  /**
   * PostComment.replies
   */
  export type PostComment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
    where?: PostCommentWhereInput
    orderBy?: PostCommentOrderByWithRelationInput | PostCommentOrderByWithRelationInput[]
    cursor?: PostCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostCommentScalarFieldEnum | PostCommentScalarFieldEnum[]
  }

  /**
   * PostComment without action
   */
  export type PostCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostComment
     */
    select?: PostCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostComment
     */
    omit?: PostCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostCommentInclude<ExtArgs> | null
  }


  /**
   * Model PostShare
   */

  export type AggregatePostShare = {
    _count: PostShareCountAggregateOutputType | null
    _min: PostShareMinAggregateOutputType | null
    _max: PostShareMaxAggregateOutputType | null
  }

  export type PostShareMinAggregateOutputType = {
    id: string | null
    comment: string | null
    createdAt: Date | null
    userId: string | null
    postId: string | null
  }

  export type PostShareMaxAggregateOutputType = {
    id: string | null
    comment: string | null
    createdAt: Date | null
    userId: string | null
    postId: string | null
  }

  export type PostShareCountAggregateOutputType = {
    id: number
    comment: number
    createdAt: number
    userId: number
    postId: number
    _all: number
  }


  export type PostShareMinAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type PostShareMaxAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type PostShareCountAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    userId?: true
    postId?: true
    _all?: true
  }

  export type PostShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostShare to aggregate.
     */
    where?: PostShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostShares to fetch.
     */
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostShares
    **/
    _count?: true | PostShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostShareMaxAggregateInputType
  }

  export type GetPostShareAggregateType<T extends PostShareAggregateArgs> = {
        [P in keyof T & keyof AggregatePostShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostShare[P]>
      : GetScalarType<T[P], AggregatePostShare[P]>
  }




  export type PostShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostShareWhereInput
    orderBy?: PostShareOrderByWithAggregationInput | PostShareOrderByWithAggregationInput[]
    by: PostShareScalarFieldEnum[] | PostShareScalarFieldEnum
    having?: PostShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostShareCountAggregateInputType | true
    _min?: PostShareMinAggregateInputType
    _max?: PostShareMaxAggregateInputType
  }

  export type PostShareGroupByOutputType = {
    id: string
    comment: string | null
    createdAt: Date
    userId: string
    postId: string
    _count: PostShareCountAggregateOutputType | null
    _min: PostShareMinAggregateOutputType | null
    _max: PostShareMaxAggregateOutputType | null
  }

  type GetPostShareGroupByPayload<T extends PostShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostShareGroupByOutputType[P]>
            : GetScalarType<T[P], PostShareGroupByOutputType[P]>
        }
      >
    >


  export type PostShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postShare"]>

  export type PostShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postShare"]>

  export type PostShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postShare"]>

  export type PostShareSelectScalar = {
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
  }

  export type PostShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "comment" | "createdAt" | "userId" | "postId", ExtArgs["result"]["postShare"]>
  export type PostShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostShare"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      comment: string | null
      createdAt: Date
      userId: string
      postId: string
    }, ExtArgs["result"]["postShare"]>
    composites: {}
  }

  type PostShareGetPayload<S extends boolean | null | undefined | PostShareDefaultArgs> = $Result.GetResult<Prisma.$PostSharePayload, S>

  type PostShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostShareCountAggregateInputType | true
    }

  export interface PostShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostShare'], meta: { name: 'PostShare' } }
    /**
     * Find zero or one PostShare that matches the filter.
     * @param {PostShareFindUniqueArgs} args - Arguments to find a PostShare
     * @example
     * // Get one PostShare
     * const postShare = await prisma.postShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostShareFindUniqueArgs>(args: SelectSubset<T, PostShareFindUniqueArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostShareFindUniqueOrThrowArgs} args - Arguments to find a PostShare
     * @example
     * // Get one PostShare
     * const postShare = await prisma.postShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostShareFindUniqueOrThrowArgs>(args: SelectSubset<T, PostShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareFindFirstArgs} args - Arguments to find a PostShare
     * @example
     * // Get one PostShare
     * const postShare = await prisma.postShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostShareFindFirstArgs>(args?: SelectSubset<T, PostShareFindFirstArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareFindFirstOrThrowArgs} args - Arguments to find a PostShare
     * @example
     * // Get one PostShare
     * const postShare = await prisma.postShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostShareFindFirstOrThrowArgs>(args?: SelectSubset<T, PostShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostShares
     * const postShares = await prisma.postShare.findMany()
     * 
     * // Get first 10 PostShares
     * const postShares = await prisma.postShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postShareWithIdOnly = await prisma.postShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostShareFindManyArgs>(args?: SelectSubset<T, PostShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostShare.
     * @param {PostShareCreateArgs} args - Arguments to create a PostShare.
     * @example
     * // Create one PostShare
     * const PostShare = await prisma.postShare.create({
     *   data: {
     *     // ... data to create a PostShare
     *   }
     * })
     * 
     */
    create<T extends PostShareCreateArgs>(args: SelectSubset<T, PostShareCreateArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostShares.
     * @param {PostShareCreateManyArgs} args - Arguments to create many PostShares.
     * @example
     * // Create many PostShares
     * const postShare = await prisma.postShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostShareCreateManyArgs>(args?: SelectSubset<T, PostShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostShares and returns the data saved in the database.
     * @param {PostShareCreateManyAndReturnArgs} args - Arguments to create many PostShares.
     * @example
     * // Create many PostShares
     * const postShare = await prisma.postShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostShares and only return the `id`
     * const postShareWithIdOnly = await prisma.postShare.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostShareCreateManyAndReturnArgs>(args?: SelectSubset<T, PostShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostShare.
     * @param {PostShareDeleteArgs} args - Arguments to delete one PostShare.
     * @example
     * // Delete one PostShare
     * const PostShare = await prisma.postShare.delete({
     *   where: {
     *     // ... filter to delete one PostShare
     *   }
     * })
     * 
     */
    delete<T extends PostShareDeleteArgs>(args: SelectSubset<T, PostShareDeleteArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostShare.
     * @param {PostShareUpdateArgs} args - Arguments to update one PostShare.
     * @example
     * // Update one PostShare
     * const postShare = await prisma.postShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostShareUpdateArgs>(args: SelectSubset<T, PostShareUpdateArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostShares.
     * @param {PostShareDeleteManyArgs} args - Arguments to filter PostShares to delete.
     * @example
     * // Delete a few PostShares
     * const { count } = await prisma.postShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostShareDeleteManyArgs>(args?: SelectSubset<T, PostShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostShares
     * const postShare = await prisma.postShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostShareUpdateManyArgs>(args: SelectSubset<T, PostShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostShares and returns the data updated in the database.
     * @param {PostShareUpdateManyAndReturnArgs} args - Arguments to update many PostShares.
     * @example
     * // Update many PostShares
     * const postShare = await prisma.postShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostShares and only return the `id`
     * const postShareWithIdOnly = await prisma.postShare.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostShareUpdateManyAndReturnArgs>(args: SelectSubset<T, PostShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostShare.
     * @param {PostShareUpsertArgs} args - Arguments to update or create a PostShare.
     * @example
     * // Update or create a PostShare
     * const postShare = await prisma.postShare.upsert({
     *   create: {
     *     // ... data to create a PostShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostShare we want to update
     *   }
     * })
     */
    upsert<T extends PostShareUpsertArgs>(args: SelectSubset<T, PostShareUpsertArgs<ExtArgs>>): Prisma__PostShareClient<$Result.GetResult<Prisma.$PostSharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareCountArgs} args - Arguments to filter PostShares to count.
     * @example
     * // Count the number of PostShares
     * const count = await prisma.postShare.count({
     *   where: {
     *     // ... the filter for the PostShares we want to count
     *   }
     * })
    **/
    count<T extends PostShareCountArgs>(
      args?: Subset<T, PostShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostShareAggregateArgs>(args: Subset<T, PostShareAggregateArgs>): Prisma.PrismaPromise<GetPostShareAggregateType<T>>

    /**
     * Group by PostShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostShareGroupByArgs['orderBy'] }
        : { orderBy?: PostShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostShare model
   */
  readonly fields: PostShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostShare model
   */
  interface PostShareFieldRefs {
    readonly id: FieldRef<"PostShare", 'String'>
    readonly comment: FieldRef<"PostShare", 'String'>
    readonly createdAt: FieldRef<"PostShare", 'DateTime'>
    readonly userId: FieldRef<"PostShare", 'String'>
    readonly postId: FieldRef<"PostShare", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostShare findUnique
   */
  export type PostShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter, which PostShare to fetch.
     */
    where: PostShareWhereUniqueInput
  }

  /**
   * PostShare findUniqueOrThrow
   */
  export type PostShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter, which PostShare to fetch.
     */
    where: PostShareWhereUniqueInput
  }

  /**
   * PostShare findFirst
   */
  export type PostShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter, which PostShare to fetch.
     */
    where?: PostShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostShares to fetch.
     */
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostShares.
     */
    cursor?: PostShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostShares.
     */
    distinct?: PostShareScalarFieldEnum | PostShareScalarFieldEnum[]
  }

  /**
   * PostShare findFirstOrThrow
   */
  export type PostShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter, which PostShare to fetch.
     */
    where?: PostShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostShares to fetch.
     */
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostShares.
     */
    cursor?: PostShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostShares.
     */
    distinct?: PostShareScalarFieldEnum | PostShareScalarFieldEnum[]
  }

  /**
   * PostShare findMany
   */
  export type PostShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter, which PostShares to fetch.
     */
    where?: PostShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostShares to fetch.
     */
    orderBy?: PostShareOrderByWithRelationInput | PostShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostShares.
     */
    cursor?: PostShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostShares.
     */
    skip?: number
    distinct?: PostShareScalarFieldEnum | PostShareScalarFieldEnum[]
  }

  /**
   * PostShare create
   */
  export type PostShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * The data needed to create a PostShare.
     */
    data: XOR<PostShareCreateInput, PostShareUncheckedCreateInput>
  }

  /**
   * PostShare createMany
   */
  export type PostShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostShares.
     */
    data: PostShareCreateManyInput | PostShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostShare createManyAndReturn
   */
  export type PostShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * The data used to create many PostShares.
     */
    data: PostShareCreateManyInput | PostShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostShare update
   */
  export type PostShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * The data needed to update a PostShare.
     */
    data: XOR<PostShareUpdateInput, PostShareUncheckedUpdateInput>
    /**
     * Choose, which PostShare to update.
     */
    where: PostShareWhereUniqueInput
  }

  /**
   * PostShare updateMany
   */
  export type PostShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostShares.
     */
    data: XOR<PostShareUpdateManyMutationInput, PostShareUncheckedUpdateManyInput>
    /**
     * Filter which PostShares to update
     */
    where?: PostShareWhereInput
    /**
     * Limit how many PostShares to update.
     */
    limit?: number
  }

  /**
   * PostShare updateManyAndReturn
   */
  export type PostShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * The data used to update PostShares.
     */
    data: XOR<PostShareUpdateManyMutationInput, PostShareUncheckedUpdateManyInput>
    /**
     * Filter which PostShares to update
     */
    where?: PostShareWhereInput
    /**
     * Limit how many PostShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostShare upsert
   */
  export type PostShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * The filter to search for the PostShare to update in case it exists.
     */
    where: PostShareWhereUniqueInput
    /**
     * In case the PostShare found by the `where` argument doesn't exist, create a new PostShare with this data.
     */
    create: XOR<PostShareCreateInput, PostShareUncheckedCreateInput>
    /**
     * In case the PostShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostShareUpdateInput, PostShareUncheckedUpdateInput>
  }

  /**
   * PostShare delete
   */
  export type PostShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
    /**
     * Filter which PostShare to delete.
     */
    where: PostShareWhereUniqueInput
  }

  /**
   * PostShare deleteMany
   */
  export type PostShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostShares to delete
     */
    where?: PostShareWhereInput
    /**
     * Limit how many PostShares to delete.
     */
    limit?: number
  }

  /**
   * PostShare without action
   */
  export type PostShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostShare
     */
    select?: PostShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostShare
     */
    omit?: PostShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostShareInclude<ExtArgs> | null
  }


  /**
   * Model PostMention
   */

  export type AggregatePostMention = {
    _count: PostMentionCountAggregateOutputType | null
    _min: PostMentionMinAggregateOutputType | null
    _max: PostMentionMaxAggregateOutputType | null
  }

  export type PostMentionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    mentionedUserId: string | null
    mentioningUserId: string | null
    postId: string | null
  }

  export type PostMentionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    mentionedUserId: string | null
    mentioningUserId: string | null
    postId: string | null
  }

  export type PostMentionCountAggregateOutputType = {
    id: number
    createdAt: number
    mentionedUserId: number
    mentioningUserId: number
    postId: number
    _all: number
  }


  export type PostMentionMinAggregateInputType = {
    id?: true
    createdAt?: true
    mentionedUserId?: true
    mentioningUserId?: true
    postId?: true
  }

  export type PostMentionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    mentionedUserId?: true
    mentioningUserId?: true
    postId?: true
  }

  export type PostMentionCountAggregateInputType = {
    id?: true
    createdAt?: true
    mentionedUserId?: true
    mentioningUserId?: true
    postId?: true
    _all?: true
  }

  export type PostMentionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostMention to aggregate.
     */
    where?: PostMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMentions to fetch.
     */
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostMentions
    **/
    _count?: true | PostMentionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMentionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMentionMaxAggregateInputType
  }

  export type GetPostMentionAggregateType<T extends PostMentionAggregateArgs> = {
        [P in keyof T & keyof AggregatePostMention]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostMention[P]>
      : GetScalarType<T[P], AggregatePostMention[P]>
  }




  export type PostMentionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostMentionWhereInput
    orderBy?: PostMentionOrderByWithAggregationInput | PostMentionOrderByWithAggregationInput[]
    by: PostMentionScalarFieldEnum[] | PostMentionScalarFieldEnum
    having?: PostMentionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostMentionCountAggregateInputType | true
    _min?: PostMentionMinAggregateInputType
    _max?: PostMentionMaxAggregateInputType
  }

  export type PostMentionGroupByOutputType = {
    id: string
    createdAt: Date
    mentionedUserId: string
    mentioningUserId: string
    postId: string
    _count: PostMentionCountAggregateOutputType | null
    _min: PostMentionMinAggregateOutputType | null
    _max: PostMentionMaxAggregateOutputType | null
  }

  type GetPostMentionGroupByPayload<T extends PostMentionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostMentionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostMentionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostMentionGroupByOutputType[P]>
            : GetScalarType<T[P], PostMentionGroupByOutputType[P]>
        }
      >
    >


  export type PostMentionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    mentionedUserId?: boolean
    mentioningUserId?: boolean
    postId?: boolean
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMention"]>

  export type PostMentionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    mentionedUserId?: boolean
    mentioningUserId?: boolean
    postId?: boolean
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMention"]>

  export type PostMentionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    mentionedUserId?: boolean
    mentioningUserId?: boolean
    postId?: boolean
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postMention"]>

  export type PostMentionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    mentionedUserId?: boolean
    mentioningUserId?: boolean
    postId?: boolean
  }

  export type PostMentionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "mentionedUserId" | "mentioningUserId" | "postId", ExtArgs["result"]["postMention"]>
  export type PostMentionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostMentionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostMentionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mentionedUser?: boolean | UserDefaultArgs<ExtArgs>
    mentioningUser?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostMentionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostMention"
    objects: {
      mentionedUser: Prisma.$UserPayload<ExtArgs>
      mentioningUser: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      mentionedUserId: string
      mentioningUserId: string
      postId: string
    }, ExtArgs["result"]["postMention"]>
    composites: {}
  }

  type PostMentionGetPayload<S extends boolean | null | undefined | PostMentionDefaultArgs> = $Result.GetResult<Prisma.$PostMentionPayload, S>

  type PostMentionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostMentionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostMentionCountAggregateInputType | true
    }

  export interface PostMentionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostMention'], meta: { name: 'PostMention' } }
    /**
     * Find zero or one PostMention that matches the filter.
     * @param {PostMentionFindUniqueArgs} args - Arguments to find a PostMention
     * @example
     * // Get one PostMention
     * const postMention = await prisma.postMention.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostMentionFindUniqueArgs>(args: SelectSubset<T, PostMentionFindUniqueArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostMention that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostMentionFindUniqueOrThrowArgs} args - Arguments to find a PostMention
     * @example
     * // Get one PostMention
     * const postMention = await prisma.postMention.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostMentionFindUniqueOrThrowArgs>(args: SelectSubset<T, PostMentionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostMention that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionFindFirstArgs} args - Arguments to find a PostMention
     * @example
     * // Get one PostMention
     * const postMention = await prisma.postMention.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostMentionFindFirstArgs>(args?: SelectSubset<T, PostMentionFindFirstArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostMention that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionFindFirstOrThrowArgs} args - Arguments to find a PostMention
     * @example
     * // Get one PostMention
     * const postMention = await prisma.postMention.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostMentionFindFirstOrThrowArgs>(args?: SelectSubset<T, PostMentionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostMentions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostMentions
     * const postMentions = await prisma.postMention.findMany()
     * 
     * // Get first 10 PostMentions
     * const postMentions = await prisma.postMention.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postMentionWithIdOnly = await prisma.postMention.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostMentionFindManyArgs>(args?: SelectSubset<T, PostMentionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostMention.
     * @param {PostMentionCreateArgs} args - Arguments to create a PostMention.
     * @example
     * // Create one PostMention
     * const PostMention = await prisma.postMention.create({
     *   data: {
     *     // ... data to create a PostMention
     *   }
     * })
     * 
     */
    create<T extends PostMentionCreateArgs>(args: SelectSubset<T, PostMentionCreateArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostMentions.
     * @param {PostMentionCreateManyArgs} args - Arguments to create many PostMentions.
     * @example
     * // Create many PostMentions
     * const postMention = await prisma.postMention.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostMentionCreateManyArgs>(args?: SelectSubset<T, PostMentionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostMentions and returns the data saved in the database.
     * @param {PostMentionCreateManyAndReturnArgs} args - Arguments to create many PostMentions.
     * @example
     * // Create many PostMentions
     * const postMention = await prisma.postMention.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostMentions and only return the `id`
     * const postMentionWithIdOnly = await prisma.postMention.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostMentionCreateManyAndReturnArgs>(args?: SelectSubset<T, PostMentionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostMention.
     * @param {PostMentionDeleteArgs} args - Arguments to delete one PostMention.
     * @example
     * // Delete one PostMention
     * const PostMention = await prisma.postMention.delete({
     *   where: {
     *     // ... filter to delete one PostMention
     *   }
     * })
     * 
     */
    delete<T extends PostMentionDeleteArgs>(args: SelectSubset<T, PostMentionDeleteArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostMention.
     * @param {PostMentionUpdateArgs} args - Arguments to update one PostMention.
     * @example
     * // Update one PostMention
     * const postMention = await prisma.postMention.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostMentionUpdateArgs>(args: SelectSubset<T, PostMentionUpdateArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostMentions.
     * @param {PostMentionDeleteManyArgs} args - Arguments to filter PostMentions to delete.
     * @example
     * // Delete a few PostMentions
     * const { count } = await prisma.postMention.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostMentionDeleteManyArgs>(args?: SelectSubset<T, PostMentionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostMentions
     * const postMention = await prisma.postMention.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostMentionUpdateManyArgs>(args: SelectSubset<T, PostMentionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMentions and returns the data updated in the database.
     * @param {PostMentionUpdateManyAndReturnArgs} args - Arguments to update many PostMentions.
     * @example
     * // Update many PostMentions
     * const postMention = await prisma.postMention.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostMentions and only return the `id`
     * const postMentionWithIdOnly = await prisma.postMention.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostMentionUpdateManyAndReturnArgs>(args: SelectSubset<T, PostMentionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostMention.
     * @param {PostMentionUpsertArgs} args - Arguments to update or create a PostMention.
     * @example
     * // Update or create a PostMention
     * const postMention = await prisma.postMention.upsert({
     *   create: {
     *     // ... data to create a PostMention
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostMention we want to update
     *   }
     * })
     */
    upsert<T extends PostMentionUpsertArgs>(args: SelectSubset<T, PostMentionUpsertArgs<ExtArgs>>): Prisma__PostMentionClient<$Result.GetResult<Prisma.$PostMentionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostMentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionCountArgs} args - Arguments to filter PostMentions to count.
     * @example
     * // Count the number of PostMentions
     * const count = await prisma.postMention.count({
     *   where: {
     *     // ... the filter for the PostMentions we want to count
     *   }
     * })
    **/
    count<T extends PostMentionCountArgs>(
      args?: Subset<T, PostMentionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostMentionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostMention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostMentionAggregateArgs>(args: Subset<T, PostMentionAggregateArgs>): Prisma.PrismaPromise<GetPostMentionAggregateType<T>>

    /**
     * Group by PostMention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMentionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostMentionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostMentionGroupByArgs['orderBy'] }
        : { orderBy?: PostMentionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostMentionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostMentionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostMention model
   */
  readonly fields: PostMentionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostMention.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostMentionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mentionedUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    mentioningUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostMention model
   */
  interface PostMentionFieldRefs {
    readonly id: FieldRef<"PostMention", 'String'>
    readonly createdAt: FieldRef<"PostMention", 'DateTime'>
    readonly mentionedUserId: FieldRef<"PostMention", 'String'>
    readonly mentioningUserId: FieldRef<"PostMention", 'String'>
    readonly postId: FieldRef<"PostMention", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostMention findUnique
   */
  export type PostMentionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter, which PostMention to fetch.
     */
    where: PostMentionWhereUniqueInput
  }

  /**
   * PostMention findUniqueOrThrow
   */
  export type PostMentionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter, which PostMention to fetch.
     */
    where: PostMentionWhereUniqueInput
  }

  /**
   * PostMention findFirst
   */
  export type PostMentionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter, which PostMention to fetch.
     */
    where?: PostMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMentions to fetch.
     */
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMentions.
     */
    cursor?: PostMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMentions.
     */
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * PostMention findFirstOrThrow
   */
  export type PostMentionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter, which PostMention to fetch.
     */
    where?: PostMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMentions to fetch.
     */
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMentions.
     */
    cursor?: PostMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMentions.
     */
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * PostMention findMany
   */
  export type PostMentionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter, which PostMentions to fetch.
     */
    where?: PostMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMentions to fetch.
     */
    orderBy?: PostMentionOrderByWithRelationInput | PostMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostMentions.
     */
    cursor?: PostMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMentions.
     */
    skip?: number
    distinct?: PostMentionScalarFieldEnum | PostMentionScalarFieldEnum[]
  }

  /**
   * PostMention create
   */
  export type PostMentionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * The data needed to create a PostMention.
     */
    data: XOR<PostMentionCreateInput, PostMentionUncheckedCreateInput>
  }

  /**
   * PostMention createMany
   */
  export type PostMentionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostMentions.
     */
    data: PostMentionCreateManyInput | PostMentionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostMention createManyAndReturn
   */
  export type PostMentionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * The data used to create many PostMentions.
     */
    data: PostMentionCreateManyInput | PostMentionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostMention update
   */
  export type PostMentionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * The data needed to update a PostMention.
     */
    data: XOR<PostMentionUpdateInput, PostMentionUncheckedUpdateInput>
    /**
     * Choose, which PostMention to update.
     */
    where: PostMentionWhereUniqueInput
  }

  /**
   * PostMention updateMany
   */
  export type PostMentionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostMentions.
     */
    data: XOR<PostMentionUpdateManyMutationInput, PostMentionUncheckedUpdateManyInput>
    /**
     * Filter which PostMentions to update
     */
    where?: PostMentionWhereInput
    /**
     * Limit how many PostMentions to update.
     */
    limit?: number
  }

  /**
   * PostMention updateManyAndReturn
   */
  export type PostMentionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * The data used to update PostMentions.
     */
    data: XOR<PostMentionUpdateManyMutationInput, PostMentionUncheckedUpdateManyInput>
    /**
     * Filter which PostMentions to update
     */
    where?: PostMentionWhereInput
    /**
     * Limit how many PostMentions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostMention upsert
   */
  export type PostMentionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * The filter to search for the PostMention to update in case it exists.
     */
    where: PostMentionWhereUniqueInput
    /**
     * In case the PostMention found by the `where` argument doesn't exist, create a new PostMention with this data.
     */
    create: XOR<PostMentionCreateInput, PostMentionUncheckedCreateInput>
    /**
     * In case the PostMention was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostMentionUpdateInput, PostMentionUncheckedUpdateInput>
  }

  /**
   * PostMention delete
   */
  export type PostMentionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
    /**
     * Filter which PostMention to delete.
     */
    where: PostMentionWhereUniqueInput
  }

  /**
   * PostMention deleteMany
   */
  export type PostMentionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostMentions to delete
     */
    where?: PostMentionWhereInput
    /**
     * Limit how many PostMentions to delete.
     */
    limit?: number
  }

  /**
   * PostMention without action
   */
  export type PostMentionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostMention
     */
    select?: PostMentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostMention
     */
    omit?: PostMentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostMentionInclude<ExtArgs> | null
  }


  /**
   * Model PostHashtag
   */

  export type AggregatePostHashtag = {
    _count: PostHashtagCountAggregateOutputType | null
    _min: PostHashtagMinAggregateOutputType | null
    _max: PostHashtagMaxAggregateOutputType | null
  }

  export type PostHashtagMinAggregateOutputType = {
    id: string | null
    tag: string | null
    postId: string | null
  }

  export type PostHashtagMaxAggregateOutputType = {
    id: string | null
    tag: string | null
    postId: string | null
  }

  export type PostHashtagCountAggregateOutputType = {
    id: number
    tag: number
    postId: number
    _all: number
  }


  export type PostHashtagMinAggregateInputType = {
    id?: true
    tag?: true
    postId?: true
  }

  export type PostHashtagMaxAggregateInputType = {
    id?: true
    tag?: true
    postId?: true
  }

  export type PostHashtagCountAggregateInputType = {
    id?: true
    tag?: true
    postId?: true
    _all?: true
  }

  export type PostHashtagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostHashtag to aggregate.
     */
    where?: PostHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostHashtags to fetch.
     */
    orderBy?: PostHashtagOrderByWithRelationInput | PostHashtagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostHashtags
    **/
    _count?: true | PostHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostHashtagMaxAggregateInputType
  }

  export type GetPostHashtagAggregateType<T extends PostHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregatePostHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostHashtag[P]>
      : GetScalarType<T[P], AggregatePostHashtag[P]>
  }




  export type PostHashtagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostHashtagWhereInput
    orderBy?: PostHashtagOrderByWithAggregationInput | PostHashtagOrderByWithAggregationInput[]
    by: PostHashtagScalarFieldEnum[] | PostHashtagScalarFieldEnum
    having?: PostHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostHashtagCountAggregateInputType | true
    _min?: PostHashtagMinAggregateInputType
    _max?: PostHashtagMaxAggregateInputType
  }

  export type PostHashtagGroupByOutputType = {
    id: string
    tag: string
    postId: string
    _count: PostHashtagCountAggregateOutputType | null
    _min: PostHashtagMinAggregateOutputType | null
    _max: PostHashtagMaxAggregateOutputType | null
  }

  type GetPostHashtagGroupByPayload<T extends PostHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], PostHashtagGroupByOutputType[P]>
        }
      >
    >


  export type PostHashtagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postHashtag"]>

  export type PostHashtagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postHashtag"]>

  export type PostHashtagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postHashtag"]>

  export type PostHashtagSelectScalar = {
    id?: boolean
    tag?: boolean
    postId?: boolean
  }

  export type PostHashtagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tag" | "postId", ExtArgs["result"]["postHashtag"]>
  export type PostHashtagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostHashtagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostHashtagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostHashtagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostHashtag"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tag: string
      postId: string
    }, ExtArgs["result"]["postHashtag"]>
    composites: {}
  }

  type PostHashtagGetPayload<S extends boolean | null | undefined | PostHashtagDefaultArgs> = $Result.GetResult<Prisma.$PostHashtagPayload, S>

  type PostHashtagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostHashtagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostHashtagCountAggregateInputType | true
    }

  export interface PostHashtagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostHashtag'], meta: { name: 'PostHashtag' } }
    /**
     * Find zero or one PostHashtag that matches the filter.
     * @param {PostHashtagFindUniqueArgs} args - Arguments to find a PostHashtag
     * @example
     * // Get one PostHashtag
     * const postHashtag = await prisma.postHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostHashtagFindUniqueArgs>(args: SelectSubset<T, PostHashtagFindUniqueArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostHashtag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostHashtagFindUniqueOrThrowArgs} args - Arguments to find a PostHashtag
     * @example
     * // Get one PostHashtag
     * const postHashtag = await prisma.postHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostHashtagFindUniqueOrThrowArgs>(args: SelectSubset<T, PostHashtagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagFindFirstArgs} args - Arguments to find a PostHashtag
     * @example
     * // Get one PostHashtag
     * const postHashtag = await prisma.postHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostHashtagFindFirstArgs>(args?: SelectSubset<T, PostHashtagFindFirstArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostHashtag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagFindFirstOrThrowArgs} args - Arguments to find a PostHashtag
     * @example
     * // Get one PostHashtag
     * const postHashtag = await prisma.postHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostHashtagFindFirstOrThrowArgs>(args?: SelectSubset<T, PostHashtagFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostHashtags
     * const postHashtags = await prisma.postHashtag.findMany()
     * 
     * // Get first 10 PostHashtags
     * const postHashtags = await prisma.postHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postHashtagWithIdOnly = await prisma.postHashtag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostHashtagFindManyArgs>(args?: SelectSubset<T, PostHashtagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostHashtag.
     * @param {PostHashtagCreateArgs} args - Arguments to create a PostHashtag.
     * @example
     * // Create one PostHashtag
     * const PostHashtag = await prisma.postHashtag.create({
     *   data: {
     *     // ... data to create a PostHashtag
     *   }
     * })
     * 
     */
    create<T extends PostHashtagCreateArgs>(args: SelectSubset<T, PostHashtagCreateArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostHashtags.
     * @param {PostHashtagCreateManyArgs} args - Arguments to create many PostHashtags.
     * @example
     * // Create many PostHashtags
     * const postHashtag = await prisma.postHashtag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostHashtagCreateManyArgs>(args?: SelectSubset<T, PostHashtagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostHashtags and returns the data saved in the database.
     * @param {PostHashtagCreateManyAndReturnArgs} args - Arguments to create many PostHashtags.
     * @example
     * // Create many PostHashtags
     * const postHashtag = await prisma.postHashtag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostHashtags and only return the `id`
     * const postHashtagWithIdOnly = await prisma.postHashtag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostHashtagCreateManyAndReturnArgs>(args?: SelectSubset<T, PostHashtagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostHashtag.
     * @param {PostHashtagDeleteArgs} args - Arguments to delete one PostHashtag.
     * @example
     * // Delete one PostHashtag
     * const PostHashtag = await prisma.postHashtag.delete({
     *   where: {
     *     // ... filter to delete one PostHashtag
     *   }
     * })
     * 
     */
    delete<T extends PostHashtagDeleteArgs>(args: SelectSubset<T, PostHashtagDeleteArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostHashtag.
     * @param {PostHashtagUpdateArgs} args - Arguments to update one PostHashtag.
     * @example
     * // Update one PostHashtag
     * const postHashtag = await prisma.postHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostHashtagUpdateArgs>(args: SelectSubset<T, PostHashtagUpdateArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostHashtags.
     * @param {PostHashtagDeleteManyArgs} args - Arguments to filter PostHashtags to delete.
     * @example
     * // Delete a few PostHashtags
     * const { count } = await prisma.postHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostHashtagDeleteManyArgs>(args?: SelectSubset<T, PostHashtagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostHashtags
     * const postHashtag = await prisma.postHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostHashtagUpdateManyArgs>(args: SelectSubset<T, PostHashtagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostHashtags and returns the data updated in the database.
     * @param {PostHashtagUpdateManyAndReturnArgs} args - Arguments to update many PostHashtags.
     * @example
     * // Update many PostHashtags
     * const postHashtag = await prisma.postHashtag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostHashtags and only return the `id`
     * const postHashtagWithIdOnly = await prisma.postHashtag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostHashtagUpdateManyAndReturnArgs>(args: SelectSubset<T, PostHashtagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostHashtag.
     * @param {PostHashtagUpsertArgs} args - Arguments to update or create a PostHashtag.
     * @example
     * // Update or create a PostHashtag
     * const postHashtag = await prisma.postHashtag.upsert({
     *   create: {
     *     // ... data to create a PostHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostHashtag we want to update
     *   }
     * })
     */
    upsert<T extends PostHashtagUpsertArgs>(args: SelectSubset<T, PostHashtagUpsertArgs<ExtArgs>>): Prisma__PostHashtagClient<$Result.GetResult<Prisma.$PostHashtagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagCountArgs} args - Arguments to filter PostHashtags to count.
     * @example
     * // Count the number of PostHashtags
     * const count = await prisma.postHashtag.count({
     *   where: {
     *     // ... the filter for the PostHashtags we want to count
     *   }
     * })
    **/
    count<T extends PostHashtagCountArgs>(
      args?: Subset<T, PostHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostHashtagAggregateArgs>(args: Subset<T, PostHashtagAggregateArgs>): Prisma.PrismaPromise<GetPostHashtagAggregateType<T>>

    /**
     * Group by PostHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostHashtagGroupByArgs['orderBy'] }
        : { orderBy?: PostHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostHashtag model
   */
  readonly fields: PostHashtagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostHashtagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostHashtag model
   */
  interface PostHashtagFieldRefs {
    readonly id: FieldRef<"PostHashtag", 'String'>
    readonly tag: FieldRef<"PostHashtag", 'String'>
    readonly postId: FieldRef<"PostHashtag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostHashtag findUnique
   */
  export type PostHashtagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter, which PostHashtag to fetch.
     */
    where: PostHashtagWhereUniqueInput
  }

  /**
   * PostHashtag findUniqueOrThrow
   */
  export type PostHashtagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter, which PostHashtag to fetch.
     */
    where: PostHashtagWhereUniqueInput
  }

  /**
   * PostHashtag findFirst
   */
  export type PostHashtagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter, which PostHashtag to fetch.
     */
    where?: PostHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostHashtags to fetch.
     */
    orderBy?: PostHashtagOrderByWithRelationInput | PostHashtagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostHashtags.
     */
    cursor?: PostHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostHashtags.
     */
    distinct?: PostHashtagScalarFieldEnum | PostHashtagScalarFieldEnum[]
  }

  /**
   * PostHashtag findFirstOrThrow
   */
  export type PostHashtagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter, which PostHashtag to fetch.
     */
    where?: PostHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostHashtags to fetch.
     */
    orderBy?: PostHashtagOrderByWithRelationInput | PostHashtagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostHashtags.
     */
    cursor?: PostHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostHashtags.
     */
    distinct?: PostHashtagScalarFieldEnum | PostHashtagScalarFieldEnum[]
  }

  /**
   * PostHashtag findMany
   */
  export type PostHashtagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter, which PostHashtags to fetch.
     */
    where?: PostHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostHashtags to fetch.
     */
    orderBy?: PostHashtagOrderByWithRelationInput | PostHashtagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostHashtags.
     */
    cursor?: PostHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostHashtags.
     */
    skip?: number
    distinct?: PostHashtagScalarFieldEnum | PostHashtagScalarFieldEnum[]
  }

  /**
   * PostHashtag create
   */
  export type PostHashtagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * The data needed to create a PostHashtag.
     */
    data: XOR<PostHashtagCreateInput, PostHashtagUncheckedCreateInput>
  }

  /**
   * PostHashtag createMany
   */
  export type PostHashtagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostHashtags.
     */
    data: PostHashtagCreateManyInput | PostHashtagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostHashtag createManyAndReturn
   */
  export type PostHashtagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * The data used to create many PostHashtags.
     */
    data: PostHashtagCreateManyInput | PostHashtagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostHashtag update
   */
  export type PostHashtagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * The data needed to update a PostHashtag.
     */
    data: XOR<PostHashtagUpdateInput, PostHashtagUncheckedUpdateInput>
    /**
     * Choose, which PostHashtag to update.
     */
    where: PostHashtagWhereUniqueInput
  }

  /**
   * PostHashtag updateMany
   */
  export type PostHashtagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostHashtags.
     */
    data: XOR<PostHashtagUpdateManyMutationInput, PostHashtagUncheckedUpdateManyInput>
    /**
     * Filter which PostHashtags to update
     */
    where?: PostHashtagWhereInput
    /**
     * Limit how many PostHashtags to update.
     */
    limit?: number
  }

  /**
   * PostHashtag updateManyAndReturn
   */
  export type PostHashtagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * The data used to update PostHashtags.
     */
    data: XOR<PostHashtagUpdateManyMutationInput, PostHashtagUncheckedUpdateManyInput>
    /**
     * Filter which PostHashtags to update
     */
    where?: PostHashtagWhereInput
    /**
     * Limit how many PostHashtags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostHashtag upsert
   */
  export type PostHashtagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * The filter to search for the PostHashtag to update in case it exists.
     */
    where: PostHashtagWhereUniqueInput
    /**
     * In case the PostHashtag found by the `where` argument doesn't exist, create a new PostHashtag with this data.
     */
    create: XOR<PostHashtagCreateInput, PostHashtagUncheckedCreateInput>
    /**
     * In case the PostHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostHashtagUpdateInput, PostHashtagUncheckedUpdateInput>
  }

  /**
   * PostHashtag delete
   */
  export type PostHashtagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
    /**
     * Filter which PostHashtag to delete.
     */
    where: PostHashtagWhereUniqueInput
  }

  /**
   * PostHashtag deleteMany
   */
  export type PostHashtagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostHashtags to delete
     */
    where?: PostHashtagWhereInput
    /**
     * Limit how many PostHashtags to delete.
     */
    limit?: number
  }

  /**
   * PostHashtag without action
   */
  export type PostHashtagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostHashtag
     */
    select?: PostHashtagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostHashtag
     */
    omit?: PostHashtagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostHashtagInclude<ExtArgs> | null
  }


  /**
   * Model PostResolution
   */

  export type AggregatePostResolution = {
    _count: PostResolutionCountAggregateOutputType | null
    _avg: PostResolutionAvgAggregateOutputType | null
    _sum: PostResolutionSumAggregateOutputType | null
    _min: PostResolutionMinAggregateOutputType | null
    _max: PostResolutionMaxAggregateOutputType | null
  }

  export type PostResolutionAvgAggregateOutputType = {
    costImpact: Decimal | null
    timeImpact: number | null
  }

  export type PostResolutionSumAggregateOutputType = {
    costImpact: Decimal | null
    timeImpact: number | null
  }

  export type PostResolutionMinAggregateOutputType = {
    id: string | null
    description: string | null
    implementedAt: Date | null
    verifiedAt: Date | null
    costImpact: Decimal | null
    timeImpact: number | null
    lessonsLearned: string | null
    preventiveMeasures: string | null
    clientNotified: boolean | null
    verifiedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostResolutionMaxAggregateOutputType = {
    id: string | null
    description: string | null
    implementedAt: Date | null
    verifiedAt: Date | null
    costImpact: Decimal | null
    timeImpact: number | null
    lessonsLearned: string | null
    preventiveMeasures: string | null
    clientNotified: boolean | null
    verifiedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostResolutionCountAggregateOutputType = {
    id: number
    description: number
    implementedAt: number
    verifiedAt: number
    costImpact: number
    timeImpact: number
    lessonsLearned: number
    preventiveMeasures: number
    clientNotified: number
    verifiedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostResolutionAvgAggregateInputType = {
    costImpact?: true
    timeImpact?: true
  }

  export type PostResolutionSumAggregateInputType = {
    costImpact?: true
    timeImpact?: true
  }

  export type PostResolutionMinAggregateInputType = {
    id?: true
    description?: true
    implementedAt?: true
    verifiedAt?: true
    costImpact?: true
    timeImpact?: true
    lessonsLearned?: true
    preventiveMeasures?: true
    clientNotified?: true
    verifiedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostResolutionMaxAggregateInputType = {
    id?: true
    description?: true
    implementedAt?: true
    verifiedAt?: true
    costImpact?: true
    timeImpact?: true
    lessonsLearned?: true
    preventiveMeasures?: true
    clientNotified?: true
    verifiedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostResolutionCountAggregateInputType = {
    id?: true
    description?: true
    implementedAt?: true
    verifiedAt?: true
    costImpact?: true
    timeImpact?: true
    lessonsLearned?: true
    preventiveMeasures?: true
    clientNotified?: true
    verifiedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostResolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostResolution to aggregate.
     */
    where?: PostResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostResolutions to fetch.
     */
    orderBy?: PostResolutionOrderByWithRelationInput | PostResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostResolutions
    **/
    _count?: true | PostResolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostResolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostResolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostResolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostResolutionMaxAggregateInputType
  }

  export type GetPostResolutionAggregateType<T extends PostResolutionAggregateArgs> = {
        [P in keyof T & keyof AggregatePostResolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostResolution[P]>
      : GetScalarType<T[P], AggregatePostResolution[P]>
  }




  export type PostResolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostResolutionWhereInput
    orderBy?: PostResolutionOrderByWithAggregationInput | PostResolutionOrderByWithAggregationInput[]
    by: PostResolutionScalarFieldEnum[] | PostResolutionScalarFieldEnum
    having?: PostResolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostResolutionCountAggregateInputType | true
    _avg?: PostResolutionAvgAggregateInputType
    _sum?: PostResolutionSumAggregateInputType
    _min?: PostResolutionMinAggregateInputType
    _max?: PostResolutionMaxAggregateInputType
  }

  export type PostResolutionGroupByOutputType = {
    id: string
    description: string
    implementedAt: Date | null
    verifiedAt: Date | null
    costImpact: Decimal | null
    timeImpact: number | null
    lessonsLearned: string | null
    preventiveMeasures: string | null
    clientNotified: boolean
    verifiedById: string | null
    createdAt: Date
    updatedAt: Date
    _count: PostResolutionCountAggregateOutputType | null
    _avg: PostResolutionAvgAggregateOutputType | null
    _sum: PostResolutionSumAggregateOutputType | null
    _min: PostResolutionMinAggregateOutputType | null
    _max: PostResolutionMaxAggregateOutputType | null
  }

  type GetPostResolutionGroupByPayload<T extends PostResolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostResolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostResolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostResolutionGroupByOutputType[P]>
            : GetScalarType<T[P], PostResolutionGroupByOutputType[P]>
        }
      >
    >


  export type PostResolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    implementedAt?: boolean
    verifiedAt?: boolean
    costImpact?: boolean
    timeImpact?: boolean
    lessonsLearned?: boolean
    preventiveMeasures?: boolean
    clientNotified?: boolean
    verifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
    posts?: boolean | PostResolution$postsArgs<ExtArgs>
    _count?: boolean | PostResolutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postResolution"]>

  export type PostResolutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    implementedAt?: boolean
    verifiedAt?: boolean
    costImpact?: boolean
    timeImpact?: boolean
    lessonsLearned?: boolean
    preventiveMeasures?: boolean
    clientNotified?: boolean
    verifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
  }, ExtArgs["result"]["postResolution"]>

  export type PostResolutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    implementedAt?: boolean
    verifiedAt?: boolean
    costImpact?: boolean
    timeImpact?: boolean
    lessonsLearned?: boolean
    preventiveMeasures?: boolean
    clientNotified?: boolean
    verifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
  }, ExtArgs["result"]["postResolution"]>

  export type PostResolutionSelectScalar = {
    id?: boolean
    description?: boolean
    implementedAt?: boolean
    verifiedAt?: boolean
    costImpact?: boolean
    timeImpact?: boolean
    lessonsLearned?: boolean
    preventiveMeasures?: boolean
    clientNotified?: boolean
    verifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostResolutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "implementedAt" | "verifiedAt" | "costImpact" | "timeImpact" | "lessonsLearned" | "preventiveMeasures" | "clientNotified" | "verifiedById" | "createdAt" | "updatedAt", ExtArgs["result"]["postResolution"]>
  export type PostResolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
    posts?: boolean | PostResolution$postsArgs<ExtArgs>
    _count?: boolean | PostResolutionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostResolutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
  }
  export type PostResolutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verifier?: boolean | PostResolution$verifierArgs<ExtArgs>
  }

  export type $PostResolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostResolution"
    objects: {
      verifier: Prisma.$UserPayload<ExtArgs> | null
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      implementedAt: Date | null
      verifiedAt: Date | null
      costImpact: Prisma.Decimal | null
      timeImpact: number | null
      lessonsLearned: string | null
      preventiveMeasures: string | null
      clientNotified: boolean
      verifiedById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["postResolution"]>
    composites: {}
  }

  type PostResolutionGetPayload<S extends boolean | null | undefined | PostResolutionDefaultArgs> = $Result.GetResult<Prisma.$PostResolutionPayload, S>

  type PostResolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostResolutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostResolutionCountAggregateInputType | true
    }

  export interface PostResolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostResolution'], meta: { name: 'PostResolution' } }
    /**
     * Find zero or one PostResolution that matches the filter.
     * @param {PostResolutionFindUniqueArgs} args - Arguments to find a PostResolution
     * @example
     * // Get one PostResolution
     * const postResolution = await prisma.postResolution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostResolutionFindUniqueArgs>(args: SelectSubset<T, PostResolutionFindUniqueArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostResolution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostResolutionFindUniqueOrThrowArgs} args - Arguments to find a PostResolution
     * @example
     * // Get one PostResolution
     * const postResolution = await prisma.postResolution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostResolutionFindUniqueOrThrowArgs>(args: SelectSubset<T, PostResolutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostResolution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionFindFirstArgs} args - Arguments to find a PostResolution
     * @example
     * // Get one PostResolution
     * const postResolution = await prisma.postResolution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostResolutionFindFirstArgs>(args?: SelectSubset<T, PostResolutionFindFirstArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostResolution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionFindFirstOrThrowArgs} args - Arguments to find a PostResolution
     * @example
     * // Get one PostResolution
     * const postResolution = await prisma.postResolution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostResolutionFindFirstOrThrowArgs>(args?: SelectSubset<T, PostResolutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostResolutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostResolutions
     * const postResolutions = await prisma.postResolution.findMany()
     * 
     * // Get first 10 PostResolutions
     * const postResolutions = await prisma.postResolution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postResolutionWithIdOnly = await prisma.postResolution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostResolutionFindManyArgs>(args?: SelectSubset<T, PostResolutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostResolution.
     * @param {PostResolutionCreateArgs} args - Arguments to create a PostResolution.
     * @example
     * // Create one PostResolution
     * const PostResolution = await prisma.postResolution.create({
     *   data: {
     *     // ... data to create a PostResolution
     *   }
     * })
     * 
     */
    create<T extends PostResolutionCreateArgs>(args: SelectSubset<T, PostResolutionCreateArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostResolutions.
     * @param {PostResolutionCreateManyArgs} args - Arguments to create many PostResolutions.
     * @example
     * // Create many PostResolutions
     * const postResolution = await prisma.postResolution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostResolutionCreateManyArgs>(args?: SelectSubset<T, PostResolutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostResolutions and returns the data saved in the database.
     * @param {PostResolutionCreateManyAndReturnArgs} args - Arguments to create many PostResolutions.
     * @example
     * // Create many PostResolutions
     * const postResolution = await prisma.postResolution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostResolutions and only return the `id`
     * const postResolutionWithIdOnly = await prisma.postResolution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostResolutionCreateManyAndReturnArgs>(args?: SelectSubset<T, PostResolutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostResolution.
     * @param {PostResolutionDeleteArgs} args - Arguments to delete one PostResolution.
     * @example
     * // Delete one PostResolution
     * const PostResolution = await prisma.postResolution.delete({
     *   where: {
     *     // ... filter to delete one PostResolution
     *   }
     * })
     * 
     */
    delete<T extends PostResolutionDeleteArgs>(args: SelectSubset<T, PostResolutionDeleteArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostResolution.
     * @param {PostResolutionUpdateArgs} args - Arguments to update one PostResolution.
     * @example
     * // Update one PostResolution
     * const postResolution = await prisma.postResolution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostResolutionUpdateArgs>(args: SelectSubset<T, PostResolutionUpdateArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostResolutions.
     * @param {PostResolutionDeleteManyArgs} args - Arguments to filter PostResolutions to delete.
     * @example
     * // Delete a few PostResolutions
     * const { count } = await prisma.postResolution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostResolutionDeleteManyArgs>(args?: SelectSubset<T, PostResolutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostResolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostResolutions
     * const postResolution = await prisma.postResolution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostResolutionUpdateManyArgs>(args: SelectSubset<T, PostResolutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostResolutions and returns the data updated in the database.
     * @param {PostResolutionUpdateManyAndReturnArgs} args - Arguments to update many PostResolutions.
     * @example
     * // Update many PostResolutions
     * const postResolution = await prisma.postResolution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostResolutions and only return the `id`
     * const postResolutionWithIdOnly = await prisma.postResolution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostResolutionUpdateManyAndReturnArgs>(args: SelectSubset<T, PostResolutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostResolution.
     * @param {PostResolutionUpsertArgs} args - Arguments to update or create a PostResolution.
     * @example
     * // Update or create a PostResolution
     * const postResolution = await prisma.postResolution.upsert({
     *   create: {
     *     // ... data to create a PostResolution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostResolution we want to update
     *   }
     * })
     */
    upsert<T extends PostResolutionUpsertArgs>(args: SelectSubset<T, PostResolutionUpsertArgs<ExtArgs>>): Prisma__PostResolutionClient<$Result.GetResult<Prisma.$PostResolutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostResolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionCountArgs} args - Arguments to filter PostResolutions to count.
     * @example
     * // Count the number of PostResolutions
     * const count = await prisma.postResolution.count({
     *   where: {
     *     // ... the filter for the PostResolutions we want to count
     *   }
     * })
    **/
    count<T extends PostResolutionCountArgs>(
      args?: Subset<T, PostResolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostResolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostResolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostResolutionAggregateArgs>(args: Subset<T, PostResolutionAggregateArgs>): Prisma.PrismaPromise<GetPostResolutionAggregateType<T>>

    /**
     * Group by PostResolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostResolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostResolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostResolutionGroupByArgs['orderBy'] }
        : { orderBy?: PostResolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostResolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostResolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostResolution model
   */
  readonly fields: PostResolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostResolution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostResolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    verifier<T extends PostResolution$verifierArgs<ExtArgs> = {}>(args?: Subset<T, PostResolution$verifierArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    posts<T extends PostResolution$postsArgs<ExtArgs> = {}>(args?: Subset<T, PostResolution$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostResolution model
   */
  interface PostResolutionFieldRefs {
    readonly id: FieldRef<"PostResolution", 'String'>
    readonly description: FieldRef<"PostResolution", 'String'>
    readonly implementedAt: FieldRef<"PostResolution", 'DateTime'>
    readonly verifiedAt: FieldRef<"PostResolution", 'DateTime'>
    readonly costImpact: FieldRef<"PostResolution", 'Decimal'>
    readonly timeImpact: FieldRef<"PostResolution", 'Float'>
    readonly lessonsLearned: FieldRef<"PostResolution", 'String'>
    readonly preventiveMeasures: FieldRef<"PostResolution", 'String'>
    readonly clientNotified: FieldRef<"PostResolution", 'Boolean'>
    readonly verifiedById: FieldRef<"PostResolution", 'String'>
    readonly createdAt: FieldRef<"PostResolution", 'DateTime'>
    readonly updatedAt: FieldRef<"PostResolution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PostResolution findUnique
   */
  export type PostResolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter, which PostResolution to fetch.
     */
    where: PostResolutionWhereUniqueInput
  }

  /**
   * PostResolution findUniqueOrThrow
   */
  export type PostResolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter, which PostResolution to fetch.
     */
    where: PostResolutionWhereUniqueInput
  }

  /**
   * PostResolution findFirst
   */
  export type PostResolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter, which PostResolution to fetch.
     */
    where?: PostResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostResolutions to fetch.
     */
    orderBy?: PostResolutionOrderByWithRelationInput | PostResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostResolutions.
     */
    cursor?: PostResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostResolutions.
     */
    distinct?: PostResolutionScalarFieldEnum | PostResolutionScalarFieldEnum[]
  }

  /**
   * PostResolution findFirstOrThrow
   */
  export type PostResolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter, which PostResolution to fetch.
     */
    where?: PostResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostResolutions to fetch.
     */
    orderBy?: PostResolutionOrderByWithRelationInput | PostResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostResolutions.
     */
    cursor?: PostResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostResolutions.
     */
    distinct?: PostResolutionScalarFieldEnum | PostResolutionScalarFieldEnum[]
  }

  /**
   * PostResolution findMany
   */
  export type PostResolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter, which PostResolutions to fetch.
     */
    where?: PostResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostResolutions to fetch.
     */
    orderBy?: PostResolutionOrderByWithRelationInput | PostResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostResolutions.
     */
    cursor?: PostResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostResolutions.
     */
    skip?: number
    distinct?: PostResolutionScalarFieldEnum | PostResolutionScalarFieldEnum[]
  }

  /**
   * PostResolution create
   */
  export type PostResolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a PostResolution.
     */
    data: XOR<PostResolutionCreateInput, PostResolutionUncheckedCreateInput>
  }

  /**
   * PostResolution createMany
   */
  export type PostResolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostResolutions.
     */
    data: PostResolutionCreateManyInput | PostResolutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostResolution createManyAndReturn
   */
  export type PostResolutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * The data used to create many PostResolutions.
     */
    data: PostResolutionCreateManyInput | PostResolutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostResolution update
   */
  export type PostResolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a PostResolution.
     */
    data: XOR<PostResolutionUpdateInput, PostResolutionUncheckedUpdateInput>
    /**
     * Choose, which PostResolution to update.
     */
    where: PostResolutionWhereUniqueInput
  }

  /**
   * PostResolution updateMany
   */
  export type PostResolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostResolutions.
     */
    data: XOR<PostResolutionUpdateManyMutationInput, PostResolutionUncheckedUpdateManyInput>
    /**
     * Filter which PostResolutions to update
     */
    where?: PostResolutionWhereInput
    /**
     * Limit how many PostResolutions to update.
     */
    limit?: number
  }

  /**
   * PostResolution updateManyAndReturn
   */
  export type PostResolutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * The data used to update PostResolutions.
     */
    data: XOR<PostResolutionUpdateManyMutationInput, PostResolutionUncheckedUpdateManyInput>
    /**
     * Filter which PostResolutions to update
     */
    where?: PostResolutionWhereInput
    /**
     * Limit how many PostResolutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostResolution upsert
   */
  export type PostResolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the PostResolution to update in case it exists.
     */
    where: PostResolutionWhereUniqueInput
    /**
     * In case the PostResolution found by the `where` argument doesn't exist, create a new PostResolution with this data.
     */
    create: XOR<PostResolutionCreateInput, PostResolutionUncheckedCreateInput>
    /**
     * In case the PostResolution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostResolutionUpdateInput, PostResolutionUncheckedUpdateInput>
  }

  /**
   * PostResolution delete
   */
  export type PostResolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
    /**
     * Filter which PostResolution to delete.
     */
    where: PostResolutionWhereUniqueInput
  }

  /**
   * PostResolution deleteMany
   */
  export type PostResolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostResolutions to delete
     */
    where?: PostResolutionWhereInput
    /**
     * Limit how many PostResolutions to delete.
     */
    limit?: number
  }

  /**
   * PostResolution.verifier
   */
  export type PostResolution$verifierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PostResolution.posts
   */
  export type PostResolution$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * PostResolution without action
   */
  export type PostResolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostResolution
     */
    select?: PostResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostResolution
     */
    omit?: PostResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostResolutionInclude<ExtArgs> | null
  }


  /**
   * Model RFI
   */

  export type AggregateRFI = {
    _count: RFICountAggregateOutputType | null
    _avg: RFIAvgAggregateOutputType | null
    _sum: RFISumAggregateOutputType | null
    _min: RFIMinAggregateOutputType | null
    _max: RFIMaxAggregateOutputType | null
  }

  export type RFIAvgAggregateOutputType = {
    costImpact: Decimal | null
    scheduleImpact: number | null
  }

  export type RFISumAggregateOutputType = {
    costImpact: Decimal | null
    scheduleImpact: number | null
  }

  export type RFIMinAggregateOutputType = {
    id: string | null
    number: string | null
    subject: string | null
    description: string | null
    priority: $Enums.RFIPriority | null
    status: $Enums.RFIStatus | null
    dueDate: Date | null
    responseDate: Date | null
    response: string | null
    clientVisible: boolean | null
    costImpact: Decimal | null
    scheduleImpact: number | null
    category: $Enums.RFICategory | null
    externalRFINumber: string | null
    submittedById: string | null
    assignedToId: string | null
    postId: string | null
    projectId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RFIMaxAggregateOutputType = {
    id: string | null
    number: string | null
    subject: string | null
    description: string | null
    priority: $Enums.RFIPriority | null
    status: $Enums.RFIStatus | null
    dueDate: Date | null
    responseDate: Date | null
    response: string | null
    clientVisible: boolean | null
    costImpact: Decimal | null
    scheduleImpact: number | null
    category: $Enums.RFICategory | null
    externalRFINumber: string | null
    submittedById: string | null
    assignedToId: string | null
    postId: string | null
    projectId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RFICountAggregateOutputType = {
    id: number
    number: number
    subject: number
    description: number
    priority: number
    status: number
    dueDate: number
    responseDate: number
    response: number
    clientVisible: number
    costImpact: number
    scheduleImpact: number
    category: number
    externalRFINumber: number
    submittedById: number
    assignedToId: number
    postId: number
    projectId: number
    organizationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RFIAvgAggregateInputType = {
    costImpact?: true
    scheduleImpact?: true
  }

  export type RFISumAggregateInputType = {
    costImpact?: true
    scheduleImpact?: true
  }

  export type RFIMinAggregateInputType = {
    id?: true
    number?: true
    subject?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    responseDate?: true
    response?: true
    clientVisible?: true
    costImpact?: true
    scheduleImpact?: true
    category?: true
    externalRFINumber?: true
    submittedById?: true
    assignedToId?: true
    postId?: true
    projectId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RFIMaxAggregateInputType = {
    id?: true
    number?: true
    subject?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    responseDate?: true
    response?: true
    clientVisible?: true
    costImpact?: true
    scheduleImpact?: true
    category?: true
    externalRFINumber?: true
    submittedById?: true
    assignedToId?: true
    postId?: true
    projectId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RFICountAggregateInputType = {
    id?: true
    number?: true
    subject?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    responseDate?: true
    response?: true
    clientVisible?: true
    costImpact?: true
    scheduleImpact?: true
    category?: true
    externalRFINumber?: true
    submittedById?: true
    assignedToId?: true
    postId?: true
    projectId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RFIAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RFI to aggregate.
     */
    where?: RFIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RFIS to fetch.
     */
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RFIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RFIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RFIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RFIS
    **/
    _count?: true | RFICountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RFIAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RFISumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RFIMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RFIMaxAggregateInputType
  }

  export type GetRFIAggregateType<T extends RFIAggregateArgs> = {
        [P in keyof T & keyof AggregateRFI]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRFI[P]>
      : GetScalarType<T[P], AggregateRFI[P]>
  }




  export type RFIGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RFIWhereInput
    orderBy?: RFIOrderByWithAggregationInput | RFIOrderByWithAggregationInput[]
    by: RFIScalarFieldEnum[] | RFIScalarFieldEnum
    having?: RFIScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RFICountAggregateInputType | true
    _avg?: RFIAvgAggregateInputType
    _sum?: RFISumAggregateInputType
    _min?: RFIMinAggregateInputType
    _max?: RFIMaxAggregateInputType
  }

  export type RFIGroupByOutputType = {
    id: string
    number: string
    subject: string
    description: string
    priority: $Enums.RFIPriority
    status: $Enums.RFIStatus
    dueDate: Date | null
    responseDate: Date | null
    response: string | null
    clientVisible: boolean
    costImpact: Decimal | null
    scheduleImpact: number | null
    category: $Enums.RFICategory
    externalRFINumber: string | null
    submittedById: string
    assignedToId: string | null
    postId: string
    projectId: string
    organizationId: string
    createdAt: Date
    updatedAt: Date
    _count: RFICountAggregateOutputType | null
    _avg: RFIAvgAggregateOutputType | null
    _sum: RFISumAggregateOutputType | null
    _min: RFIMinAggregateOutputType | null
    _max: RFIMaxAggregateOutputType | null
  }

  type GetRFIGroupByPayload<T extends RFIGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RFIGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RFIGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RFIGroupByOutputType[P]>
            : GetScalarType<T[P], RFIGroupByOutputType[P]>
        }
      >
    >


  export type RFISelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    subject?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    responseDate?: boolean
    response?: boolean
    clientVisible?: boolean
    costImpact?: boolean
    scheduleImpact?: boolean
    category?: boolean
    externalRFINumber?: boolean
    submittedById?: boolean
    assignedToId?: boolean
    postId?: boolean
    projectId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rFI"]>

  export type RFISelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    subject?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    responseDate?: boolean
    response?: boolean
    clientVisible?: boolean
    costImpact?: boolean
    scheduleImpact?: boolean
    category?: boolean
    externalRFINumber?: boolean
    submittedById?: boolean
    assignedToId?: boolean
    postId?: boolean
    projectId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rFI"]>

  export type RFISelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    subject?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    responseDate?: boolean
    response?: boolean
    clientVisible?: boolean
    costImpact?: boolean
    scheduleImpact?: boolean
    category?: boolean
    externalRFINumber?: boolean
    submittedById?: boolean
    assignedToId?: boolean
    postId?: boolean
    projectId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rFI"]>

  export type RFISelectScalar = {
    id?: boolean
    number?: boolean
    subject?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    responseDate?: boolean
    response?: boolean
    clientVisible?: boolean
    costImpact?: boolean
    scheduleImpact?: boolean
    category?: boolean
    externalRFINumber?: boolean
    submittedById?: boolean
    assignedToId?: boolean
    postId?: boolean
    projectId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RFIOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "subject" | "description" | "priority" | "status" | "dueDate" | "responseDate" | "response" | "clientVisible" | "costImpact" | "scheduleImpact" | "category" | "externalRFINumber" | "submittedById" | "assignedToId" | "postId" | "projectId" | "organizationId" | "createdAt" | "updatedAt", ExtArgs["result"]["rFI"]>
  export type RFIInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type RFIIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type RFIIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | RFI$assignedToArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $RFIPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RFI"
    objects: {
      submittedBy: Prisma.$UserPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      post: Prisma.$PostPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      number: string
      subject: string
      description: string
      priority: $Enums.RFIPriority
      status: $Enums.RFIStatus
      dueDate: Date | null
      responseDate: Date | null
      response: string | null
      clientVisible: boolean
      costImpact: Prisma.Decimal | null
      scheduleImpact: number | null
      category: $Enums.RFICategory
      externalRFINumber: string | null
      submittedById: string
      assignedToId: string | null
      postId: string
      projectId: string
      organizationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rFI"]>
    composites: {}
  }

  type RFIGetPayload<S extends boolean | null | undefined | RFIDefaultArgs> = $Result.GetResult<Prisma.$RFIPayload, S>

  type RFICountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RFIFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RFICountAggregateInputType | true
    }

  export interface RFIDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RFI'], meta: { name: 'RFI' } }
    /**
     * Find zero or one RFI that matches the filter.
     * @param {RFIFindUniqueArgs} args - Arguments to find a RFI
     * @example
     * // Get one RFI
     * const rFI = await prisma.rFI.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RFIFindUniqueArgs>(args: SelectSubset<T, RFIFindUniqueArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RFI that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RFIFindUniqueOrThrowArgs} args - Arguments to find a RFI
     * @example
     * // Get one RFI
     * const rFI = await prisma.rFI.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RFIFindUniqueOrThrowArgs>(args: SelectSubset<T, RFIFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RFI that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIFindFirstArgs} args - Arguments to find a RFI
     * @example
     * // Get one RFI
     * const rFI = await prisma.rFI.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RFIFindFirstArgs>(args?: SelectSubset<T, RFIFindFirstArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RFI that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIFindFirstOrThrowArgs} args - Arguments to find a RFI
     * @example
     * // Get one RFI
     * const rFI = await prisma.rFI.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RFIFindFirstOrThrowArgs>(args?: SelectSubset<T, RFIFindFirstOrThrowArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RFIS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RFIS
     * const rFIS = await prisma.rFI.findMany()
     * 
     * // Get first 10 RFIS
     * const rFIS = await prisma.rFI.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rFIWithIdOnly = await prisma.rFI.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RFIFindManyArgs>(args?: SelectSubset<T, RFIFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RFI.
     * @param {RFICreateArgs} args - Arguments to create a RFI.
     * @example
     * // Create one RFI
     * const RFI = await prisma.rFI.create({
     *   data: {
     *     // ... data to create a RFI
     *   }
     * })
     * 
     */
    create<T extends RFICreateArgs>(args: SelectSubset<T, RFICreateArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RFIS.
     * @param {RFICreateManyArgs} args - Arguments to create many RFIS.
     * @example
     * // Create many RFIS
     * const rFI = await prisma.rFI.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RFICreateManyArgs>(args?: SelectSubset<T, RFICreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RFIS and returns the data saved in the database.
     * @param {RFICreateManyAndReturnArgs} args - Arguments to create many RFIS.
     * @example
     * // Create many RFIS
     * const rFI = await prisma.rFI.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RFIS and only return the `id`
     * const rFIWithIdOnly = await prisma.rFI.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RFICreateManyAndReturnArgs>(args?: SelectSubset<T, RFICreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RFI.
     * @param {RFIDeleteArgs} args - Arguments to delete one RFI.
     * @example
     * // Delete one RFI
     * const RFI = await prisma.rFI.delete({
     *   where: {
     *     // ... filter to delete one RFI
     *   }
     * })
     * 
     */
    delete<T extends RFIDeleteArgs>(args: SelectSubset<T, RFIDeleteArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RFI.
     * @param {RFIUpdateArgs} args - Arguments to update one RFI.
     * @example
     * // Update one RFI
     * const rFI = await prisma.rFI.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RFIUpdateArgs>(args: SelectSubset<T, RFIUpdateArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RFIS.
     * @param {RFIDeleteManyArgs} args - Arguments to filter RFIS to delete.
     * @example
     * // Delete a few RFIS
     * const { count } = await prisma.rFI.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RFIDeleteManyArgs>(args?: SelectSubset<T, RFIDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RFIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RFIS
     * const rFI = await prisma.rFI.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RFIUpdateManyArgs>(args: SelectSubset<T, RFIUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RFIS and returns the data updated in the database.
     * @param {RFIUpdateManyAndReturnArgs} args - Arguments to update many RFIS.
     * @example
     * // Update many RFIS
     * const rFI = await prisma.rFI.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RFIS and only return the `id`
     * const rFIWithIdOnly = await prisma.rFI.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RFIUpdateManyAndReturnArgs>(args: SelectSubset<T, RFIUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RFI.
     * @param {RFIUpsertArgs} args - Arguments to update or create a RFI.
     * @example
     * // Update or create a RFI
     * const rFI = await prisma.rFI.upsert({
     *   create: {
     *     // ... data to create a RFI
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RFI we want to update
     *   }
     * })
     */
    upsert<T extends RFIUpsertArgs>(args: SelectSubset<T, RFIUpsertArgs<ExtArgs>>): Prisma__RFIClient<$Result.GetResult<Prisma.$RFIPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RFIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFICountArgs} args - Arguments to filter RFIS to count.
     * @example
     * // Count the number of RFIS
     * const count = await prisma.rFI.count({
     *   where: {
     *     // ... the filter for the RFIS we want to count
     *   }
     * })
    **/
    count<T extends RFICountArgs>(
      args?: Subset<T, RFICountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RFICountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RFI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RFIAggregateArgs>(args: Subset<T, RFIAggregateArgs>): Prisma.PrismaPromise<GetRFIAggregateType<T>>

    /**
     * Group by RFI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RFIGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RFIGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RFIGroupByArgs['orderBy'] }
        : { orderBy?: RFIGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RFIGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRFIGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RFI model
   */
  readonly fields: RFIFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RFI.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RFIClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submittedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends RFI$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, RFI$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RFI model
   */
  interface RFIFieldRefs {
    readonly id: FieldRef<"RFI", 'String'>
    readonly number: FieldRef<"RFI", 'String'>
    readonly subject: FieldRef<"RFI", 'String'>
    readonly description: FieldRef<"RFI", 'String'>
    readonly priority: FieldRef<"RFI", 'RFIPriority'>
    readonly status: FieldRef<"RFI", 'RFIStatus'>
    readonly dueDate: FieldRef<"RFI", 'DateTime'>
    readonly responseDate: FieldRef<"RFI", 'DateTime'>
    readonly response: FieldRef<"RFI", 'String'>
    readonly clientVisible: FieldRef<"RFI", 'Boolean'>
    readonly costImpact: FieldRef<"RFI", 'Decimal'>
    readonly scheduleImpact: FieldRef<"RFI", 'Int'>
    readonly category: FieldRef<"RFI", 'RFICategory'>
    readonly externalRFINumber: FieldRef<"RFI", 'String'>
    readonly submittedById: FieldRef<"RFI", 'String'>
    readonly assignedToId: FieldRef<"RFI", 'String'>
    readonly postId: FieldRef<"RFI", 'String'>
    readonly projectId: FieldRef<"RFI", 'String'>
    readonly organizationId: FieldRef<"RFI", 'String'>
    readonly createdAt: FieldRef<"RFI", 'DateTime'>
    readonly updatedAt: FieldRef<"RFI", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RFI findUnique
   */
  export type RFIFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter, which RFI to fetch.
     */
    where: RFIWhereUniqueInput
  }

  /**
   * RFI findUniqueOrThrow
   */
  export type RFIFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter, which RFI to fetch.
     */
    where: RFIWhereUniqueInput
  }

  /**
   * RFI findFirst
   */
  export type RFIFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter, which RFI to fetch.
     */
    where?: RFIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RFIS to fetch.
     */
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RFIS.
     */
    cursor?: RFIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RFIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RFIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RFIS.
     */
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * RFI findFirstOrThrow
   */
  export type RFIFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter, which RFI to fetch.
     */
    where?: RFIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RFIS to fetch.
     */
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RFIS.
     */
    cursor?: RFIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RFIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RFIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RFIS.
     */
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * RFI findMany
   */
  export type RFIFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter, which RFIS to fetch.
     */
    where?: RFIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RFIS to fetch.
     */
    orderBy?: RFIOrderByWithRelationInput | RFIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RFIS.
     */
    cursor?: RFIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RFIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RFIS.
     */
    skip?: number
    distinct?: RFIScalarFieldEnum | RFIScalarFieldEnum[]
  }

  /**
   * RFI create
   */
  export type RFICreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * The data needed to create a RFI.
     */
    data: XOR<RFICreateInput, RFIUncheckedCreateInput>
  }

  /**
   * RFI createMany
   */
  export type RFICreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RFIS.
     */
    data: RFICreateManyInput | RFICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RFI createManyAndReturn
   */
  export type RFICreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * The data used to create many RFIS.
     */
    data: RFICreateManyInput | RFICreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RFI update
   */
  export type RFIUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * The data needed to update a RFI.
     */
    data: XOR<RFIUpdateInput, RFIUncheckedUpdateInput>
    /**
     * Choose, which RFI to update.
     */
    where: RFIWhereUniqueInput
  }

  /**
   * RFI updateMany
   */
  export type RFIUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RFIS.
     */
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyInput>
    /**
     * Filter which RFIS to update
     */
    where?: RFIWhereInput
    /**
     * Limit how many RFIS to update.
     */
    limit?: number
  }

  /**
   * RFI updateManyAndReturn
   */
  export type RFIUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * The data used to update RFIS.
     */
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyInput>
    /**
     * Filter which RFIS to update
     */
    where?: RFIWhereInput
    /**
     * Limit how many RFIS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RFI upsert
   */
  export type RFIUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * The filter to search for the RFI to update in case it exists.
     */
    where: RFIWhereUniqueInput
    /**
     * In case the RFI found by the `where` argument doesn't exist, create a new RFI with this data.
     */
    create: XOR<RFICreateInput, RFIUncheckedCreateInput>
    /**
     * In case the RFI was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RFIUpdateInput, RFIUncheckedUpdateInput>
  }

  /**
   * RFI delete
   */
  export type RFIDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
    /**
     * Filter which RFI to delete.
     */
    where: RFIWhereUniqueInput
  }

  /**
   * RFI deleteMany
   */
  export type RFIDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RFIS to delete
     */
    where?: RFIWhereInput
    /**
     * Limit how many RFIS to delete.
     */
    limit?: number
  }

  /**
   * RFI.assignedTo
   */
  export type RFI$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RFI without action
   */
  export type RFIDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RFI
     */
    select?: RFISelect<ExtArgs> | null
    /**
     * Omit specific fields from the RFI
     */
    omit?: RFIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RFIInclude<ExtArgs> | null
  }


  /**
   * Model Approval
   */

  export type AggregateApproval = {
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  export type ApprovalMinAggregateOutputType = {
    id: string | null
    type: $Enums.ApprovalType | null
    entityId: string | null
    entityType: string | null
    status: $Enums.ApprovalStatus | null
    priority: $Enums.ApprovalPriority | null
    dueDate: Date | null
    requestedAt: Date | null
    reviewedAt: Date | null
    comments: string | null
    requesterId: string | null
    approverId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApprovalMaxAggregateOutputType = {
    id: string | null
    type: $Enums.ApprovalType | null
    entityId: string | null
    entityType: string | null
    status: $Enums.ApprovalStatus | null
    priority: $Enums.ApprovalPriority | null
    dueDate: Date | null
    requestedAt: Date | null
    reviewedAt: Date | null
    comments: string | null
    requesterId: string | null
    approverId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApprovalCountAggregateOutputType = {
    id: number
    type: number
    entityId: number
    entityType: number
    status: number
    priority: number
    dueDate: number
    requestedAt: number
    reviewedAt: number
    comments: number
    conditions: number
    requesterId: number
    approverId: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApprovalMinAggregateInputType = {
    id?: true
    type?: true
    entityId?: true
    entityType?: true
    status?: true
    priority?: true
    dueDate?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    requesterId?: true
    approverId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApprovalMaxAggregateInputType = {
    id?: true
    type?: true
    entityId?: true
    entityType?: true
    status?: true
    priority?: true
    dueDate?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    requesterId?: true
    approverId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApprovalCountAggregateInputType = {
    id?: true
    type?: true
    entityId?: true
    entityType?: true
    status?: true
    priority?: true
    dueDate?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    conditions?: true
    requesterId?: true
    approverId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approval to aggregate.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalMaxAggregateInputType
  }

  export type GetApprovalAggregateType<T extends ApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApproval[P]>
      : GetScalarType<T[P], AggregateApproval[P]>
  }




  export type ApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithAggregationInput | ApprovalOrderByWithAggregationInput[]
    by: ApprovalScalarFieldEnum[] | ApprovalScalarFieldEnum
    having?: ApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalCountAggregateInputType | true
    _min?: ApprovalMinAggregateInputType
    _max?: ApprovalMaxAggregateInputType
  }

  export type ApprovalGroupByOutputType = {
    id: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status: $Enums.ApprovalStatus
    priority: $Enums.ApprovalPriority
    dueDate: Date | null
    requestedAt: Date
    reviewedAt: Date | null
    comments: string | null
    conditions: string[]
    requesterId: string
    approverId: string
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  type GetApprovalGroupByPayload<T extends ApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    conditions?: boolean
    requesterId?: boolean
    approverId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    conditions?: boolean
    requesterId?: boolean
    approverId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    conditions?: boolean
    requesterId?: boolean
    approverId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectScalar = {
    id?: boolean
    type?: boolean
    entityId?: boolean
    entityType?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    conditions?: boolean
    requesterId?: boolean
    approverId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApprovalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "entityId" | "entityType" | "status" | "priority" | "dueDate" | "requestedAt" | "reviewedAt" | "comments" | "conditions" | "requesterId" | "approverId" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["approval"]>
  export type ApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ApprovalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ApprovalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approval"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      approver: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.ApprovalType
      entityId: string
      entityType: string
      status: $Enums.ApprovalStatus
      priority: $Enums.ApprovalPriority
      dueDate: Date | null
      requestedAt: Date
      reviewedAt: Date | null
      comments: string | null
      conditions: string[]
      requesterId: string
      approverId: string
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["approval"]>
    composites: {}
  }

  type ApprovalGetPayload<S extends boolean | null | undefined | ApprovalDefaultArgs> = $Result.GetResult<Prisma.$ApprovalPayload, S>

  type ApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovalCountAggregateInputType | true
    }

  export interface ApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approval'], meta: { name: 'Approval' } }
    /**
     * Find zero or one Approval that matches the filter.
     * @param {ApprovalFindUniqueArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalFindUniqueArgs>(args: SelectSubset<T, ApprovalFindUniqueArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Approval that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovalFindUniqueOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalFindFirstArgs>(args?: SelectSubset<T, ApprovalFindFirstArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approval.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalWithIdOnly = await prisma.approval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalFindManyArgs>(args?: SelectSubset<T, ApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Approval.
     * @param {ApprovalCreateArgs} args - Arguments to create a Approval.
     * @example
     * // Create one Approval
     * const Approval = await prisma.approval.create({
     *   data: {
     *     // ... data to create a Approval
     *   }
     * })
     * 
     */
    create<T extends ApprovalCreateArgs>(args: SelectSubset<T, ApprovalCreateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Approvals.
     * @param {ApprovalCreateManyArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalCreateManyArgs>(args?: SelectSubset<T, ApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Approvals and returns the data saved in the database.
     * @param {ApprovalCreateManyAndReturnArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Approvals and only return the `id`
     * const approvalWithIdOnly = await prisma.approval.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApprovalCreateManyAndReturnArgs>(args?: SelectSubset<T, ApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Approval.
     * @param {ApprovalDeleteArgs} args - Arguments to delete one Approval.
     * @example
     * // Delete one Approval
     * const Approval = await prisma.approval.delete({
     *   where: {
     *     // ... filter to delete one Approval
     *   }
     * })
     * 
     */
    delete<T extends ApprovalDeleteArgs>(args: SelectSubset<T, ApprovalDeleteArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Approval.
     * @param {ApprovalUpdateArgs} args - Arguments to update one Approval.
     * @example
     * // Update one Approval
     * const approval = await prisma.approval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalUpdateArgs>(args: SelectSubset<T, ApprovalUpdateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalDeleteManyArgs>(args?: SelectSubset<T, ApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalUpdateManyArgs>(args: SelectSubset<T, ApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals and returns the data updated in the database.
     * @param {ApprovalUpdateManyAndReturnArgs} args - Arguments to update many Approvals.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Approvals and only return the `id`
     * const approvalWithIdOnly = await prisma.approval.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApprovalUpdateManyAndReturnArgs>(args: SelectSubset<T, ApprovalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Approval.
     * @param {ApprovalUpsertArgs} args - Arguments to update or create a Approval.
     * @example
     * // Update or create a Approval
     * const approval = await prisma.approval.upsert({
     *   create: {
     *     // ... data to create a Approval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approval we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalUpsertArgs>(args: SelectSubset<T, ApprovalUpsertArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approval.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalCountArgs>(
      args?: Subset<T, ApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalAggregateArgs>(args: Subset<T, ApprovalAggregateArgs>): Prisma.PrismaPromise<GetApprovalAggregateType<T>>

    /**
     * Group by Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approval model
   */
  readonly fields: ApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approval model
   */
  interface ApprovalFieldRefs {
    readonly id: FieldRef<"Approval", 'String'>
    readonly type: FieldRef<"Approval", 'ApprovalType'>
    readonly entityId: FieldRef<"Approval", 'String'>
    readonly entityType: FieldRef<"Approval", 'String'>
    readonly status: FieldRef<"Approval", 'ApprovalStatus'>
    readonly priority: FieldRef<"Approval", 'ApprovalPriority'>
    readonly dueDate: FieldRef<"Approval", 'DateTime'>
    readonly requestedAt: FieldRef<"Approval", 'DateTime'>
    readonly reviewedAt: FieldRef<"Approval", 'DateTime'>
    readonly comments: FieldRef<"Approval", 'String'>
    readonly conditions: FieldRef<"Approval", 'String[]'>
    readonly requesterId: FieldRef<"Approval", 'String'>
    readonly approverId: FieldRef<"Approval", 'String'>
    readonly projectId: FieldRef<"Approval", 'String'>
    readonly createdAt: FieldRef<"Approval", 'DateTime'>
    readonly updatedAt: FieldRef<"Approval", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Approval findUnique
   */
  export type ApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findUniqueOrThrow
   */
  export type ApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findFirst
   */
  export type ApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findFirstOrThrow
   */
  export type ApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findMany
   */
  export type ApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval create
   */
  export type ApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a Approval.
     */
    data: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
  }

  /**
   * Approval createMany
   */
  export type ApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Approval createManyAndReturn
   */
  export type ApprovalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approval update
   */
  export type ApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a Approval.
     */
    data: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
    /**
     * Choose, which Approval to update.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval updateMany
   */
  export type ApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
  }

  /**
   * Approval updateManyAndReturn
   */
  export type ApprovalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approval upsert
   */
  export type ApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the Approval to update in case it exists.
     */
    where: ApprovalWhereUniqueInput
    /**
     * In case the Approval found by the `where` argument doesn't exist, create a new Approval with this data.
     */
    create: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
    /**
     * In case the Approval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
  }

  /**
   * Approval delete
   */
  export type ApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter which Approval to delete.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval deleteMany
   */
  export type ApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to delete
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to delete.
     */
    limit?: number
  }

  /**
   * Approval without action
   */
  export type ApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
  }


  /**
   * Model SafetyIncident
   */

  export type AggregateSafetyIncident = {
    _count: SafetyIncidentCountAggregateOutputType | null
    _avg: SafetyIncidentAvgAggregateOutputType | null
    _sum: SafetyIncidentSumAggregateOutputType | null
    _min: SafetyIncidentMinAggregateOutputType | null
    _max: SafetyIncidentMaxAggregateOutputType | null
  }

  export type SafetyIncidentAvgAggregateOutputType = {
    injuryCount: number | null
  }

  export type SafetyIncidentSumAggregateOutputType = {
    injuryCount: number | null
  }

  export type SafetyIncidentMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.IncidentType | null
    severity: $Enums.IncidentSeverity | null
    status: $Enums.IncidentStatus | null
    location: string | null
    injuryCount: number | null
    nearMiss: boolean | null
    regulatoryNotificationRequired: boolean | null
    clientNotificationRequired: boolean | null
    rootCause: string | null
    correctiveActions: string | null
    preventiveMeasures: string | null
    investigationComplete: boolean | null
    occurredAt: Date | null
    reportedAt: Date | null
    resolvedAt: Date | null
    reporterId: string | null
    assignedToId: string | null
    projectId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SafetyIncidentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.IncidentType | null
    severity: $Enums.IncidentSeverity | null
    status: $Enums.IncidentStatus | null
    location: string | null
    injuryCount: number | null
    nearMiss: boolean | null
    regulatoryNotificationRequired: boolean | null
    clientNotificationRequired: boolean | null
    rootCause: string | null
    correctiveActions: string | null
    preventiveMeasures: string | null
    investigationComplete: boolean | null
    occurredAt: Date | null
    reportedAt: Date | null
    resolvedAt: Date | null
    reporterId: string | null
    assignedToId: string | null
    projectId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SafetyIncidentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    severity: number
    status: number
    location: number
    coordinates: number
    injuryCount: number
    nearMiss: number
    regulatoryNotificationRequired: number
    clientNotificationRequired: number
    rootCause: number
    correctiveActions: number
    preventiveMeasures: number
    investigationComplete: number
    occurredAt: number
    reportedAt: number
    resolvedAt: number
    reporterId: number
    assignedToId: number
    projectId: number
    postId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SafetyIncidentAvgAggregateInputType = {
    injuryCount?: true
  }

  export type SafetyIncidentSumAggregateInputType = {
    injuryCount?: true
  }

  export type SafetyIncidentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    severity?: true
    status?: true
    location?: true
    injuryCount?: true
    nearMiss?: true
    regulatoryNotificationRequired?: true
    clientNotificationRequired?: true
    rootCause?: true
    correctiveActions?: true
    preventiveMeasures?: true
    investigationComplete?: true
    occurredAt?: true
    reportedAt?: true
    resolvedAt?: true
    reporterId?: true
    assignedToId?: true
    projectId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SafetyIncidentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    severity?: true
    status?: true
    location?: true
    injuryCount?: true
    nearMiss?: true
    regulatoryNotificationRequired?: true
    clientNotificationRequired?: true
    rootCause?: true
    correctiveActions?: true
    preventiveMeasures?: true
    investigationComplete?: true
    occurredAt?: true
    reportedAt?: true
    resolvedAt?: true
    reporterId?: true
    assignedToId?: true
    projectId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SafetyIncidentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    severity?: true
    status?: true
    location?: true
    coordinates?: true
    injuryCount?: true
    nearMiss?: true
    regulatoryNotificationRequired?: true
    clientNotificationRequired?: true
    rootCause?: true
    correctiveActions?: true
    preventiveMeasures?: true
    investigationComplete?: true
    occurredAt?: true
    reportedAt?: true
    resolvedAt?: true
    reporterId?: true
    assignedToId?: true
    projectId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SafetyIncidentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SafetyIncident to aggregate.
     */
    where?: SafetyIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SafetyIncidents to fetch.
     */
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SafetyIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SafetyIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SafetyIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SafetyIncidents
    **/
    _count?: true | SafetyIncidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SafetyIncidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SafetyIncidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SafetyIncidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SafetyIncidentMaxAggregateInputType
  }

  export type GetSafetyIncidentAggregateType<T extends SafetyIncidentAggregateArgs> = {
        [P in keyof T & keyof AggregateSafetyIncident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSafetyIncident[P]>
      : GetScalarType<T[P], AggregateSafetyIncident[P]>
  }




  export type SafetyIncidentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SafetyIncidentWhereInput
    orderBy?: SafetyIncidentOrderByWithAggregationInput | SafetyIncidentOrderByWithAggregationInput[]
    by: SafetyIncidentScalarFieldEnum[] | SafetyIncidentScalarFieldEnum
    having?: SafetyIncidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SafetyIncidentCountAggregateInputType | true
    _avg?: SafetyIncidentAvgAggregateInputType
    _sum?: SafetyIncidentSumAggregateInputType
    _min?: SafetyIncidentMinAggregateInputType
    _max?: SafetyIncidentMaxAggregateInputType
  }

  export type SafetyIncidentGroupByOutputType = {
    id: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity: $Enums.IncidentSeverity
    status: $Enums.IncidentStatus
    location: string | null
    coordinates: JsonValue | null
    injuryCount: number
    nearMiss: boolean
    regulatoryNotificationRequired: boolean
    clientNotificationRequired: boolean
    rootCause: string | null
    correctiveActions: string | null
    preventiveMeasures: string | null
    investigationComplete: boolean
    occurredAt: Date
    reportedAt: Date
    resolvedAt: Date | null
    reporterId: string
    assignedToId: string | null
    projectId: string
    postId: string
    createdAt: Date
    updatedAt: Date
    _count: SafetyIncidentCountAggregateOutputType | null
    _avg: SafetyIncidentAvgAggregateOutputType | null
    _sum: SafetyIncidentSumAggregateOutputType | null
    _min: SafetyIncidentMinAggregateOutputType | null
    _max: SafetyIncidentMaxAggregateOutputType | null
  }

  type GetSafetyIncidentGroupByPayload<T extends SafetyIncidentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SafetyIncidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SafetyIncidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SafetyIncidentGroupByOutputType[P]>
            : GetScalarType<T[P], SafetyIncidentGroupByOutputType[P]>
        }
      >
    >


  export type SafetyIncidentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    severity?: boolean
    status?: boolean
    location?: boolean
    coordinates?: boolean
    injuryCount?: boolean
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: boolean
    correctiveActions?: boolean
    preventiveMeasures?: boolean
    investigationComplete?: boolean
    occurredAt?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    reporterId?: boolean
    assignedToId?: boolean
    projectId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["safetyIncident"]>

  export type SafetyIncidentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    severity?: boolean
    status?: boolean
    location?: boolean
    coordinates?: boolean
    injuryCount?: boolean
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: boolean
    correctiveActions?: boolean
    preventiveMeasures?: boolean
    investigationComplete?: boolean
    occurredAt?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    reporterId?: boolean
    assignedToId?: boolean
    projectId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["safetyIncident"]>

  export type SafetyIncidentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    severity?: boolean
    status?: boolean
    location?: boolean
    coordinates?: boolean
    injuryCount?: boolean
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: boolean
    correctiveActions?: boolean
    preventiveMeasures?: boolean
    investigationComplete?: boolean
    occurredAt?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    reporterId?: boolean
    assignedToId?: boolean
    projectId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["safetyIncident"]>

  export type SafetyIncidentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    severity?: boolean
    status?: boolean
    location?: boolean
    coordinates?: boolean
    injuryCount?: boolean
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: boolean
    correctiveActions?: boolean
    preventiveMeasures?: boolean
    investigationComplete?: boolean
    occurredAt?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    reporterId?: boolean
    assignedToId?: boolean
    projectId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SafetyIncidentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "type" | "severity" | "status" | "location" | "coordinates" | "injuryCount" | "nearMiss" | "regulatoryNotificationRequired" | "clientNotificationRequired" | "rootCause" | "correctiveActions" | "preventiveMeasures" | "investigationComplete" | "occurredAt" | "reportedAt" | "resolvedAt" | "reporterId" | "assignedToId" | "projectId" | "postId" | "createdAt" | "updatedAt", ExtArgs["result"]["safetyIncident"]>
  export type SafetyIncidentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type SafetyIncidentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type SafetyIncidentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | SafetyIncident$assignedToArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $SafetyIncidentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SafetyIncident"
    objects: {
      reporter: Prisma.$UserPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      type: $Enums.IncidentType
      severity: $Enums.IncidentSeverity
      status: $Enums.IncidentStatus
      location: string | null
      coordinates: Prisma.JsonValue | null
      injuryCount: number
      nearMiss: boolean
      regulatoryNotificationRequired: boolean
      clientNotificationRequired: boolean
      rootCause: string | null
      correctiveActions: string | null
      preventiveMeasures: string | null
      investigationComplete: boolean
      occurredAt: Date
      reportedAt: Date
      resolvedAt: Date | null
      reporterId: string
      assignedToId: string | null
      projectId: string
      postId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["safetyIncident"]>
    composites: {}
  }

  type SafetyIncidentGetPayload<S extends boolean | null | undefined | SafetyIncidentDefaultArgs> = $Result.GetResult<Prisma.$SafetyIncidentPayload, S>

  type SafetyIncidentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SafetyIncidentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SafetyIncidentCountAggregateInputType | true
    }

  export interface SafetyIncidentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SafetyIncident'], meta: { name: 'SafetyIncident' } }
    /**
     * Find zero or one SafetyIncident that matches the filter.
     * @param {SafetyIncidentFindUniqueArgs} args - Arguments to find a SafetyIncident
     * @example
     * // Get one SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SafetyIncidentFindUniqueArgs>(args: SelectSubset<T, SafetyIncidentFindUniqueArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SafetyIncident that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SafetyIncidentFindUniqueOrThrowArgs} args - Arguments to find a SafetyIncident
     * @example
     * // Get one SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SafetyIncidentFindUniqueOrThrowArgs>(args: SelectSubset<T, SafetyIncidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SafetyIncident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentFindFirstArgs} args - Arguments to find a SafetyIncident
     * @example
     * // Get one SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SafetyIncidentFindFirstArgs>(args?: SelectSubset<T, SafetyIncidentFindFirstArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SafetyIncident that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentFindFirstOrThrowArgs} args - Arguments to find a SafetyIncident
     * @example
     * // Get one SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SafetyIncidentFindFirstOrThrowArgs>(args?: SelectSubset<T, SafetyIncidentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SafetyIncidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SafetyIncidents
     * const safetyIncidents = await prisma.safetyIncident.findMany()
     * 
     * // Get first 10 SafetyIncidents
     * const safetyIncidents = await prisma.safetyIncident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const safetyIncidentWithIdOnly = await prisma.safetyIncident.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SafetyIncidentFindManyArgs>(args?: SelectSubset<T, SafetyIncidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SafetyIncident.
     * @param {SafetyIncidentCreateArgs} args - Arguments to create a SafetyIncident.
     * @example
     * // Create one SafetyIncident
     * const SafetyIncident = await prisma.safetyIncident.create({
     *   data: {
     *     // ... data to create a SafetyIncident
     *   }
     * })
     * 
     */
    create<T extends SafetyIncidentCreateArgs>(args: SelectSubset<T, SafetyIncidentCreateArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SafetyIncidents.
     * @param {SafetyIncidentCreateManyArgs} args - Arguments to create many SafetyIncidents.
     * @example
     * // Create many SafetyIncidents
     * const safetyIncident = await prisma.safetyIncident.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SafetyIncidentCreateManyArgs>(args?: SelectSubset<T, SafetyIncidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SafetyIncidents and returns the data saved in the database.
     * @param {SafetyIncidentCreateManyAndReturnArgs} args - Arguments to create many SafetyIncidents.
     * @example
     * // Create many SafetyIncidents
     * const safetyIncident = await prisma.safetyIncident.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SafetyIncidents and only return the `id`
     * const safetyIncidentWithIdOnly = await prisma.safetyIncident.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SafetyIncidentCreateManyAndReturnArgs>(args?: SelectSubset<T, SafetyIncidentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SafetyIncident.
     * @param {SafetyIncidentDeleteArgs} args - Arguments to delete one SafetyIncident.
     * @example
     * // Delete one SafetyIncident
     * const SafetyIncident = await prisma.safetyIncident.delete({
     *   where: {
     *     // ... filter to delete one SafetyIncident
     *   }
     * })
     * 
     */
    delete<T extends SafetyIncidentDeleteArgs>(args: SelectSubset<T, SafetyIncidentDeleteArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SafetyIncident.
     * @param {SafetyIncidentUpdateArgs} args - Arguments to update one SafetyIncident.
     * @example
     * // Update one SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SafetyIncidentUpdateArgs>(args: SelectSubset<T, SafetyIncidentUpdateArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SafetyIncidents.
     * @param {SafetyIncidentDeleteManyArgs} args - Arguments to filter SafetyIncidents to delete.
     * @example
     * // Delete a few SafetyIncidents
     * const { count } = await prisma.safetyIncident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SafetyIncidentDeleteManyArgs>(args?: SelectSubset<T, SafetyIncidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SafetyIncidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SafetyIncidents
     * const safetyIncident = await prisma.safetyIncident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SafetyIncidentUpdateManyArgs>(args: SelectSubset<T, SafetyIncidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SafetyIncidents and returns the data updated in the database.
     * @param {SafetyIncidentUpdateManyAndReturnArgs} args - Arguments to update many SafetyIncidents.
     * @example
     * // Update many SafetyIncidents
     * const safetyIncident = await prisma.safetyIncident.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SafetyIncidents and only return the `id`
     * const safetyIncidentWithIdOnly = await prisma.safetyIncident.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SafetyIncidentUpdateManyAndReturnArgs>(args: SelectSubset<T, SafetyIncidentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SafetyIncident.
     * @param {SafetyIncidentUpsertArgs} args - Arguments to update or create a SafetyIncident.
     * @example
     * // Update or create a SafetyIncident
     * const safetyIncident = await prisma.safetyIncident.upsert({
     *   create: {
     *     // ... data to create a SafetyIncident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SafetyIncident we want to update
     *   }
     * })
     */
    upsert<T extends SafetyIncidentUpsertArgs>(args: SelectSubset<T, SafetyIncidentUpsertArgs<ExtArgs>>): Prisma__SafetyIncidentClient<$Result.GetResult<Prisma.$SafetyIncidentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SafetyIncidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentCountArgs} args - Arguments to filter SafetyIncidents to count.
     * @example
     * // Count the number of SafetyIncidents
     * const count = await prisma.safetyIncident.count({
     *   where: {
     *     // ... the filter for the SafetyIncidents we want to count
     *   }
     * })
    **/
    count<T extends SafetyIncidentCountArgs>(
      args?: Subset<T, SafetyIncidentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SafetyIncidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SafetyIncident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SafetyIncidentAggregateArgs>(args: Subset<T, SafetyIncidentAggregateArgs>): Prisma.PrismaPromise<GetSafetyIncidentAggregateType<T>>

    /**
     * Group by SafetyIncident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SafetyIncidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SafetyIncidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SafetyIncidentGroupByArgs['orderBy'] }
        : { orderBy?: SafetyIncidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SafetyIncidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSafetyIncidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SafetyIncident model
   */
  readonly fields: SafetyIncidentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SafetyIncident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SafetyIncidentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reporter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends SafetyIncident$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, SafetyIncident$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SafetyIncident model
   */
  interface SafetyIncidentFieldRefs {
    readonly id: FieldRef<"SafetyIncident", 'String'>
    readonly title: FieldRef<"SafetyIncident", 'String'>
    readonly description: FieldRef<"SafetyIncident", 'String'>
    readonly type: FieldRef<"SafetyIncident", 'IncidentType'>
    readonly severity: FieldRef<"SafetyIncident", 'IncidentSeverity'>
    readonly status: FieldRef<"SafetyIncident", 'IncidentStatus'>
    readonly location: FieldRef<"SafetyIncident", 'String'>
    readonly coordinates: FieldRef<"SafetyIncident", 'Json'>
    readonly injuryCount: FieldRef<"SafetyIncident", 'Int'>
    readonly nearMiss: FieldRef<"SafetyIncident", 'Boolean'>
    readonly regulatoryNotificationRequired: FieldRef<"SafetyIncident", 'Boolean'>
    readonly clientNotificationRequired: FieldRef<"SafetyIncident", 'Boolean'>
    readonly rootCause: FieldRef<"SafetyIncident", 'String'>
    readonly correctiveActions: FieldRef<"SafetyIncident", 'String'>
    readonly preventiveMeasures: FieldRef<"SafetyIncident", 'String'>
    readonly investigationComplete: FieldRef<"SafetyIncident", 'Boolean'>
    readonly occurredAt: FieldRef<"SafetyIncident", 'DateTime'>
    readonly reportedAt: FieldRef<"SafetyIncident", 'DateTime'>
    readonly resolvedAt: FieldRef<"SafetyIncident", 'DateTime'>
    readonly reporterId: FieldRef<"SafetyIncident", 'String'>
    readonly assignedToId: FieldRef<"SafetyIncident", 'String'>
    readonly projectId: FieldRef<"SafetyIncident", 'String'>
    readonly postId: FieldRef<"SafetyIncident", 'String'>
    readonly createdAt: FieldRef<"SafetyIncident", 'DateTime'>
    readonly updatedAt: FieldRef<"SafetyIncident", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SafetyIncident findUnique
   */
  export type SafetyIncidentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter, which SafetyIncident to fetch.
     */
    where: SafetyIncidentWhereUniqueInput
  }

  /**
   * SafetyIncident findUniqueOrThrow
   */
  export type SafetyIncidentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter, which SafetyIncident to fetch.
     */
    where: SafetyIncidentWhereUniqueInput
  }

  /**
   * SafetyIncident findFirst
   */
  export type SafetyIncidentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter, which SafetyIncident to fetch.
     */
    where?: SafetyIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SafetyIncidents to fetch.
     */
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SafetyIncidents.
     */
    cursor?: SafetyIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SafetyIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SafetyIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SafetyIncidents.
     */
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * SafetyIncident findFirstOrThrow
   */
  export type SafetyIncidentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter, which SafetyIncident to fetch.
     */
    where?: SafetyIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SafetyIncidents to fetch.
     */
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SafetyIncidents.
     */
    cursor?: SafetyIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SafetyIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SafetyIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SafetyIncidents.
     */
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * SafetyIncident findMany
   */
  export type SafetyIncidentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter, which SafetyIncidents to fetch.
     */
    where?: SafetyIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SafetyIncidents to fetch.
     */
    orderBy?: SafetyIncidentOrderByWithRelationInput | SafetyIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SafetyIncidents.
     */
    cursor?: SafetyIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SafetyIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SafetyIncidents.
     */
    skip?: number
    distinct?: SafetyIncidentScalarFieldEnum | SafetyIncidentScalarFieldEnum[]
  }

  /**
   * SafetyIncident create
   */
  export type SafetyIncidentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * The data needed to create a SafetyIncident.
     */
    data: XOR<SafetyIncidentCreateInput, SafetyIncidentUncheckedCreateInput>
  }

  /**
   * SafetyIncident createMany
   */
  export type SafetyIncidentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SafetyIncidents.
     */
    data: SafetyIncidentCreateManyInput | SafetyIncidentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SafetyIncident createManyAndReturn
   */
  export type SafetyIncidentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * The data used to create many SafetyIncidents.
     */
    data: SafetyIncidentCreateManyInput | SafetyIncidentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SafetyIncident update
   */
  export type SafetyIncidentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * The data needed to update a SafetyIncident.
     */
    data: XOR<SafetyIncidentUpdateInput, SafetyIncidentUncheckedUpdateInput>
    /**
     * Choose, which SafetyIncident to update.
     */
    where: SafetyIncidentWhereUniqueInput
  }

  /**
   * SafetyIncident updateMany
   */
  export type SafetyIncidentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SafetyIncidents.
     */
    data: XOR<SafetyIncidentUpdateManyMutationInput, SafetyIncidentUncheckedUpdateManyInput>
    /**
     * Filter which SafetyIncidents to update
     */
    where?: SafetyIncidentWhereInput
    /**
     * Limit how many SafetyIncidents to update.
     */
    limit?: number
  }

  /**
   * SafetyIncident updateManyAndReturn
   */
  export type SafetyIncidentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * The data used to update SafetyIncidents.
     */
    data: XOR<SafetyIncidentUpdateManyMutationInput, SafetyIncidentUncheckedUpdateManyInput>
    /**
     * Filter which SafetyIncidents to update
     */
    where?: SafetyIncidentWhereInput
    /**
     * Limit how many SafetyIncidents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SafetyIncident upsert
   */
  export type SafetyIncidentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * The filter to search for the SafetyIncident to update in case it exists.
     */
    where: SafetyIncidentWhereUniqueInput
    /**
     * In case the SafetyIncident found by the `where` argument doesn't exist, create a new SafetyIncident with this data.
     */
    create: XOR<SafetyIncidentCreateInput, SafetyIncidentUncheckedCreateInput>
    /**
     * In case the SafetyIncident was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SafetyIncidentUpdateInput, SafetyIncidentUncheckedUpdateInput>
  }

  /**
   * SafetyIncident delete
   */
  export type SafetyIncidentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
    /**
     * Filter which SafetyIncident to delete.
     */
    where: SafetyIncidentWhereUniqueInput
  }

  /**
   * SafetyIncident deleteMany
   */
  export type SafetyIncidentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SafetyIncidents to delete
     */
    where?: SafetyIncidentWhereInput
    /**
     * Limit how many SafetyIncidents to delete.
     */
    limit?: number
  }

  /**
   * SafetyIncident.assignedTo
   */
  export type SafetyIncident$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SafetyIncident without action
   */
  export type SafetyIncidentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SafetyIncident
     */
    select?: SafetyIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SafetyIncident
     */
    omit?: SafetyIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SafetyIncidentInclude<ExtArgs> | null
  }


  /**
   * Model UserFollow
   */

  export type AggregateUserFollow = {
    _count: UserFollowCountAggregateOutputType | null
    _min: UserFollowMinAggregateOutputType | null
    _max: UserFollowMaxAggregateOutputType | null
  }

  export type UserFollowMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    followerId: string | null
    followingId: string | null
  }

  export type UserFollowMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    followerId: string | null
    followingId: string | null
  }

  export type UserFollowCountAggregateOutputType = {
    id: number
    createdAt: number
    followerId: number
    followingId: number
    _all: number
  }


  export type UserFollowMinAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
  }

  export type UserFollowMaxAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
  }

  export type UserFollowCountAggregateInputType = {
    id?: true
    createdAt?: true
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type UserFollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFollow to aggregate.
     */
    where?: UserFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollows to fetch.
     */
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFollows
    **/
    _count?: true | UserFollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFollowMaxAggregateInputType
  }

  export type GetUserFollowAggregateType<T extends UserFollowAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFollow[P]>
      : GetScalarType<T[P], AggregateUserFollow[P]>
  }




  export type UserFollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowWhereInput
    orderBy?: UserFollowOrderByWithAggregationInput | UserFollowOrderByWithAggregationInput[]
    by: UserFollowScalarFieldEnum[] | UserFollowScalarFieldEnum
    having?: UserFollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFollowCountAggregateInputType | true
    _min?: UserFollowMinAggregateInputType
    _max?: UserFollowMaxAggregateInputType
  }

  export type UserFollowGroupByOutputType = {
    id: string
    createdAt: Date
    followerId: string
    followingId: string
    _count: UserFollowCountAggregateOutputType | null
    _min: UserFollowMinAggregateOutputType | null
    _max: UserFollowMaxAggregateOutputType | null
  }

  type GetUserFollowGroupByPayload<T extends UserFollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFollowGroupByOutputType[P]>
            : GetScalarType<T[P], UserFollowGroupByOutputType[P]>
        }
      >
    >


  export type UserFollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFollow"]>

  export type UserFollowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFollow"]>

  export type UserFollowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFollow"]>

  export type UserFollowSelectScalar = {
    id?: boolean
    createdAt?: boolean
    followerId?: boolean
    followingId?: boolean
  }

  export type UserFollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "followerId" | "followingId", ExtArgs["result"]["userFollow"]>
  export type UserFollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserFollowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserFollowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserFollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFollow"
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>
      following: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      followerId: string
      followingId: string
    }, ExtArgs["result"]["userFollow"]>
    composites: {}
  }

  type UserFollowGetPayload<S extends boolean | null | undefined | UserFollowDefaultArgs> = $Result.GetResult<Prisma.$UserFollowPayload, S>

  type UserFollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserFollowCountAggregateInputType | true
    }

  export interface UserFollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFollow'], meta: { name: 'UserFollow' } }
    /**
     * Find zero or one UserFollow that matches the filter.
     * @param {UserFollowFindUniqueArgs} args - Arguments to find a UserFollow
     * @example
     * // Get one UserFollow
     * const userFollow = await prisma.userFollow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFollowFindUniqueArgs>(args: SelectSubset<T, UserFollowFindUniqueArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserFollow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFollowFindUniqueOrThrowArgs} args - Arguments to find a UserFollow
     * @example
     * // Get one UserFollow
     * const userFollow = await prisma.userFollow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFollowFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFollow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowFindFirstArgs} args - Arguments to find a UserFollow
     * @example
     * // Get one UserFollow
     * const userFollow = await prisma.userFollow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFollowFindFirstArgs>(args?: SelectSubset<T, UserFollowFindFirstArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFollow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowFindFirstOrThrowArgs} args - Arguments to find a UserFollow
     * @example
     * // Get one UserFollow
     * const userFollow = await prisma.userFollow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFollowFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserFollows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFollows
     * const userFollows = await prisma.userFollow.findMany()
     * 
     * // Get first 10 UserFollows
     * const userFollows = await prisma.userFollow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFollowWithIdOnly = await prisma.userFollow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFollowFindManyArgs>(args?: SelectSubset<T, UserFollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserFollow.
     * @param {UserFollowCreateArgs} args - Arguments to create a UserFollow.
     * @example
     * // Create one UserFollow
     * const UserFollow = await prisma.userFollow.create({
     *   data: {
     *     // ... data to create a UserFollow
     *   }
     * })
     * 
     */
    create<T extends UserFollowCreateArgs>(args: SelectSubset<T, UserFollowCreateArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserFollows.
     * @param {UserFollowCreateManyArgs} args - Arguments to create many UserFollows.
     * @example
     * // Create many UserFollows
     * const userFollow = await prisma.userFollow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFollowCreateManyArgs>(args?: SelectSubset<T, UserFollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserFollows and returns the data saved in the database.
     * @param {UserFollowCreateManyAndReturnArgs} args - Arguments to create many UserFollows.
     * @example
     * // Create many UserFollows
     * const userFollow = await prisma.userFollow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserFollows and only return the `id`
     * const userFollowWithIdOnly = await prisma.userFollow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserFollowCreateManyAndReturnArgs>(args?: SelectSubset<T, UserFollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserFollow.
     * @param {UserFollowDeleteArgs} args - Arguments to delete one UserFollow.
     * @example
     * // Delete one UserFollow
     * const UserFollow = await prisma.userFollow.delete({
     *   where: {
     *     // ... filter to delete one UserFollow
     *   }
     * })
     * 
     */
    delete<T extends UserFollowDeleteArgs>(args: SelectSubset<T, UserFollowDeleteArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserFollow.
     * @param {UserFollowUpdateArgs} args - Arguments to update one UserFollow.
     * @example
     * // Update one UserFollow
     * const userFollow = await prisma.userFollow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFollowUpdateArgs>(args: SelectSubset<T, UserFollowUpdateArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserFollows.
     * @param {UserFollowDeleteManyArgs} args - Arguments to filter UserFollows to delete.
     * @example
     * // Delete a few UserFollows
     * const { count } = await prisma.userFollow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFollowDeleteManyArgs>(args?: SelectSubset<T, UserFollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFollows
     * const userFollow = await prisma.userFollow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFollowUpdateManyArgs>(args: SelectSubset<T, UserFollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFollows and returns the data updated in the database.
     * @param {UserFollowUpdateManyAndReturnArgs} args - Arguments to update many UserFollows.
     * @example
     * // Update many UserFollows
     * const userFollow = await prisma.userFollow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserFollows and only return the `id`
     * const userFollowWithIdOnly = await prisma.userFollow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserFollowUpdateManyAndReturnArgs>(args: SelectSubset<T, UserFollowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserFollow.
     * @param {UserFollowUpsertArgs} args - Arguments to update or create a UserFollow.
     * @example
     * // Update or create a UserFollow
     * const userFollow = await prisma.userFollow.upsert({
     *   create: {
     *     // ... data to create a UserFollow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFollow we want to update
     *   }
     * })
     */
    upsert<T extends UserFollowUpsertArgs>(args: SelectSubset<T, UserFollowUpsertArgs<ExtArgs>>): Prisma__UserFollowClient<$Result.GetResult<Prisma.$UserFollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowCountArgs} args - Arguments to filter UserFollows to count.
     * @example
     * // Count the number of UserFollows
     * const count = await prisma.userFollow.count({
     *   where: {
     *     // ... the filter for the UserFollows we want to count
     *   }
     * })
    **/
    count<T extends UserFollowCountArgs>(
      args?: Subset<T, UserFollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFollowAggregateArgs>(args: Subset<T, UserFollowAggregateArgs>): Prisma.PrismaPromise<GetUserFollowAggregateType<T>>

    /**
     * Group by UserFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFollowGroupByArgs['orderBy'] }
        : { orderBy?: UserFollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFollow model
   */
  readonly fields: UserFollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFollow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    following<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFollow model
   */
  interface UserFollowFieldRefs {
    readonly id: FieldRef<"UserFollow", 'String'>
    readonly createdAt: FieldRef<"UserFollow", 'DateTime'>
    readonly followerId: FieldRef<"UserFollow", 'String'>
    readonly followingId: FieldRef<"UserFollow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserFollow findUnique
   */
  export type UserFollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter, which UserFollow to fetch.
     */
    where: UserFollowWhereUniqueInput
  }

  /**
   * UserFollow findUniqueOrThrow
   */
  export type UserFollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter, which UserFollow to fetch.
     */
    where: UserFollowWhereUniqueInput
  }

  /**
   * UserFollow findFirst
   */
  export type UserFollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter, which UserFollow to fetch.
     */
    where?: UserFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollows to fetch.
     */
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFollows.
     */
    cursor?: UserFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFollows.
     */
    distinct?: UserFollowScalarFieldEnum | UserFollowScalarFieldEnum[]
  }

  /**
   * UserFollow findFirstOrThrow
   */
  export type UserFollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter, which UserFollow to fetch.
     */
    where?: UserFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollows to fetch.
     */
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFollows.
     */
    cursor?: UserFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFollows.
     */
    distinct?: UserFollowScalarFieldEnum | UserFollowScalarFieldEnum[]
  }

  /**
   * UserFollow findMany
   */
  export type UserFollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter, which UserFollows to fetch.
     */
    where?: UserFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollows to fetch.
     */
    orderBy?: UserFollowOrderByWithRelationInput | UserFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFollows.
     */
    cursor?: UserFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollows.
     */
    skip?: number
    distinct?: UserFollowScalarFieldEnum | UserFollowScalarFieldEnum[]
  }

  /**
   * UserFollow create
   */
  export type UserFollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFollow.
     */
    data: XOR<UserFollowCreateInput, UserFollowUncheckedCreateInput>
  }

  /**
   * UserFollow createMany
   */
  export type UserFollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFollows.
     */
    data: UserFollowCreateManyInput | UserFollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserFollow createManyAndReturn
   */
  export type UserFollowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * The data used to create many UserFollows.
     */
    data: UserFollowCreateManyInput | UserFollowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFollow update
   */
  export type UserFollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFollow.
     */
    data: XOR<UserFollowUpdateInput, UserFollowUncheckedUpdateInput>
    /**
     * Choose, which UserFollow to update.
     */
    where: UserFollowWhereUniqueInput
  }

  /**
   * UserFollow updateMany
   */
  export type UserFollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFollows.
     */
    data: XOR<UserFollowUpdateManyMutationInput, UserFollowUncheckedUpdateManyInput>
    /**
     * Filter which UserFollows to update
     */
    where?: UserFollowWhereInput
    /**
     * Limit how many UserFollows to update.
     */
    limit?: number
  }

  /**
   * UserFollow updateManyAndReturn
   */
  export type UserFollowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * The data used to update UserFollows.
     */
    data: XOR<UserFollowUpdateManyMutationInput, UserFollowUncheckedUpdateManyInput>
    /**
     * Filter which UserFollows to update
     */
    where?: UserFollowWhereInput
    /**
     * Limit how many UserFollows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFollow upsert
   */
  export type UserFollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFollow to update in case it exists.
     */
    where: UserFollowWhereUniqueInput
    /**
     * In case the UserFollow found by the `where` argument doesn't exist, create a new UserFollow with this data.
     */
    create: XOR<UserFollowCreateInput, UserFollowUncheckedCreateInput>
    /**
     * In case the UserFollow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFollowUpdateInput, UserFollowUncheckedUpdateInput>
  }

  /**
   * UserFollow delete
   */
  export type UserFollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
    /**
     * Filter which UserFollow to delete.
     */
    where: UserFollowWhereUniqueInput
  }

  /**
   * UserFollow deleteMany
   */
  export type UserFollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFollows to delete
     */
    where?: UserFollowWhereInput
    /**
     * Limit how many UserFollows to delete.
     */
    limit?: number
  }

  /**
   * UserFollow without action
   */
  export type UserFollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollow
     */
    select?: UserFollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollow
     */
    omit?: UserFollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    points: number | null
  }

  export type AchievementSumAggregateOutputType = {
    points: number | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: $Enums.AchievementCategory | null
    points: number | null
    rarity: $Enums.AchievementRarity | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: $Enums.AchievementCategory | null
    points: number | null
    rarity: $Enums.AchievementRarity | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    category: number
    points: number
    rarity: number
    conditions: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    points?: true
  }

  export type AchievementSumAggregateInputType = {
    points?: true
  }

  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    points?: true
    rarity?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    points?: true
    rarity?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    points?: true
    rarity?: true
    conditions?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points: number
    rarity: $Enums.AchievementRarity
    conditions: JsonValue
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    points?: boolean
    rarity?: boolean
    conditions?: boolean
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    points?: boolean
    rarity?: boolean
    conditions?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    points?: boolean
    rarity?: boolean
    conditions?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    points?: boolean
    rarity?: boolean
    conditions?: boolean
  }

  export type AchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "category" | "points" | "rarity" | "conditions", ExtArgs["result"]["achievement"]>
  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      userAchievements: Prisma.$UserAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string
      category: $Enums.AchievementCategory
      points: number
      rarity: $Enums.AchievementRarity
      conditions: Prisma.JsonValue
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements and returns the data updated in the database.
     * @param {AchievementUpdateManyAndReturnArgs} args - Arguments to update many Achievements.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, AchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userAchievements<T extends Achievement$userAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$userAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly name: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly icon: FieldRef<"Achievement", 'String'>
    readonly category: FieldRef<"Achievement", 'AchievementCategory'>
    readonly points: FieldRef<"Achievement", 'Int'>
    readonly rarity: FieldRef<"Achievement", 'AchievementRarity'>
    readonly conditions: FieldRef<"Achievement", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement updateManyAndReturn
   */
  export type AchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to delete.
     */
    limit?: number
  }

  /**
   * Achievement.userAchievements
   */
  export type Achievement$userAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementAvgAggregateOutputType = {
    progress: number | null
  }

  export type UserAchievementSumAggregateOutputType = {
    progress: number | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: string | null
    unlockedAt: Date | null
    progress: number | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: string | null
    unlockedAt: Date | null
    progress: number | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    unlockedAt: number
    progress: number
    userId: number
    achievementId: number
    _all: number
  }


  export type UserAchievementAvgAggregateInputType = {
    progress?: true
  }

  export type UserAchievementSumAggregateInputType = {
    progress?: true
  }

  export type UserAchievementMinAggregateInputType = {
    id?: true
    unlockedAt?: true
    progress?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    unlockedAt?: true
    progress?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    unlockedAt?: true
    progress?: true
    userId?: true
    achievementId?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _avg?: UserAchievementAvgAggregateInputType
    _sum?: UserAchievementSumAggregateInputType
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: string
    unlockedAt: Date
    progress: number
    userId: string
    achievementId: string
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    progress?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    progress?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    progress?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    unlockedAt?: boolean
    progress?: boolean
    userId?: boolean
    achievementId?: boolean
  }

  export type UserAchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "unlockedAt" | "progress" | "userId" | "achievementId", ExtArgs["result"]["userAchievement"]>
  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unlockedAt: Date
      progress: number
      userId: string
      achievementId: string
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements and returns the data updated in the database.
     * @param {UserAchievementUpdateManyAndReturnArgs} args - Arguments to update many UserAchievements.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'String'>
    readonly unlockedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly progress: FieldRef<"UserAchievement", 'Float'>
    readonly userId: FieldRef<"UserAchievement", 'String'>
    readonly achievementId: FieldRef<"UserAchievement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
  }

  /**
   * UserAchievement updateManyAndReturn
   */
  export type UserAchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to delete.
     */
    limit?: number
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    category: $Enums.BadgeCategory | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    category: $Enums.BadgeCategory | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    color: number
    category: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    category?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    category?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    category?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string
    color: string
    category: $Enums.BadgeCategory
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    category?: boolean
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    category?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    category?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    category?: boolean
  }

  export type BadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "color" | "category", ExtArgs["result"]["badge"]>
  export type BadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string
      color: string
      category: $Enums.BadgeCategory
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges and returns the data updated in the database.
     * @param {BadgeUpdateManyAndReturnArgs} args - Arguments to update many Badges.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, BadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userBadges<T extends Badge$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, Badge$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly icon: FieldRef<"Badge", 'String'>
    readonly color: FieldRef<"Badge", 'String'>
    readonly category: FieldRef<"Badge", 'BadgeCategory'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge updateManyAndReturn
   */
  export type BadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to delete.
     */
    limit?: number
  }

  /**
   * Badge.userBadges
   */
  export type Badge$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeAvgAggregateOutputType = {
    level: number | null
  }

  export type UserBadgeSumAggregateOutputType = {
    level: number | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: string | null
    earnedAt: Date | null
    level: number | null
    userId: string | null
    badgeId: string | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: string | null
    earnedAt: Date | null
    level: number | null
    userId: string | null
    badgeId: string | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    earnedAt: number
    level: number
    userId: number
    badgeId: number
    _all: number
  }


  export type UserBadgeAvgAggregateInputType = {
    level?: true
  }

  export type UserBadgeSumAggregateInputType = {
    level?: true
  }

  export type UserBadgeMinAggregateInputType = {
    id?: true
    earnedAt?: true
    level?: true
    userId?: true
    badgeId?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    earnedAt?: true
    level?: true
    userId?: true
    badgeId?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    earnedAt?: true
    level?: true
    userId?: true
    badgeId?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBadgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBadgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _avg?: UserBadgeAvgAggregateInputType
    _sum?: UserBadgeSumAggregateInputType
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: string
    earnedAt: Date
    level: number
    userId: string
    badgeId: string
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    level?: boolean
    userId?: boolean
    badgeId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    level?: boolean
    userId?: boolean
    badgeId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    level?: boolean
    userId?: boolean
    badgeId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    id?: boolean
    earnedAt?: boolean
    level?: boolean
    userId?: boolean
    badgeId?: boolean
  }

  export type UserBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "earnedAt" | "level" | "userId" | "badgeId", ExtArgs["result"]["userBadge"]>
  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      badge: Prisma.$BadgePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      earnedAt: Date
      level: number
      userId: string
      badgeId: string
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges and returns the data updated in the database.
     * @param {UserBadgeUpdateManyAndReturnArgs} args - Arguments to update many UserBadges.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserBadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, UserBadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    badge<T extends BadgeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BadgeDefaultArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'String'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
    readonly level: FieldRef<"UserBadge", 'Int'>
    readonly userId: FieldRef<"UserBadge", 'String'>
    readonly badgeId: FieldRef<"UserBadge", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
  }

  /**
   * UserBadge updateManyAndReturn
   */
  export type UserBadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to delete.
     */
    limit?: number
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model XPTransaction
   */

  export type AggregateXPTransaction = {
    _count: XPTransactionCountAggregateOutputType | null
    _avg: XPTransactionAvgAggregateOutputType | null
    _sum: XPTransactionSumAggregateOutputType | null
    _min: XPTransactionMinAggregateOutputType | null
    _max: XPTransactionMaxAggregateOutputType | null
  }

  export type XPTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type XPTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type XPTransactionMinAggregateOutputType = {
    id: string | null
    amount: number | null
    reason: string | null
    category: $Enums.XPCategory | null
    createdAt: Date | null
    userId: string | null
  }

  export type XPTransactionMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    reason: string | null
    category: $Enums.XPCategory | null
    createdAt: Date | null
    userId: string | null
  }

  export type XPTransactionCountAggregateOutputType = {
    id: number
    amount: number
    reason: number
    category: number
    metadata: number
    createdAt: number
    userId: number
    _all: number
  }


  export type XPTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type XPTransactionSumAggregateInputType = {
    amount?: true
  }

  export type XPTransactionMinAggregateInputType = {
    id?: true
    amount?: true
    reason?: true
    category?: true
    createdAt?: true
    userId?: true
  }

  export type XPTransactionMaxAggregateInputType = {
    id?: true
    amount?: true
    reason?: true
    category?: true
    createdAt?: true
    userId?: true
  }

  export type XPTransactionCountAggregateInputType = {
    id?: true
    amount?: true
    reason?: true
    category?: true
    metadata?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type XPTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XPTransaction to aggregate.
     */
    where?: XPTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XPTransactions to fetch.
     */
    orderBy?: XPTransactionOrderByWithRelationInput | XPTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: XPTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XPTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XPTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned XPTransactions
    **/
    _count?: true | XPTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: XPTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: XPTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: XPTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: XPTransactionMaxAggregateInputType
  }

  export type GetXPTransactionAggregateType<T extends XPTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateXPTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateXPTransaction[P]>
      : GetScalarType<T[P], AggregateXPTransaction[P]>
  }




  export type XPTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XPTransactionWhereInput
    orderBy?: XPTransactionOrderByWithAggregationInput | XPTransactionOrderByWithAggregationInput[]
    by: XPTransactionScalarFieldEnum[] | XPTransactionScalarFieldEnum
    having?: XPTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: XPTransactionCountAggregateInputType | true
    _avg?: XPTransactionAvgAggregateInputType
    _sum?: XPTransactionSumAggregateInputType
    _min?: XPTransactionMinAggregateInputType
    _max?: XPTransactionMaxAggregateInputType
  }

  export type XPTransactionGroupByOutputType = {
    id: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata: JsonValue | null
    createdAt: Date
    userId: string
    _count: XPTransactionCountAggregateOutputType | null
    _avg: XPTransactionAvgAggregateOutputType | null
    _sum: XPTransactionSumAggregateOutputType | null
    _min: XPTransactionMinAggregateOutputType | null
    _max: XPTransactionMaxAggregateOutputType | null
  }

  type GetXPTransactionGroupByPayload<T extends XPTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<XPTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof XPTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], XPTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], XPTransactionGroupByOutputType[P]>
        }
      >
    >


  export type XPTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    reason?: boolean
    category?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xPTransaction"]>

  export type XPTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    reason?: boolean
    category?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xPTransaction"]>

  export type XPTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    reason?: boolean
    category?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xPTransaction"]>

  export type XPTransactionSelectScalar = {
    id?: boolean
    amount?: boolean
    reason?: boolean
    category?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type XPTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "reason" | "category" | "metadata" | "createdAt" | "userId", ExtArgs["result"]["xPTransaction"]>
  export type XPTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XPTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XPTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $XPTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "XPTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      reason: string
      category: $Enums.XPCategory
      metadata: Prisma.JsonValue | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["xPTransaction"]>
    composites: {}
  }

  type XPTransactionGetPayload<S extends boolean | null | undefined | XPTransactionDefaultArgs> = $Result.GetResult<Prisma.$XPTransactionPayload, S>

  type XPTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<XPTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: XPTransactionCountAggregateInputType | true
    }

  export interface XPTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['XPTransaction'], meta: { name: 'XPTransaction' } }
    /**
     * Find zero or one XPTransaction that matches the filter.
     * @param {XPTransactionFindUniqueArgs} args - Arguments to find a XPTransaction
     * @example
     * // Get one XPTransaction
     * const xPTransaction = await prisma.xPTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends XPTransactionFindUniqueArgs>(args: SelectSubset<T, XPTransactionFindUniqueArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one XPTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {XPTransactionFindUniqueOrThrowArgs} args - Arguments to find a XPTransaction
     * @example
     * // Get one XPTransaction
     * const xPTransaction = await prisma.xPTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends XPTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, XPTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XPTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionFindFirstArgs} args - Arguments to find a XPTransaction
     * @example
     * // Get one XPTransaction
     * const xPTransaction = await prisma.xPTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends XPTransactionFindFirstArgs>(args?: SelectSubset<T, XPTransactionFindFirstArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XPTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionFindFirstOrThrowArgs} args - Arguments to find a XPTransaction
     * @example
     * // Get one XPTransaction
     * const xPTransaction = await prisma.xPTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends XPTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, XPTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more XPTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all XPTransactions
     * const xPTransactions = await prisma.xPTransaction.findMany()
     * 
     * // Get first 10 XPTransactions
     * const xPTransactions = await prisma.xPTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const xPTransactionWithIdOnly = await prisma.xPTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends XPTransactionFindManyArgs>(args?: SelectSubset<T, XPTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a XPTransaction.
     * @param {XPTransactionCreateArgs} args - Arguments to create a XPTransaction.
     * @example
     * // Create one XPTransaction
     * const XPTransaction = await prisma.xPTransaction.create({
     *   data: {
     *     // ... data to create a XPTransaction
     *   }
     * })
     * 
     */
    create<T extends XPTransactionCreateArgs>(args: SelectSubset<T, XPTransactionCreateArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many XPTransactions.
     * @param {XPTransactionCreateManyArgs} args - Arguments to create many XPTransactions.
     * @example
     * // Create many XPTransactions
     * const xPTransaction = await prisma.xPTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends XPTransactionCreateManyArgs>(args?: SelectSubset<T, XPTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many XPTransactions and returns the data saved in the database.
     * @param {XPTransactionCreateManyAndReturnArgs} args - Arguments to create many XPTransactions.
     * @example
     * // Create many XPTransactions
     * const xPTransaction = await prisma.xPTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many XPTransactions and only return the `id`
     * const xPTransactionWithIdOnly = await prisma.xPTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends XPTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, XPTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a XPTransaction.
     * @param {XPTransactionDeleteArgs} args - Arguments to delete one XPTransaction.
     * @example
     * // Delete one XPTransaction
     * const XPTransaction = await prisma.xPTransaction.delete({
     *   where: {
     *     // ... filter to delete one XPTransaction
     *   }
     * })
     * 
     */
    delete<T extends XPTransactionDeleteArgs>(args: SelectSubset<T, XPTransactionDeleteArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one XPTransaction.
     * @param {XPTransactionUpdateArgs} args - Arguments to update one XPTransaction.
     * @example
     * // Update one XPTransaction
     * const xPTransaction = await prisma.xPTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends XPTransactionUpdateArgs>(args: SelectSubset<T, XPTransactionUpdateArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more XPTransactions.
     * @param {XPTransactionDeleteManyArgs} args - Arguments to filter XPTransactions to delete.
     * @example
     * // Delete a few XPTransactions
     * const { count } = await prisma.xPTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends XPTransactionDeleteManyArgs>(args?: SelectSubset<T, XPTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XPTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many XPTransactions
     * const xPTransaction = await prisma.xPTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends XPTransactionUpdateManyArgs>(args: SelectSubset<T, XPTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XPTransactions and returns the data updated in the database.
     * @param {XPTransactionUpdateManyAndReturnArgs} args - Arguments to update many XPTransactions.
     * @example
     * // Update many XPTransactions
     * const xPTransaction = await prisma.xPTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more XPTransactions and only return the `id`
     * const xPTransactionWithIdOnly = await prisma.xPTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends XPTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, XPTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one XPTransaction.
     * @param {XPTransactionUpsertArgs} args - Arguments to update or create a XPTransaction.
     * @example
     * // Update or create a XPTransaction
     * const xPTransaction = await prisma.xPTransaction.upsert({
     *   create: {
     *     // ... data to create a XPTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the XPTransaction we want to update
     *   }
     * })
     */
    upsert<T extends XPTransactionUpsertArgs>(args: SelectSubset<T, XPTransactionUpsertArgs<ExtArgs>>): Prisma__XPTransactionClient<$Result.GetResult<Prisma.$XPTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of XPTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionCountArgs} args - Arguments to filter XPTransactions to count.
     * @example
     * // Count the number of XPTransactions
     * const count = await prisma.xPTransaction.count({
     *   where: {
     *     // ... the filter for the XPTransactions we want to count
     *   }
     * })
    **/
    count<T extends XPTransactionCountArgs>(
      args?: Subset<T, XPTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], XPTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a XPTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends XPTransactionAggregateArgs>(args: Subset<T, XPTransactionAggregateArgs>): Prisma.PrismaPromise<GetXPTransactionAggregateType<T>>

    /**
     * Group by XPTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XPTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends XPTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: XPTransactionGroupByArgs['orderBy'] }
        : { orderBy?: XPTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, XPTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetXPTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the XPTransaction model
   */
  readonly fields: XPTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for XPTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__XPTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the XPTransaction model
   */
  interface XPTransactionFieldRefs {
    readonly id: FieldRef<"XPTransaction", 'String'>
    readonly amount: FieldRef<"XPTransaction", 'Int'>
    readonly reason: FieldRef<"XPTransaction", 'String'>
    readonly category: FieldRef<"XPTransaction", 'XPCategory'>
    readonly metadata: FieldRef<"XPTransaction", 'Json'>
    readonly createdAt: FieldRef<"XPTransaction", 'DateTime'>
    readonly userId: FieldRef<"XPTransaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * XPTransaction findUnique
   */
  export type XPTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter, which XPTransaction to fetch.
     */
    where: XPTransactionWhereUniqueInput
  }

  /**
   * XPTransaction findUniqueOrThrow
   */
  export type XPTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter, which XPTransaction to fetch.
     */
    where: XPTransactionWhereUniqueInput
  }

  /**
   * XPTransaction findFirst
   */
  export type XPTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter, which XPTransaction to fetch.
     */
    where?: XPTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XPTransactions to fetch.
     */
    orderBy?: XPTransactionOrderByWithRelationInput | XPTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XPTransactions.
     */
    cursor?: XPTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XPTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XPTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XPTransactions.
     */
    distinct?: XPTransactionScalarFieldEnum | XPTransactionScalarFieldEnum[]
  }

  /**
   * XPTransaction findFirstOrThrow
   */
  export type XPTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter, which XPTransaction to fetch.
     */
    where?: XPTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XPTransactions to fetch.
     */
    orderBy?: XPTransactionOrderByWithRelationInput | XPTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XPTransactions.
     */
    cursor?: XPTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XPTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XPTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XPTransactions.
     */
    distinct?: XPTransactionScalarFieldEnum | XPTransactionScalarFieldEnum[]
  }

  /**
   * XPTransaction findMany
   */
  export type XPTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter, which XPTransactions to fetch.
     */
    where?: XPTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XPTransactions to fetch.
     */
    orderBy?: XPTransactionOrderByWithRelationInput | XPTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing XPTransactions.
     */
    cursor?: XPTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XPTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XPTransactions.
     */
    skip?: number
    distinct?: XPTransactionScalarFieldEnum | XPTransactionScalarFieldEnum[]
  }

  /**
   * XPTransaction create
   */
  export type XPTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a XPTransaction.
     */
    data: XOR<XPTransactionCreateInput, XPTransactionUncheckedCreateInput>
  }

  /**
   * XPTransaction createMany
   */
  export type XPTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many XPTransactions.
     */
    data: XPTransactionCreateManyInput | XPTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * XPTransaction createManyAndReturn
   */
  export type XPTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many XPTransactions.
     */
    data: XPTransactionCreateManyInput | XPTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * XPTransaction update
   */
  export type XPTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a XPTransaction.
     */
    data: XOR<XPTransactionUpdateInput, XPTransactionUncheckedUpdateInput>
    /**
     * Choose, which XPTransaction to update.
     */
    where: XPTransactionWhereUniqueInput
  }

  /**
   * XPTransaction updateMany
   */
  export type XPTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update XPTransactions.
     */
    data: XOR<XPTransactionUpdateManyMutationInput, XPTransactionUncheckedUpdateManyInput>
    /**
     * Filter which XPTransactions to update
     */
    where?: XPTransactionWhereInput
    /**
     * Limit how many XPTransactions to update.
     */
    limit?: number
  }

  /**
   * XPTransaction updateManyAndReturn
   */
  export type XPTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * The data used to update XPTransactions.
     */
    data: XOR<XPTransactionUpdateManyMutationInput, XPTransactionUncheckedUpdateManyInput>
    /**
     * Filter which XPTransactions to update
     */
    where?: XPTransactionWhereInput
    /**
     * Limit how many XPTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * XPTransaction upsert
   */
  export type XPTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the XPTransaction to update in case it exists.
     */
    where: XPTransactionWhereUniqueInput
    /**
     * In case the XPTransaction found by the `where` argument doesn't exist, create a new XPTransaction with this data.
     */
    create: XOR<XPTransactionCreateInput, XPTransactionUncheckedCreateInput>
    /**
     * In case the XPTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<XPTransactionUpdateInput, XPTransactionUncheckedUpdateInput>
  }

  /**
   * XPTransaction delete
   */
  export type XPTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
    /**
     * Filter which XPTransaction to delete.
     */
    where: XPTransactionWhereUniqueInput
  }

  /**
   * XPTransaction deleteMany
   */
  export type XPTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XPTransactions to delete
     */
    where?: XPTransactionWhereInput
    /**
     * Limit how many XPTransactions to delete.
     */
    limit?: number
  }

  /**
   * XPTransaction without action
   */
  export type XPTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XPTransaction
     */
    select?: XPTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XPTransaction
     */
    omit?: XPTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XPTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    fileSize: number | null
    downloadCount: number | null
    retentionPeriod: number | null
  }

  export type DocumentSumAggregateOutputType = {
    fileSize: number | null
    downloadCount: number | null
    retentionPeriod: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    fileUrl: string | null
    fileSize: number | null
    mimeType: string | null
    version: string | null
    type: $Enums.DocumentType | null
    isPublic: boolean | null
    downloadCount: number | null
    isConfidential: boolean | null
    requiresApproval: boolean | null
    approvalStatus: $Enums.ApprovalStatus | null
    accessLevel: $Enums.AccessLevel | null
    retentionPeriod: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    taskId: string | null
    uploadedById: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    fileUrl: string | null
    fileSize: number | null
    mimeType: string | null
    version: string | null
    type: $Enums.DocumentType | null
    isPublic: boolean | null
    downloadCount: number | null
    isConfidential: boolean | null
    requiresApproval: boolean | null
    approvalStatus: $Enums.ApprovalStatus | null
    accessLevel: $Enums.AccessLevel | null
    retentionPeriod: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    taskId: string | null
    uploadedById: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    fileUrl: number
    fileSize: number
    mimeType: number
    version: number
    type: number
    isPublic: number
    downloadCount: number
    isConfidential: number
    requiresApproval: number
    approvalStatus: number
    accessLevel: number
    retentionPeriod: number
    complianceFlags: number
    createdAt: number
    updatedAt: number
    projectId: number
    taskId: number
    uploadedById: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    fileSize?: true
    downloadCount?: true
    retentionPeriod?: true
  }

  export type DocumentSumAggregateInputType = {
    fileSize?: true
    downloadCount?: true
    retentionPeriod?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    version?: true
    type?: true
    isPublic?: true
    downloadCount?: true
    isConfidential?: true
    requiresApproval?: true
    approvalStatus?: true
    accessLevel?: true
    retentionPeriod?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    taskId?: true
    uploadedById?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    version?: true
    type?: true
    isPublic?: true
    downloadCount?: true
    isConfidential?: true
    requiresApproval?: true
    approvalStatus?: true
    accessLevel?: true
    retentionPeriod?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    taskId?: true
    uploadedById?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fileUrl?: true
    fileSize?: true
    mimeType?: true
    version?: true
    type?: true
    isPublic?: true
    downloadCount?: true
    isConfidential?: true
    requiresApproval?: true
    approvalStatus?: true
    accessLevel?: true
    retentionPeriod?: true
    complianceFlags?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    taskId?: true
    uploadedById?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version: string
    type: $Enums.DocumentType
    isPublic: boolean
    downloadCount: number
    isConfidential: boolean
    requiresApproval: boolean
    approvalStatus: $Enums.ApprovalStatus
    accessLevel: $Enums.AccessLevel
    retentionPeriod: number | null
    complianceFlags: string[]
    createdAt: Date
    updatedAt: Date
    projectId: string | null
    taskId: string | null
    uploadedById: string
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    version?: boolean
    type?: boolean
    isPublic?: boolean
    downloadCount?: boolean
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: boolean
    accessLevel?: boolean
    retentionPeriod?: boolean
    complianceFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    taskId?: boolean
    uploadedById?: boolean
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    version?: boolean
    type?: boolean
    isPublic?: boolean
    downloadCount?: boolean
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: boolean
    accessLevel?: boolean
    retentionPeriod?: boolean
    complianceFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    taskId?: boolean
    uploadedById?: boolean
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    version?: boolean
    type?: boolean
    isPublic?: boolean
    downloadCount?: boolean
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: boolean
    accessLevel?: boolean
    retentionPeriod?: boolean
    complianceFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    taskId?: boolean
    uploadedById?: boolean
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    fileUrl?: boolean
    fileSize?: boolean
    mimeType?: boolean
    version?: boolean
    type?: boolean
    isPublic?: boolean
    downloadCount?: boolean
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: boolean
    accessLevel?: boolean
    retentionPeriod?: boolean
    complianceFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    taskId?: boolean
    uploadedById?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "fileUrl" | "fileSize" | "mimeType" | "version" | "type" | "isPublic" | "downloadCount" | "isConfidential" | "requiresApproval" | "approvalStatus" | "accessLevel" | "retentionPeriod" | "complianceFlags" | "createdAt" | "updatedAt" | "projectId" | "taskId" | "uploadedById", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Document$projectArgs<ExtArgs>
    task?: boolean | Document$taskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      fileUrl: string
      fileSize: number
      mimeType: string
      version: string
      type: $Enums.DocumentType
      isPublic: boolean
      downloadCount: number
      isConfidential: boolean
      requiresApproval: boolean
      approvalStatus: $Enums.ApprovalStatus
      accessLevel: $Enums.AccessLevel
      retentionPeriod: number | null
      complianceFlags: string[]
      createdAt: Date
      updatedAt: Date
      projectId: string | null
      taskId: string | null
      uploadedById: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends Document$projectArgs<ExtArgs> = {}>(args?: Subset<T, Document$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends Document$taskArgs<ExtArgs> = {}>(args?: Subset<T, Document$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly name: FieldRef<"Document", 'String'>
    readonly description: FieldRef<"Document", 'String'>
    readonly fileUrl: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly mimeType: FieldRef<"Document", 'String'>
    readonly version: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'DocumentType'>
    readonly isPublic: FieldRef<"Document", 'Boolean'>
    readonly downloadCount: FieldRef<"Document", 'Int'>
    readonly isConfidential: FieldRef<"Document", 'Boolean'>
    readonly requiresApproval: FieldRef<"Document", 'Boolean'>
    readonly approvalStatus: FieldRef<"Document", 'ApprovalStatus'>
    readonly accessLevel: FieldRef<"Document", 'AccessLevel'>
    readonly retentionPeriod: FieldRef<"Document", 'Int'>
    readonly complianceFlags: FieldRef<"Document", 'String[]'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly projectId: FieldRef<"Document", 'String'>
    readonly taskId: FieldRef<"Document", 'String'>
    readonly uploadedById: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.project
   */
  export type Document$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Document.task
   */
  export type Document$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    projectId: string | null
    taskId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    projectId: string | null
    taskId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    authorId: number
    projectId: number
    taskId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    taskId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    taskId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    taskId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    authorId: string
    projectId: string | null
    taskId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "authorId" | "projectId" | "taskId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      authorId: string
      projectId: string | null
      taskId: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends Comment$projectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends Comment$taskArgs<ExtArgs> = {}>(args?: Subset<T, Comment$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly projectId: FieldRef<"Comment", 'String'>
    readonly taskId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.project
   */
  export type Comment$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Comment.task
   */
  export type Comment$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLog
   */

  export type AggregateActivityLog = {
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  export type ActivityLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    riskLevel: $Enums.RiskLevel | null
    complianceFlag: boolean | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ActivityLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    riskLevel: $Enums.RiskLevel | null
    complianceFlag: boolean | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ActivityLogCountAggregateOutputType = {
    id: number
    action: number
    entity: number
    entityId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    sessionId: number
    riskLevel: number
    complianceFlag: number
    createdAt: number
    userId: number
    projectId: number
    _all: number
  }


  export type ActivityLogMinAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    riskLevel?: true
    complianceFlag?: true
    createdAt?: true
    userId?: true
    projectId?: true
  }

  export type ActivityLogMaxAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    riskLevel?: true
    complianceFlag?: true
    createdAt?: true
    userId?: true
    projectId?: true
  }

  export type ActivityLogCountAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    riskLevel?: true
    complianceFlag?: true
    createdAt?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLog to aggregate.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogMaxAggregateInputType
  }

  export type GetActivityLogAggregateType<T extends ActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLog[P]>
      : GetScalarType<T[P], AggregateActivityLog[P]>
  }




  export type ActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithAggregationInput | ActivityLogOrderByWithAggregationInput[]
    by: ActivityLogScalarFieldEnum[] | ActivityLogScalarFieldEnum
    having?: ActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogCountAggregateInputType | true
    _min?: ActivityLogMinAggregateInputType
    _max?: ActivityLogMaxAggregateInputType
  }

  export type ActivityLogGroupByOutputType = {
    id: string
    action: string
    entity: string
    entityId: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    riskLevel: $Enums.RiskLevel
    complianceFlag: boolean
    createdAt: Date
    userId: string
    projectId: string | null
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  type GetActivityLogGroupByPayload<T extends ActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    riskLevel?: boolean
    complianceFlag?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    riskLevel?: boolean
    complianceFlag?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    riskLevel?: boolean
    complianceFlag?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectScalar = {
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    riskLevel?: boolean
    complianceFlag?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entity" | "entityId" | "oldValues" | "newValues" | "ipAddress" | "userAgent" | "sessionId" | "riskLevel" | "complianceFlag" | "createdAt" | "userId" | "projectId", ExtArgs["result"]["activityLog"]>
  export type ActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }
  export type ActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }
  export type ActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ActivityLog$projectArgs<ExtArgs>
  }

  export type $ActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entity: string
      entityId: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      sessionId: string | null
      riskLevel: $Enums.RiskLevel
      complianceFlag: boolean
      createdAt: Date
      userId: string
      projectId: string | null
    }, ExtArgs["result"]["activityLog"]>
    composites: {}
  }

  type ActivityLogGetPayload<S extends boolean | null | undefined | ActivityLogDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogPayload, S>

  type ActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogCountAggregateInputType | true
    }

  export interface ActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLog'], meta: { name: 'ActivityLog' } }
    /**
     * Find zero or one ActivityLog that matches the filter.
     * @param {ActivityLogFindUniqueArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogFindUniqueArgs>(args: SelectSubset<T, ActivityLogFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogFindUniqueOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogFindFirstArgs>(args?: SelectSubset<T, ActivityLogFindFirstArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogFindManyArgs>(args?: SelectSubset<T, ActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLog.
     * @param {ActivityLogCreateArgs} args - Arguments to create a ActivityLog.
     * @example
     * // Create one ActivityLog
     * const ActivityLog = await prisma.activityLog.create({
     *   data: {
     *     // ... data to create a ActivityLog
     *   }
     * })
     * 
     */
    create<T extends ActivityLogCreateArgs>(args: SelectSubset<T, ActivityLogCreateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogCreateManyArgs>(args?: SelectSubset<T, ActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLog.
     * @param {ActivityLogDeleteArgs} args - Arguments to delete one ActivityLog.
     * @example
     * // Delete one ActivityLog
     * const ActivityLog = await prisma.activityLog.delete({
     *   where: {
     *     // ... filter to delete one ActivityLog
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogDeleteArgs>(args: SelectSubset<T, ActivityLogDeleteArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLog.
     * @param {ActivityLogUpdateArgs} args - Arguments to update one ActivityLog.
     * @example
     * // Update one ActivityLog
     * const activityLog = await prisma.activityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogUpdateArgs>(args: SelectSubset<T, ActivityLogUpdateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogDeleteManyArgs>(args?: SelectSubset<T, ActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogUpdateManyArgs>(args: SelectSubset<T, ActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLog.
     * @param {ActivityLogUpsertArgs} args - Arguments to update or create a ActivityLog.
     * @example
     * // Update or create a ActivityLog
     * const activityLog = await prisma.activityLog.upsert({
     *   create: {
     *     // ... data to create a ActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogUpsertArgs>(args: SelectSubset<T, ActivityLogUpsertArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLog.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogCountArgs>(
      args?: Subset<T, ActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogAggregateArgs>(args: Subset<T, ActivityLogAggregateArgs>): Prisma.PrismaPromise<GetActivityLogAggregateType<T>>

    /**
     * Group by ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLog model
   */
  readonly fields: ActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ActivityLog$projectArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLog$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLog model
   */
  interface ActivityLogFieldRefs {
    readonly id: FieldRef<"ActivityLog", 'String'>
    readonly action: FieldRef<"ActivityLog", 'String'>
    readonly entity: FieldRef<"ActivityLog", 'String'>
    readonly entityId: FieldRef<"ActivityLog", 'String'>
    readonly oldValues: FieldRef<"ActivityLog", 'Json'>
    readonly newValues: FieldRef<"ActivityLog", 'Json'>
    readonly ipAddress: FieldRef<"ActivityLog", 'String'>
    readonly userAgent: FieldRef<"ActivityLog", 'String'>
    readonly sessionId: FieldRef<"ActivityLog", 'String'>
    readonly riskLevel: FieldRef<"ActivityLog", 'RiskLevel'>
    readonly complianceFlag: FieldRef<"ActivityLog", 'Boolean'>
    readonly createdAt: FieldRef<"ActivityLog", 'DateTime'>
    readonly userId: FieldRef<"ActivityLog", 'String'>
    readonly projectId: FieldRef<"ActivityLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLog findUnique
   */
  export type ActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findUniqueOrThrow
   */
  export type ActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findFirst
   */
  export type ActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findFirstOrThrow
   */
  export type ActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findMany
   */
  export type ActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog create
   */
  export type ActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLog.
     */
    data: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
  }

  /**
   * ActivityLog createMany
   */
  export type ActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLog createManyAndReturn
   */
  export type ActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog update
   */
  export type ActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLog.
     */
    data: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
    /**
     * Choose, which ActivityLog to update.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog updateMany
   */
  export type ActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLog updateManyAndReturn
   */
  export type ActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog upsert
   */
  export type ActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLog to update in case it exists.
     */
    where: ActivityLogWhereUniqueInput
    /**
     * In case the ActivityLog found by the `where` argument doesn't exist, create a new ActivityLog with this data.
     */
    create: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
    /**
     * In case the ActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
  }

  /**
   * ActivityLog delete
   */
  export type ActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter which ActivityLog to delete.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog deleteMany
   */
  export type ActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLog.project
   */
  export type ActivityLog$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * ActivityLog without action
   */
  export type ActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subscriptionTier: 'subscriptionTier',
    maxProjects: 'maxProjects',
    maxUsersPerProject: 'maxUsersPerProject',
    apiRateLimit: 'apiRateLimit',
    storageLimit: 'storageLimit',
    customBranding: 'customBranding',
    ssoEnabled: 'ssoEnabled',
    auditRetention: 'auditRetention'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    role: 'role',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    bio: 'bio',
    specialization: 'specialization',
    experienceYears: 'experienceYears',
    location: 'location',
    contributionScore: 'contributionScore',
    safetyScore: 'safetyScore',
    qualityScore: 'qualityScore',
    collaborationScore: 'collaborationScore',
    professionalLevel: 'professionalLevel',
    certifications: 'certifications',
    skills: 'skills',
    phoneNumber: 'phoneNumber',
    emergencyContact: 'emergencyContact',
    lastActiveProject: 'lastActiveProject',
    timezone: 'timezone',
    notificationPrefs: 'notificationPrefs',
    workingHours: 'workingHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    budget: 'budget',
    actualCost: 'actualCost',
    progress: 'progress',
    address: 'address',
    coordinates: 'coordinates',
    bimModelUrl: 'bimModelUrl',
    isPublic: 'isPublic',
    collaborationScore: 'collaborationScore',
    safetyScore: 'safetyScore',
    qualityScore: 'qualityScore',
    efficiencyScore: 'efficiencyScore',
    clientName: 'clientName',
    contractNumber: 'contractNumber',
    projectCode: 'projectCode',
    regulatoryReqs: 'regulatoryReqs',
    complianceStatus: 'complianceStatus',
    riskLevel: 'riskLevel',
    clientApprovalRequired: 'clientApprovalRequired',
    clientContactEmail: 'clientContactEmail',
    clientContactName: 'clientContactName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectPhaseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    progress: 'progress',
    order: 'order',
    budgetAllocated: 'budgetAllocated',
    actualCost: 'actualCost',
    milestones: 'milestones',
    dependencies: 'dependencies',
    criticalPath: 'criticalPath',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type ProjectPhaseScalarFieldEnum = (typeof ProjectPhaseScalarFieldEnum)[keyof typeof ProjectPhaseScalarFieldEnum]


  export const ProjectMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    joinedAt: 'joinedAt',
    hourlyRate: 'hourlyRate',
    maxHoursPerWeek: 'maxHoursPerWeek',
    accessLevel: 'accessLevel',
    isLead: 'isLead',
    department: 'department',
    costCenter: 'costCenter',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectMemberScalarFieldEnum = (typeof ProjectMemberScalarFieldEnum)[keyof typeof ProjectMemberScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    dueDate: 'dueDate',
    completedAt: 'completedAt',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours',
    progress: 'progress',
    tags: 'tags',
    isBlocked: 'isBlocked',
    blockedReason: 'blockedReason',
    blockedSince: 'blockedSince',
    estimatedCost: 'estimatedCost',
    actualCost: 'actualCost',
    requiresApproval: 'requiresApproval',
    isClientVisible: 'isClientVisible',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    phaseId: 'phaseId',
    assigneeId: 'assigneeId',
    createdById: 'createdById',
    parentTaskId: 'parentTaskId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    content: 'content',
    type: 'type',
    priority: 'priority',
    status: 'status',
    isPublic: 'isPublic',
    viewCount: 'viewCount',
    likeCount: 'likeCount',
    commentCount: 'commentCount',
    shareCount: 'shareCount',
    requiresApproval: 'requiresApproval',
    approvedAt: 'approvedAt',
    approvedById: 'approvedById',
    isClientVisible: 'isClientVisible',
    estimatedResolution: 'estimatedResolution',
    actualResolution: 'actualResolution',
    businessImpact: 'businessImpact',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    organizationId: 'organizationId',
    projectId: 'projectId',
    phaseId: 'phaseId',
    taskId: 'taskId',
    resolutionId: 'resolutionId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const PostAttachmentScalarFieldEnum: {
    id: 'id',
    type: 'type',
    fileUrl: 'fileUrl',
    fileName: 'fileName',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    metadata: 'metadata',
    order: 'order',
    isConfidential: 'isConfidential',
    accessLevel: 'accessLevel',
    postId: 'postId'
  };

  export type PostAttachmentScalarFieldEnum = (typeof PostAttachmentScalarFieldEnum)[keyof typeof PostAttachmentScalarFieldEnum]


  export const PostMarkupScalarFieldEnum: {
    id: 'id',
    type: 'type',
    coordinates: 'coordinates',
    content: 'content',
    color: 'color',
    strokeWidth: 'strokeWidth',
    opacity: 'opacity',
    attachmentId: 'attachmentId',
    postId: 'postId'
  };

  export type PostMarkupScalarFieldEnum = (typeof PostMarkupScalarFieldEnum)[keyof typeof PostMarkupScalarFieldEnum]


  export const PostBimElementScalarFieldEnum: {
    id: 'id',
    elementId: 'elementId',
    elementType: 'elementType',
    elementName: 'elementName',
    discipline: 'discipline',
    properties: 'properties',
    postId: 'postId'
  };

  export type PostBimElementScalarFieldEnum = (typeof PostBimElementScalarFieldEnum)[keyof typeof PostBimElementScalarFieldEnum]


  export const PostLikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    postId: 'postId',
    createdAt: 'createdAt'
  };

  export type PostLikeScalarFieldEnum = (typeof PostLikeScalarFieldEnum)[keyof typeof PostLikeScalarFieldEnum]


  export const PostCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    postId: 'postId',
    parentCommentId: 'parentCommentId'
  };

  export type PostCommentScalarFieldEnum = (typeof PostCommentScalarFieldEnum)[keyof typeof PostCommentScalarFieldEnum]


  export const PostShareScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    createdAt: 'createdAt',
    userId: 'userId',
    postId: 'postId'
  };

  export type PostShareScalarFieldEnum = (typeof PostShareScalarFieldEnum)[keyof typeof PostShareScalarFieldEnum]


  export const PostMentionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    mentionedUserId: 'mentionedUserId',
    mentioningUserId: 'mentioningUserId',
    postId: 'postId'
  };

  export type PostMentionScalarFieldEnum = (typeof PostMentionScalarFieldEnum)[keyof typeof PostMentionScalarFieldEnum]


  export const PostHashtagScalarFieldEnum: {
    id: 'id',
    tag: 'tag',
    postId: 'postId'
  };

  export type PostHashtagScalarFieldEnum = (typeof PostHashtagScalarFieldEnum)[keyof typeof PostHashtagScalarFieldEnum]


  export const PostResolutionScalarFieldEnum: {
    id: 'id',
    description: 'description',
    implementedAt: 'implementedAt',
    verifiedAt: 'verifiedAt',
    costImpact: 'costImpact',
    timeImpact: 'timeImpact',
    lessonsLearned: 'lessonsLearned',
    preventiveMeasures: 'preventiveMeasures',
    clientNotified: 'clientNotified',
    verifiedById: 'verifiedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostResolutionScalarFieldEnum = (typeof PostResolutionScalarFieldEnum)[keyof typeof PostResolutionScalarFieldEnum]


  export const RFIScalarFieldEnum: {
    id: 'id',
    number: 'number',
    subject: 'subject',
    description: 'description',
    priority: 'priority',
    status: 'status',
    dueDate: 'dueDate',
    responseDate: 'responseDate',
    response: 'response',
    clientVisible: 'clientVisible',
    costImpact: 'costImpact',
    scheduleImpact: 'scheduleImpact',
    category: 'category',
    externalRFINumber: 'externalRFINumber',
    submittedById: 'submittedById',
    assignedToId: 'assignedToId',
    postId: 'postId',
    projectId: 'projectId',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RFIScalarFieldEnum = (typeof RFIScalarFieldEnum)[keyof typeof RFIScalarFieldEnum]


  export const ApprovalScalarFieldEnum: {
    id: 'id',
    type: 'type',
    entityId: 'entityId',
    entityType: 'entityType',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    requestedAt: 'requestedAt',
    reviewedAt: 'reviewedAt',
    comments: 'comments',
    conditions: 'conditions',
    requesterId: 'requesterId',
    approverId: 'approverId',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApprovalScalarFieldEnum = (typeof ApprovalScalarFieldEnum)[keyof typeof ApprovalScalarFieldEnum]


  export const SafetyIncidentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    severity: 'severity',
    status: 'status',
    location: 'location',
    coordinates: 'coordinates',
    injuryCount: 'injuryCount',
    nearMiss: 'nearMiss',
    regulatoryNotificationRequired: 'regulatoryNotificationRequired',
    clientNotificationRequired: 'clientNotificationRequired',
    rootCause: 'rootCause',
    correctiveActions: 'correctiveActions',
    preventiveMeasures: 'preventiveMeasures',
    investigationComplete: 'investigationComplete',
    occurredAt: 'occurredAt',
    reportedAt: 'reportedAt',
    resolvedAt: 'resolvedAt',
    reporterId: 'reporterId',
    assignedToId: 'assignedToId',
    projectId: 'projectId',
    postId: 'postId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SafetyIncidentScalarFieldEnum = (typeof SafetyIncidentScalarFieldEnum)[keyof typeof SafetyIncidentScalarFieldEnum]


  export const UserFollowScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type UserFollowScalarFieldEnum = (typeof UserFollowScalarFieldEnum)[keyof typeof UserFollowScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    category: 'category',
    points: 'points',
    rarity: 'rarity',
    conditions: 'conditions'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    unlockedAt: 'unlockedAt',
    progress: 'progress',
    userId: 'userId',
    achievementId: 'achievementId'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    color: 'color',
    category: 'category'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    earnedAt: 'earnedAt',
    level: 'level',
    userId: 'userId',
    badgeId: 'badgeId'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const XPTransactionScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    reason: 'reason',
    category: 'category',
    metadata: 'metadata',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type XPTransactionScalarFieldEnum = (typeof XPTransactionScalarFieldEnum)[keyof typeof XPTransactionScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    fileUrl: 'fileUrl',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    version: 'version',
    type: 'type',
    isPublic: 'isPublic',
    downloadCount: 'downloadCount',
    isConfidential: 'isConfidential',
    requiresApproval: 'requiresApproval',
    approvalStatus: 'approvalStatus',
    accessLevel: 'accessLevel',
    retentionPeriod: 'retentionPeriod',
    complianceFlags: 'complianceFlags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    taskId: 'taskId',
    uploadedById: 'uploadedById'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    projectId: 'projectId',
    taskId: 'taskId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ActivityLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    sessionId: 'sessionId',
    riskLevel: 'riskLevel',
    complianceFlag: 'complianceFlag',
    createdAt: 'createdAt',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ComplianceStatus'
   */
  export type EnumComplianceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStatus'>
    


  /**
   * Reference to a field of type 'ComplianceStatus[]'
   */
  export type ListEnumComplianceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStatus[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'PhaseStatus'
   */
  export type EnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus'>
    


  /**
   * Reference to a field of type 'PhaseStatus[]'
   */
  export type ListEnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus[]'>
    


  /**
   * Reference to a field of type 'ProjectRole'
   */
  export type EnumProjectRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectRole'>
    


  /**
   * Reference to a field of type 'ProjectRole[]'
   */
  export type ListEnumProjectRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectRole[]'>
    


  /**
   * Reference to a field of type 'AccessLevel'
   */
  export type EnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel'>
    


  /**
   * Reference to a field of type 'AccessLevel[]'
   */
  export type ListEnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'TaskPriority'
   */
  export type EnumTaskPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPriority'>
    


  /**
   * Reference to a field of type 'TaskPriority[]'
   */
  export type ListEnumTaskPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPriority[]'>
    


  /**
   * Reference to a field of type 'PostType'
   */
  export type EnumPostTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostType'>
    


  /**
   * Reference to a field of type 'PostType[]'
   */
  export type ListEnumPostTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostType[]'>
    


  /**
   * Reference to a field of type 'PostPriority'
   */
  export type EnumPostPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostPriority'>
    


  /**
   * Reference to a field of type 'PostPriority[]'
   */
  export type ListEnumPostPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostPriority[]'>
    


  /**
   * Reference to a field of type 'PostStatus'
   */
  export type EnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus'>
    


  /**
   * Reference to a field of type 'PostStatus[]'
   */
  export type ListEnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus[]'>
    


  /**
   * Reference to a field of type 'BusinessImpact'
   */
  export type EnumBusinessImpactFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessImpact'>
    


  /**
   * Reference to a field of type 'BusinessImpact[]'
   */
  export type ListEnumBusinessImpactFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessImpact[]'>
    


  /**
   * Reference to a field of type 'AttachmentType'
   */
  export type EnumAttachmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttachmentType'>
    


  /**
   * Reference to a field of type 'AttachmentType[]'
   */
  export type ListEnumAttachmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttachmentType[]'>
    


  /**
   * Reference to a field of type 'MarkupType'
   */
  export type EnumMarkupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarkupType'>
    


  /**
   * Reference to a field of type 'MarkupType[]'
   */
  export type ListEnumMarkupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarkupType[]'>
    


  /**
   * Reference to a field of type 'BimDiscipline'
   */
  export type EnumBimDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BimDiscipline'>
    


  /**
   * Reference to a field of type 'BimDiscipline[]'
   */
  export type ListEnumBimDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BimDiscipline[]'>
    


  /**
   * Reference to a field of type 'RFIPriority'
   */
  export type EnumRFIPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFIPriority'>
    


  /**
   * Reference to a field of type 'RFIPriority[]'
   */
  export type ListEnumRFIPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFIPriority[]'>
    


  /**
   * Reference to a field of type 'RFIStatus'
   */
  export type EnumRFIStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFIStatus'>
    


  /**
   * Reference to a field of type 'RFIStatus[]'
   */
  export type ListEnumRFIStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFIStatus[]'>
    


  /**
   * Reference to a field of type 'RFICategory'
   */
  export type EnumRFICategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFICategory'>
    


  /**
   * Reference to a field of type 'RFICategory[]'
   */
  export type ListEnumRFICategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RFICategory[]'>
    


  /**
   * Reference to a field of type 'ApprovalType'
   */
  export type EnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType'>
    


  /**
   * Reference to a field of type 'ApprovalType[]'
   */
  export type ListEnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType[]'>
    


  /**
   * Reference to a field of type 'ApprovalStatus'
   */
  export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


  /**
   * Reference to a field of type 'ApprovalStatus[]'
   */
  export type ListEnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus[]'>
    


  /**
   * Reference to a field of type 'ApprovalPriority'
   */
  export type EnumApprovalPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalPriority'>
    


  /**
   * Reference to a field of type 'ApprovalPriority[]'
   */
  export type ListEnumApprovalPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalPriority[]'>
    


  /**
   * Reference to a field of type 'IncidentType'
   */
  export type EnumIncidentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentType'>
    


  /**
   * Reference to a field of type 'IncidentType[]'
   */
  export type ListEnumIncidentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentType[]'>
    


  /**
   * Reference to a field of type 'IncidentSeverity'
   */
  export type EnumIncidentSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentSeverity'>
    


  /**
   * Reference to a field of type 'IncidentSeverity[]'
   */
  export type ListEnumIncidentSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentSeverity[]'>
    


  /**
   * Reference to a field of type 'IncidentStatus'
   */
  export type EnumIncidentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentStatus'>
    


  /**
   * Reference to a field of type 'IncidentStatus[]'
   */
  export type ListEnumIncidentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentStatus[]'>
    


  /**
   * Reference to a field of type 'AchievementCategory'
   */
  export type EnumAchievementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementCategory'>
    


  /**
   * Reference to a field of type 'AchievementCategory[]'
   */
  export type ListEnumAchievementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementCategory[]'>
    


  /**
   * Reference to a field of type 'AchievementRarity'
   */
  export type EnumAchievementRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementRarity'>
    


  /**
   * Reference to a field of type 'AchievementRarity[]'
   */
  export type ListEnumAchievementRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementRarity[]'>
    


  /**
   * Reference to a field of type 'BadgeCategory'
   */
  export type EnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory'>
    


  /**
   * Reference to a field of type 'BadgeCategory[]'
   */
  export type ListEnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory[]'>
    


  /**
   * Reference to a field of type 'XPCategory'
   */
  export type EnumXPCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'XPCategory'>
    


  /**
   * Reference to a field of type 'XPCategory[]'
   */
  export type ListEnumXPCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'XPCategory[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    
  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    subscriptionTier?: StringFilter<"Organization"> | string
    maxProjects?: IntFilter<"Organization"> | number
    maxUsersPerProject?: IntFilter<"Organization"> | number
    apiRateLimit?: IntFilter<"Organization"> | number
    storageLimit?: IntFilter<"Organization"> | number
    customBranding?: BoolFilter<"Organization"> | boolean
    ssoEnabled?: BoolFilter<"Organization"> | boolean
    auditRetention?: IntFilter<"Organization"> | number
    users?: UserListRelationFilter
    projects?: ProjectListRelationFilter
    posts?: PostListRelationFilter
    rfis?: RFIListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionTier?: SortOrder
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    customBranding?: SortOrder
    ssoEnabled?: SortOrder
    auditRetention?: SortOrder
    users?: UserOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    rfis?: RFIOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    subscriptionTier?: StringFilter<"Organization"> | string
    maxProjects?: IntFilter<"Organization"> | number
    maxUsersPerProject?: IntFilter<"Organization"> | number
    apiRateLimit?: IntFilter<"Organization"> | number
    storageLimit?: IntFilter<"Organization"> | number
    customBranding?: BoolFilter<"Organization"> | boolean
    ssoEnabled?: BoolFilter<"Organization"> | boolean
    auditRetention?: IntFilter<"Organization"> | number
    users?: UserListRelationFilter
    projects?: ProjectListRelationFilter
    posts?: PostListRelationFilter
    rfis?: RFIListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionTier?: SortOrder
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    customBranding?: SortOrder
    ssoEnabled?: SortOrder
    auditRetention?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    settings?: JsonWithAggregatesFilter<"Organization">
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    subscriptionTier?: StringWithAggregatesFilter<"Organization"> | string
    maxProjects?: IntWithAggregatesFilter<"Organization"> | number
    maxUsersPerProject?: IntWithAggregatesFilter<"Organization"> | number
    apiRateLimit?: IntWithAggregatesFilter<"Organization"> | number
    storageLimit?: IntWithAggregatesFilter<"Organization"> | number
    customBranding?: BoolWithAggregatesFilter<"Organization"> | boolean
    ssoEnabled?: BoolWithAggregatesFilter<"Organization"> | boolean
    auditRetention?: IntWithAggregatesFilter<"Organization"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    bio?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    experienceYears?: IntNullableFilter<"User"> | number | null
    location?: StringNullableFilter<"User"> | string | null
    contributionScore?: IntFilter<"User"> | number
    safetyScore?: IntFilter<"User"> | number
    qualityScore?: IntFilter<"User"> | number
    collaborationScore?: IntFilter<"User"> | number
    professionalLevel?: StringNullableFilter<"User"> | string | null
    certifications?: StringNullableListFilter<"User">
    skills?: StringNullableListFilter<"User">
    phoneNumber?: StringNullableFilter<"User"> | string | null
    emergencyContact?: StringNullableFilter<"User"> | string | null
    lastActiveProject?: StringNullableFilter<"User"> | string | null
    timezone?: StringFilter<"User"> | string
    notificationPrefs?: JsonFilter<"User">
    workingHours?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organizationId?: StringFilter<"User"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignedTasks?: TaskListRelationFilter
    createdTasks?: TaskListRelationFilter
    projectMembers?: ProjectMemberListRelationFilter
    comments?: CommentListRelationFilter
    documents?: DocumentListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    posts?: PostListRelationFilter
    postLikes?: PostLikeListRelationFilter
    postComments?: PostCommentListRelationFilter
    postShares?: PostShareListRelationFilter
    mentions?: PostMentionListRelationFilter
    mentionedBy?: PostMentionListRelationFilter
    following?: UserFollowListRelationFilter
    followers?: UserFollowListRelationFilter
    submittedRFIs?: RFIListRelationFilter
    assignedRFIs?: RFIListRelationFilter
    achievements?: UserAchievementListRelationFilter
    badges?: UserBadgeListRelationFilter
    xpTransactions?: XPTransactionListRelationFilter
    reportedIncidents?: SafetyIncidentListRelationFilter
    assignedIncidents?: SafetyIncidentListRelationFilter
    verifiedResolutions?: PostResolutionListRelationFilter
    approvalsGiven?: ApprovalListRelationFilter
    approvalsReceived?: ApprovalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    experienceYears?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
    professionalLevel?: SortOrderInput | SortOrder
    certifications?: SortOrder
    skills?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    lastActiveProject?: SortOrderInput | SortOrder
    timezone?: SortOrder
    notificationPrefs?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    assignedTasks?: TaskOrderByRelationAggregateInput
    createdTasks?: TaskOrderByRelationAggregateInput
    projectMembers?: ProjectMemberOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    postLikes?: PostLikeOrderByRelationAggregateInput
    postComments?: PostCommentOrderByRelationAggregateInput
    postShares?: PostShareOrderByRelationAggregateInput
    mentions?: PostMentionOrderByRelationAggregateInput
    mentionedBy?: PostMentionOrderByRelationAggregateInput
    following?: UserFollowOrderByRelationAggregateInput
    followers?: UserFollowOrderByRelationAggregateInput
    submittedRFIs?: RFIOrderByRelationAggregateInput
    assignedRFIs?: RFIOrderByRelationAggregateInput
    achievements?: UserAchievementOrderByRelationAggregateInput
    badges?: UserBadgeOrderByRelationAggregateInput
    xpTransactions?: XPTransactionOrderByRelationAggregateInput
    reportedIncidents?: SafetyIncidentOrderByRelationAggregateInput
    assignedIncidents?: SafetyIncidentOrderByRelationAggregateInput
    verifiedResolutions?: PostResolutionOrderByRelationAggregateInput
    approvalsGiven?: ApprovalOrderByRelationAggregateInput
    approvalsReceived?: ApprovalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    bio?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    experienceYears?: IntNullableFilter<"User"> | number | null
    location?: StringNullableFilter<"User"> | string | null
    contributionScore?: IntFilter<"User"> | number
    safetyScore?: IntFilter<"User"> | number
    qualityScore?: IntFilter<"User"> | number
    collaborationScore?: IntFilter<"User"> | number
    professionalLevel?: StringNullableFilter<"User"> | string | null
    certifications?: StringNullableListFilter<"User">
    skills?: StringNullableListFilter<"User">
    phoneNumber?: StringNullableFilter<"User"> | string | null
    emergencyContact?: StringNullableFilter<"User"> | string | null
    lastActiveProject?: StringNullableFilter<"User"> | string | null
    timezone?: StringFilter<"User"> | string
    notificationPrefs?: JsonFilter<"User">
    workingHours?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organizationId?: StringFilter<"User"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignedTasks?: TaskListRelationFilter
    createdTasks?: TaskListRelationFilter
    projectMembers?: ProjectMemberListRelationFilter
    comments?: CommentListRelationFilter
    documents?: DocumentListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    posts?: PostListRelationFilter
    postLikes?: PostLikeListRelationFilter
    postComments?: PostCommentListRelationFilter
    postShares?: PostShareListRelationFilter
    mentions?: PostMentionListRelationFilter
    mentionedBy?: PostMentionListRelationFilter
    following?: UserFollowListRelationFilter
    followers?: UserFollowListRelationFilter
    submittedRFIs?: RFIListRelationFilter
    assignedRFIs?: RFIListRelationFilter
    achievements?: UserAchievementListRelationFilter
    badges?: UserBadgeListRelationFilter
    xpTransactions?: XPTransactionListRelationFilter
    reportedIncidents?: SafetyIncidentListRelationFilter
    assignedIncidents?: SafetyIncidentListRelationFilter
    verifiedResolutions?: PostResolutionListRelationFilter
    approvalsGiven?: ApprovalListRelationFilter
    approvalsReceived?: ApprovalListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    experienceYears?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
    professionalLevel?: SortOrderInput | SortOrder
    certifications?: SortOrder
    skills?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    lastActiveProject?: SortOrderInput | SortOrder
    timezone?: SortOrder
    notificationPrefs?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    specialization?: StringNullableWithAggregatesFilter<"User"> | string | null
    experienceYears?: IntNullableWithAggregatesFilter<"User"> | number | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    contributionScore?: IntWithAggregatesFilter<"User"> | number
    safetyScore?: IntWithAggregatesFilter<"User"> | number
    qualityScore?: IntWithAggregatesFilter<"User"> | number
    collaborationScore?: IntWithAggregatesFilter<"User"> | number
    professionalLevel?: StringNullableWithAggregatesFilter<"User"> | string | null
    certifications?: StringNullableListFilter<"User">
    skills?: StringNullableListFilter<"User">
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyContact?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastActiveProject?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringWithAggregatesFilter<"User"> | string
    notificationPrefs?: JsonWithAggregatesFilter<"User">
    workingHours?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    organizationId?: StringWithAggregatesFilter<"User"> | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    budget?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFilter<"Project"> | number
    address?: StringNullableFilter<"Project"> | string | null
    coordinates?: JsonNullableFilter<"Project">
    bimModelUrl?: StringNullableFilter<"Project"> | string | null
    isPublic?: BoolFilter<"Project"> | boolean
    collaborationScore?: IntFilter<"Project"> | number
    safetyScore?: IntFilter<"Project"> | number
    qualityScore?: IntFilter<"Project"> | number
    efficiencyScore?: IntFilter<"Project"> | number
    clientName?: StringNullableFilter<"Project"> | string | null
    contractNumber?: StringNullableFilter<"Project"> | string | null
    projectCode?: StringNullableFilter<"Project"> | string | null
    regulatoryReqs?: StringNullableListFilter<"Project">
    complianceStatus?: EnumComplianceStatusFilter<"Project"> | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFilter<"Project"> | $Enums.RiskLevel
    clientApprovalRequired?: BoolFilter<"Project"> | boolean
    clientContactEmail?: StringNullableFilter<"Project"> | string | null
    clientContactName?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    organizationId?: StringFilter<"Project"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    phases?: ProjectPhaseListRelationFilter
    tasks?: TaskListRelationFilter
    members?: ProjectMemberListRelationFilter
    documents?: DocumentListRelationFilter
    comments?: CommentListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    posts?: PostListRelationFilter
    rfis?: RFIListRelationFilter
    safetyIncidents?: SafetyIncidentListRelationFilter
    approvals?: ApprovalListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    progress?: SortOrder
    address?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    bimModelUrl?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
    clientName?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    projectCode?: SortOrderInput | SortOrder
    regulatoryReqs?: SortOrder
    complianceStatus?: SortOrder
    riskLevel?: SortOrder
    clientApprovalRequired?: SortOrder
    clientContactEmail?: SortOrderInput | SortOrder
    clientContactName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    phases?: ProjectPhaseOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    members?: ProjectMemberOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    rfis?: RFIOrderByRelationAggregateInput
    safetyIncidents?: SafetyIncidentOrderByRelationAggregateInput
    approvals?: ApprovalOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectCode?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    budget?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFilter<"Project"> | number
    address?: StringNullableFilter<"Project"> | string | null
    coordinates?: JsonNullableFilter<"Project">
    bimModelUrl?: StringNullableFilter<"Project"> | string | null
    isPublic?: BoolFilter<"Project"> | boolean
    collaborationScore?: IntFilter<"Project"> | number
    safetyScore?: IntFilter<"Project"> | number
    qualityScore?: IntFilter<"Project"> | number
    efficiencyScore?: IntFilter<"Project"> | number
    clientName?: StringNullableFilter<"Project"> | string | null
    contractNumber?: StringNullableFilter<"Project"> | string | null
    regulatoryReqs?: StringNullableListFilter<"Project">
    complianceStatus?: EnumComplianceStatusFilter<"Project"> | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFilter<"Project"> | $Enums.RiskLevel
    clientApprovalRequired?: BoolFilter<"Project"> | boolean
    clientContactEmail?: StringNullableFilter<"Project"> | string | null
    clientContactName?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    organizationId?: StringFilter<"Project"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    phases?: ProjectPhaseListRelationFilter
    tasks?: TaskListRelationFilter
    members?: ProjectMemberListRelationFilter
    documents?: DocumentListRelationFilter
    comments?: CommentListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    posts?: PostListRelationFilter
    rfis?: RFIListRelationFilter
    safetyIncidents?: SafetyIncidentListRelationFilter
    approvals?: ApprovalListRelationFilter
  }, "id" | "projectCode">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    progress?: SortOrder
    address?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    bimModelUrl?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
    clientName?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    projectCode?: SortOrderInput | SortOrder
    regulatoryReqs?: SortOrder
    complianceStatus?: SortOrder
    riskLevel?: SortOrder
    clientApprovalRequired?: SortOrder
    clientContactEmail?: SortOrderInput | SortOrder
    clientContactName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    budget?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    progress?: FloatWithAggregatesFilter<"Project"> | number
    address?: StringNullableWithAggregatesFilter<"Project"> | string | null
    coordinates?: JsonNullableWithAggregatesFilter<"Project">
    bimModelUrl?: StringNullableWithAggregatesFilter<"Project"> | string | null
    isPublic?: BoolWithAggregatesFilter<"Project"> | boolean
    collaborationScore?: IntWithAggregatesFilter<"Project"> | number
    safetyScore?: IntWithAggregatesFilter<"Project"> | number
    qualityScore?: IntWithAggregatesFilter<"Project"> | number
    efficiencyScore?: IntWithAggregatesFilter<"Project"> | number
    clientName?: StringNullableWithAggregatesFilter<"Project"> | string | null
    contractNumber?: StringNullableWithAggregatesFilter<"Project"> | string | null
    projectCode?: StringNullableWithAggregatesFilter<"Project"> | string | null
    regulatoryReqs?: StringNullableListFilter<"Project">
    complianceStatus?: EnumComplianceStatusWithAggregatesFilter<"Project"> | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"Project"> | $Enums.RiskLevel
    clientApprovalRequired?: BoolWithAggregatesFilter<"Project"> | boolean
    clientContactEmail?: StringNullableWithAggregatesFilter<"Project"> | string | null
    clientContactName?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Project"> | string
  }

  export type ProjectPhaseWhereInput = {
    AND?: ProjectPhaseWhereInput | ProjectPhaseWhereInput[]
    OR?: ProjectPhaseWhereInput[]
    NOT?: ProjectPhaseWhereInput | ProjectPhaseWhereInput[]
    id?: StringFilter<"ProjectPhase"> | string
    name?: StringFilter<"ProjectPhase"> | string
    description?: StringNullableFilter<"ProjectPhase"> | string | null
    status?: EnumPhaseStatusFilter<"ProjectPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    progress?: FloatFilter<"ProjectPhase"> | number
    order?: IntFilter<"ProjectPhase"> | number
    budgetAllocated?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonFilter<"ProjectPhase">
    dependencies?: StringNullableListFilter<"ProjectPhase">
    criticalPath?: BoolFilter<"ProjectPhase"> | boolean
    createdAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    projectId?: StringFilter<"ProjectPhase"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
    posts?: PostListRelationFilter
  }

  export type ProjectPhaseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    milestones?: SortOrder
    dependencies?: SortOrder
    criticalPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
  }

  export type ProjectPhaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectPhaseWhereInput | ProjectPhaseWhereInput[]
    OR?: ProjectPhaseWhereInput[]
    NOT?: ProjectPhaseWhereInput | ProjectPhaseWhereInput[]
    name?: StringFilter<"ProjectPhase"> | string
    description?: StringNullableFilter<"ProjectPhase"> | string | null
    status?: EnumPhaseStatusFilter<"ProjectPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    progress?: FloatFilter<"ProjectPhase"> | number
    order?: IntFilter<"ProjectPhase"> | number
    budgetAllocated?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonFilter<"ProjectPhase">
    dependencies?: StringNullableListFilter<"ProjectPhase">
    criticalPath?: BoolFilter<"ProjectPhase"> | boolean
    createdAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    projectId?: StringFilter<"ProjectPhase"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
    posts?: PostListRelationFilter
  }, "id">

  export type ProjectPhaseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    milestones?: SortOrder
    dependencies?: SortOrder
    criticalPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: ProjectPhaseCountOrderByAggregateInput
    _avg?: ProjectPhaseAvgOrderByAggregateInput
    _max?: ProjectPhaseMaxOrderByAggregateInput
    _min?: ProjectPhaseMinOrderByAggregateInput
    _sum?: ProjectPhaseSumOrderByAggregateInput
  }

  export type ProjectPhaseScalarWhereWithAggregatesInput = {
    AND?: ProjectPhaseScalarWhereWithAggregatesInput | ProjectPhaseScalarWhereWithAggregatesInput[]
    OR?: ProjectPhaseScalarWhereWithAggregatesInput[]
    NOT?: ProjectPhaseScalarWhereWithAggregatesInput | ProjectPhaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectPhase"> | string
    name?: StringWithAggregatesFilter<"ProjectPhase"> | string
    description?: StringNullableWithAggregatesFilter<"ProjectPhase"> | string | null
    status?: EnumPhaseStatusWithAggregatesFilter<"ProjectPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"ProjectPhase"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"ProjectPhase"> | Date | string | null
    progress?: FloatWithAggregatesFilter<"ProjectPhase"> | number
    order?: IntWithAggregatesFilter<"ProjectPhase"> | number
    budgetAllocated?: DecimalNullableWithAggregatesFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableWithAggregatesFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonWithAggregatesFilter<"ProjectPhase">
    dependencies?: StringNullableListFilter<"ProjectPhase">
    criticalPath?: BoolWithAggregatesFilter<"ProjectPhase"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProjectPhase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectPhase"> | Date | string
    projectId?: StringWithAggregatesFilter<"ProjectPhase"> | string
  }

  export type ProjectMemberWhereInput = {
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    hourlyRate?: DecimalNullableFilter<"ProjectMember"> | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: IntNullableFilter<"ProjectMember"> | number | null
    accessLevel?: EnumAccessLevelFilter<"ProjectMember"> | $Enums.AccessLevel
    isLead?: BoolFilter<"ProjectMember"> | boolean
    department?: StringNullableFilter<"ProjectMember"> | string | null
    costCenter?: StringNullableFilter<"ProjectMember"> | string | null
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ProjectMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    maxHoursPerWeek?: SortOrderInput | SortOrder
    accessLevel?: SortOrder
    isLead?: SortOrder
    department?: SortOrderInput | SortOrder
    costCenter?: SortOrderInput | SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId?: ProjectMemberUserIdProjectIdCompoundUniqueInput
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    hourlyRate?: DecimalNullableFilter<"ProjectMember"> | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: IntNullableFilter<"ProjectMember"> | number | null
    accessLevel?: EnumAccessLevelFilter<"ProjectMember"> | $Enums.AccessLevel
    isLead?: BoolFilter<"ProjectMember"> | boolean
    department?: StringNullableFilter<"ProjectMember"> | string | null
    costCenter?: StringNullableFilter<"ProjectMember"> | string | null
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id" | "userId_projectId">

  export type ProjectMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    maxHoursPerWeek?: SortOrderInput | SortOrder
    accessLevel?: SortOrder
    isLead?: SortOrder
    department?: SortOrderInput | SortOrder
    costCenter?: SortOrderInput | SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    _count?: ProjectMemberCountOrderByAggregateInput
    _avg?: ProjectMemberAvgOrderByAggregateInput
    _max?: ProjectMemberMaxOrderByAggregateInput
    _min?: ProjectMemberMinOrderByAggregateInput
    _sum?: ProjectMemberSumOrderByAggregateInput
  }

  export type ProjectMemberScalarWhereWithAggregatesInput = {
    AND?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    OR?: ProjectMemberScalarWhereWithAggregatesInput[]
    NOT?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectMember"> | string
    role?: EnumProjectRoleWithAggregatesFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeWithAggregatesFilter<"ProjectMember"> | Date | string
    hourlyRate?: DecimalNullableWithAggregatesFilter<"ProjectMember"> | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: IntNullableWithAggregatesFilter<"ProjectMember"> | number | null
    accessLevel?: EnumAccessLevelWithAggregatesFilter<"ProjectMember"> | $Enums.AccessLevel
    isLead?: BoolWithAggregatesFilter<"ProjectMember"> | boolean
    department?: StringNullableWithAggregatesFilter<"ProjectMember"> | string | null
    costCenter?: StringNullableWithAggregatesFilter<"ProjectMember"> | string | null
    userId?: StringWithAggregatesFilter<"ProjectMember"> | string
    projectId?: StringWithAggregatesFilter<"ProjectMember"> | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    progress?: FloatFilter<"Task"> | number
    tags?: StringNullableListFilter<"Task">
    isBlocked?: BoolFilter<"Task"> | boolean
    blockedReason?: StringNullableFilter<"Task"> | string | null
    blockedSince?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFilter<"Task"> | boolean
    isClientVisible?: BoolFilter<"Task"> | boolean
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    projectId?: StringFilter<"Task"> | string
    phaseId?: StringNullableFilter<"Task"> | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    createdById?: StringFilter<"Task"> | string
    parentTaskId?: StringNullableFilter<"Task"> | string | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    phase?: XOR<ProjectPhaseNullableScalarRelationFilter, ProjectPhaseWhereInput> | null
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentTask?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subtasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
    documents?: DocumentListRelationFilter
    posts?: PostListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    progress?: SortOrder
    tags?: SortOrder
    isBlocked?: SortOrder
    blockedReason?: SortOrderInput | SortOrder
    blockedSince?: SortOrderInput | SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    requiresApproval?: SortOrder
    isClientVisible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    parentTaskId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    phase?: ProjectPhaseOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    parentTask?: TaskOrderByWithRelationInput
    subtasks?: TaskOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    progress?: FloatFilter<"Task"> | number
    tags?: StringNullableListFilter<"Task">
    isBlocked?: BoolFilter<"Task"> | boolean
    blockedReason?: StringNullableFilter<"Task"> | string | null
    blockedSince?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFilter<"Task"> | boolean
    isClientVisible?: BoolFilter<"Task"> | boolean
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    projectId?: StringFilter<"Task"> | string
    phaseId?: StringNullableFilter<"Task"> | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    createdById?: StringFilter<"Task"> | string
    parentTaskId?: StringNullableFilter<"Task"> | string | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    phase?: XOR<ProjectPhaseNullableScalarRelationFilter, ProjectPhaseWhereInput> | null
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentTask?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subtasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
    documents?: DocumentListRelationFilter
    posts?: PostListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    progress?: SortOrder
    tags?: SortOrder
    isBlocked?: SortOrder
    blockedReason?: SortOrderInput | SortOrder
    blockedSince?: SortOrderInput | SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    requiresApproval?: SortOrder
    isClientVisible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    parentTaskId?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityWithAggregatesFilter<"Task"> | $Enums.TaskPriority
    startDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    estimatedHours?: FloatNullableWithAggregatesFilter<"Task"> | number | null
    actualHours?: FloatNullableWithAggregatesFilter<"Task"> | number | null
    progress?: FloatWithAggregatesFilter<"Task"> | number
    tags?: StringNullableListFilter<"Task">
    isBlocked?: BoolWithAggregatesFilter<"Task"> | boolean
    blockedReason?: StringNullableWithAggregatesFilter<"Task"> | string | null
    blockedSince?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    estimatedCost?: DecimalNullableWithAggregatesFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableWithAggregatesFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolWithAggregatesFilter<"Task"> | boolean
    isClientVisible?: BoolWithAggregatesFilter<"Task"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    projectId?: StringWithAggregatesFilter<"Task"> | string
    phaseId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    assigneeId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    createdById?: StringWithAggregatesFilter<"Task"> | string
    parentTaskId?: StringNullableWithAggregatesFilter<"Task"> | string | null
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    priority?: EnumPostPriorityFilter<"Post"> | $Enums.PostPriority
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    isPublic?: BoolFilter<"Post"> | boolean
    viewCount?: IntFilter<"Post"> | number
    likeCount?: IntFilter<"Post"> | number
    commentCount?: IntFilter<"Post"> | number
    shareCount?: IntFilter<"Post"> | number
    requiresApproval?: BoolFilter<"Post"> | boolean
    approvedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    approvedById?: StringNullableFilter<"Post"> | string | null
    isClientVisible?: BoolFilter<"Post"> | boolean
    estimatedResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    actualResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    businessImpact?: EnumBusinessImpactFilter<"Post"> | $Enums.BusinessImpact
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
    organizationId?: StringFilter<"Post"> | string
    projectId?: StringFilter<"Post"> | string
    phaseId?: StringNullableFilter<"Post"> | string | null
    taskId?: StringNullableFilter<"Post"> | string | null
    resolutionId?: StringNullableFilter<"Post"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    phase?: XOR<ProjectPhaseNullableScalarRelationFilter, ProjectPhaseWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    attachments?: PostAttachmentListRelationFilter
    markups?: PostMarkupListRelationFilter
    bimElements?: PostBimElementListRelationFilter
    likes?: PostLikeListRelationFilter
    comments?: PostCommentListRelationFilter
    shares?: PostShareListRelationFilter
    mentions?: PostMentionListRelationFilter
    hashtags?: PostHashtagListRelationFilter
    rfis?: RFIListRelationFilter
    safetyIncident?: XOR<SafetyIncidentNullableScalarRelationFilter, SafetyIncidentWhereInput> | null
    resolution?: XOR<PostResolutionNullableScalarRelationFilter, PostResolutionWhereInput> | null
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
    requiresApproval?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedById?: SortOrderInput | SortOrder
    isClientVisible?: SortOrder
    estimatedResolution?: SortOrderInput | SortOrder
    actualResolution?: SortOrderInput | SortOrder
    businessImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    resolutionId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    phase?: ProjectPhaseOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    attachments?: PostAttachmentOrderByRelationAggregateInput
    markups?: PostMarkupOrderByRelationAggregateInput
    bimElements?: PostBimElementOrderByRelationAggregateInput
    likes?: PostLikeOrderByRelationAggregateInput
    comments?: PostCommentOrderByRelationAggregateInput
    shares?: PostShareOrderByRelationAggregateInput
    mentions?: PostMentionOrderByRelationAggregateInput
    hashtags?: PostHashtagOrderByRelationAggregateInput
    rfis?: RFIOrderByRelationAggregateInput
    safetyIncident?: SafetyIncidentOrderByWithRelationInput
    resolution?: PostResolutionOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringFilter<"Post"> | string
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    priority?: EnumPostPriorityFilter<"Post"> | $Enums.PostPriority
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    isPublic?: BoolFilter<"Post"> | boolean
    viewCount?: IntFilter<"Post"> | number
    likeCount?: IntFilter<"Post"> | number
    commentCount?: IntFilter<"Post"> | number
    shareCount?: IntFilter<"Post"> | number
    requiresApproval?: BoolFilter<"Post"> | boolean
    approvedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    approvedById?: StringNullableFilter<"Post"> | string | null
    isClientVisible?: BoolFilter<"Post"> | boolean
    estimatedResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    actualResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    businessImpact?: EnumBusinessImpactFilter<"Post"> | $Enums.BusinessImpact
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
    organizationId?: StringFilter<"Post"> | string
    projectId?: StringFilter<"Post"> | string
    phaseId?: StringNullableFilter<"Post"> | string | null
    taskId?: StringNullableFilter<"Post"> | string | null
    resolutionId?: StringNullableFilter<"Post"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    phase?: XOR<ProjectPhaseNullableScalarRelationFilter, ProjectPhaseWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    attachments?: PostAttachmentListRelationFilter
    markups?: PostMarkupListRelationFilter
    bimElements?: PostBimElementListRelationFilter
    likes?: PostLikeListRelationFilter
    comments?: PostCommentListRelationFilter
    shares?: PostShareListRelationFilter
    mentions?: PostMentionListRelationFilter
    hashtags?: PostHashtagListRelationFilter
    rfis?: RFIListRelationFilter
    safetyIncident?: XOR<SafetyIncidentNullableScalarRelationFilter, SafetyIncidentWhereInput> | null
    resolution?: XOR<PostResolutionNullableScalarRelationFilter, PostResolutionWhereInput> | null
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
    requiresApproval?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedById?: SortOrderInput | SortOrder
    isClientVisible?: SortOrder
    estimatedResolution?: SortOrderInput | SortOrder
    actualResolution?: SortOrderInput | SortOrder
    businessImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    resolutionId?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    type?: EnumPostTypeWithAggregatesFilter<"Post"> | $Enums.PostType
    priority?: EnumPostPriorityWithAggregatesFilter<"Post"> | $Enums.PostPriority
    status?: EnumPostStatusWithAggregatesFilter<"Post"> | $Enums.PostStatus
    isPublic?: BoolWithAggregatesFilter<"Post"> | boolean
    viewCount?: IntWithAggregatesFilter<"Post"> | number
    likeCount?: IntWithAggregatesFilter<"Post"> | number
    commentCount?: IntWithAggregatesFilter<"Post"> | number
    shareCount?: IntWithAggregatesFilter<"Post"> | number
    requiresApproval?: BoolWithAggregatesFilter<"Post"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    approvedById?: StringNullableWithAggregatesFilter<"Post"> | string | null
    isClientVisible?: BoolWithAggregatesFilter<"Post"> | boolean
    estimatedResolution?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    actualResolution?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    businessImpact?: EnumBusinessImpactWithAggregatesFilter<"Post"> | $Enums.BusinessImpact
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    authorId?: StringWithAggregatesFilter<"Post"> | string
    organizationId?: StringWithAggregatesFilter<"Post"> | string
    projectId?: StringWithAggregatesFilter<"Post"> | string
    phaseId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    resolutionId?: StringNullableWithAggregatesFilter<"Post"> | string | null
  }

  export type PostAttachmentWhereInput = {
    AND?: PostAttachmentWhereInput | PostAttachmentWhereInput[]
    OR?: PostAttachmentWhereInput[]
    NOT?: PostAttachmentWhereInput | PostAttachmentWhereInput[]
    id?: StringFilter<"PostAttachment"> | string
    type?: EnumAttachmentTypeFilter<"PostAttachment"> | $Enums.AttachmentType
    fileUrl?: StringFilter<"PostAttachment"> | string
    fileName?: StringFilter<"PostAttachment"> | string
    fileSize?: IntFilter<"PostAttachment"> | number
    mimeType?: StringFilter<"PostAttachment"> | string
    metadata?: JsonNullableFilter<"PostAttachment">
    order?: IntFilter<"PostAttachment"> | number
    isConfidential?: BoolFilter<"PostAttachment"> | boolean
    accessLevel?: EnumAccessLevelFilter<"PostAttachment"> | $Enums.AccessLevel
    postId?: StringFilter<"PostAttachment"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    markups?: PostMarkupListRelationFilter
  }

  export type PostAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    metadata?: SortOrderInput | SortOrder
    order?: SortOrder
    isConfidential?: SortOrder
    accessLevel?: SortOrder
    postId?: SortOrder
    post?: PostOrderByWithRelationInput
    markups?: PostMarkupOrderByRelationAggregateInput
  }

  export type PostAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostAttachmentWhereInput | PostAttachmentWhereInput[]
    OR?: PostAttachmentWhereInput[]
    NOT?: PostAttachmentWhereInput | PostAttachmentWhereInput[]
    type?: EnumAttachmentTypeFilter<"PostAttachment"> | $Enums.AttachmentType
    fileUrl?: StringFilter<"PostAttachment"> | string
    fileName?: StringFilter<"PostAttachment"> | string
    fileSize?: IntFilter<"PostAttachment"> | number
    mimeType?: StringFilter<"PostAttachment"> | string
    metadata?: JsonNullableFilter<"PostAttachment">
    order?: IntFilter<"PostAttachment"> | number
    isConfidential?: BoolFilter<"PostAttachment"> | boolean
    accessLevel?: EnumAccessLevelFilter<"PostAttachment"> | $Enums.AccessLevel
    postId?: StringFilter<"PostAttachment"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    markups?: PostMarkupListRelationFilter
  }, "id">

  export type PostAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    metadata?: SortOrderInput | SortOrder
    order?: SortOrder
    isConfidential?: SortOrder
    accessLevel?: SortOrder
    postId?: SortOrder
    _count?: PostAttachmentCountOrderByAggregateInput
    _avg?: PostAttachmentAvgOrderByAggregateInput
    _max?: PostAttachmentMaxOrderByAggregateInput
    _min?: PostAttachmentMinOrderByAggregateInput
    _sum?: PostAttachmentSumOrderByAggregateInput
  }

  export type PostAttachmentScalarWhereWithAggregatesInput = {
    AND?: PostAttachmentScalarWhereWithAggregatesInput | PostAttachmentScalarWhereWithAggregatesInput[]
    OR?: PostAttachmentScalarWhereWithAggregatesInput[]
    NOT?: PostAttachmentScalarWhereWithAggregatesInput | PostAttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostAttachment"> | string
    type?: EnumAttachmentTypeWithAggregatesFilter<"PostAttachment"> | $Enums.AttachmentType
    fileUrl?: StringWithAggregatesFilter<"PostAttachment"> | string
    fileName?: StringWithAggregatesFilter<"PostAttachment"> | string
    fileSize?: IntWithAggregatesFilter<"PostAttachment"> | number
    mimeType?: StringWithAggregatesFilter<"PostAttachment"> | string
    metadata?: JsonNullableWithAggregatesFilter<"PostAttachment">
    order?: IntWithAggregatesFilter<"PostAttachment"> | number
    isConfidential?: BoolWithAggregatesFilter<"PostAttachment"> | boolean
    accessLevel?: EnumAccessLevelWithAggregatesFilter<"PostAttachment"> | $Enums.AccessLevel
    postId?: StringWithAggregatesFilter<"PostAttachment"> | string
  }

  export type PostMarkupWhereInput = {
    AND?: PostMarkupWhereInput | PostMarkupWhereInput[]
    OR?: PostMarkupWhereInput[]
    NOT?: PostMarkupWhereInput | PostMarkupWhereInput[]
    id?: StringFilter<"PostMarkup"> | string
    type?: EnumMarkupTypeFilter<"PostMarkup"> | $Enums.MarkupType
    coordinates?: JsonFilter<"PostMarkup">
    content?: StringNullableFilter<"PostMarkup"> | string | null
    color?: StringFilter<"PostMarkup"> | string
    strokeWidth?: FloatFilter<"PostMarkup"> | number
    opacity?: FloatFilter<"PostMarkup"> | number
    attachmentId?: StringFilter<"PostMarkup"> | string
    postId?: StringFilter<"PostMarkup"> | string
    attachment?: XOR<PostAttachmentScalarRelationFilter, PostAttachmentWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostMarkupOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    coordinates?: SortOrder
    content?: SortOrderInput | SortOrder
    color?: SortOrder
    strokeWidth?: SortOrder
    opacity?: SortOrder
    attachmentId?: SortOrder
    postId?: SortOrder
    attachment?: PostAttachmentOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostMarkupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostMarkupWhereInput | PostMarkupWhereInput[]
    OR?: PostMarkupWhereInput[]
    NOT?: PostMarkupWhereInput | PostMarkupWhereInput[]
    type?: EnumMarkupTypeFilter<"PostMarkup"> | $Enums.MarkupType
    coordinates?: JsonFilter<"PostMarkup">
    content?: StringNullableFilter<"PostMarkup"> | string | null
    color?: StringFilter<"PostMarkup"> | string
    strokeWidth?: FloatFilter<"PostMarkup"> | number
    opacity?: FloatFilter<"PostMarkup"> | number
    attachmentId?: StringFilter<"PostMarkup"> | string
    postId?: StringFilter<"PostMarkup"> | string
    attachment?: XOR<PostAttachmentScalarRelationFilter, PostAttachmentWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type PostMarkupOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    coordinates?: SortOrder
    content?: SortOrderInput | SortOrder
    color?: SortOrder
    strokeWidth?: SortOrder
    opacity?: SortOrder
    attachmentId?: SortOrder
    postId?: SortOrder
    _count?: PostMarkupCountOrderByAggregateInput
    _avg?: PostMarkupAvgOrderByAggregateInput
    _max?: PostMarkupMaxOrderByAggregateInput
    _min?: PostMarkupMinOrderByAggregateInput
    _sum?: PostMarkupSumOrderByAggregateInput
  }

  export type PostMarkupScalarWhereWithAggregatesInput = {
    AND?: PostMarkupScalarWhereWithAggregatesInput | PostMarkupScalarWhereWithAggregatesInput[]
    OR?: PostMarkupScalarWhereWithAggregatesInput[]
    NOT?: PostMarkupScalarWhereWithAggregatesInput | PostMarkupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostMarkup"> | string
    type?: EnumMarkupTypeWithAggregatesFilter<"PostMarkup"> | $Enums.MarkupType
    coordinates?: JsonWithAggregatesFilter<"PostMarkup">
    content?: StringNullableWithAggregatesFilter<"PostMarkup"> | string | null
    color?: StringWithAggregatesFilter<"PostMarkup"> | string
    strokeWidth?: FloatWithAggregatesFilter<"PostMarkup"> | number
    opacity?: FloatWithAggregatesFilter<"PostMarkup"> | number
    attachmentId?: StringWithAggregatesFilter<"PostMarkup"> | string
    postId?: StringWithAggregatesFilter<"PostMarkup"> | string
  }

  export type PostBimElementWhereInput = {
    AND?: PostBimElementWhereInput | PostBimElementWhereInput[]
    OR?: PostBimElementWhereInput[]
    NOT?: PostBimElementWhereInput | PostBimElementWhereInput[]
    id?: StringFilter<"PostBimElement"> | string
    elementId?: StringFilter<"PostBimElement"> | string
    elementType?: StringFilter<"PostBimElement"> | string
    elementName?: StringNullableFilter<"PostBimElement"> | string | null
    discipline?: EnumBimDisciplineFilter<"PostBimElement"> | $Enums.BimDiscipline
    properties?: JsonNullableFilter<"PostBimElement">
    postId?: StringFilter<"PostBimElement"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostBimElementOrderByWithRelationInput = {
    id?: SortOrder
    elementId?: SortOrder
    elementType?: SortOrder
    elementName?: SortOrderInput | SortOrder
    discipline?: SortOrder
    properties?: SortOrderInput | SortOrder
    postId?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type PostBimElementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostBimElementWhereInput | PostBimElementWhereInput[]
    OR?: PostBimElementWhereInput[]
    NOT?: PostBimElementWhereInput | PostBimElementWhereInput[]
    elementId?: StringFilter<"PostBimElement"> | string
    elementType?: StringFilter<"PostBimElement"> | string
    elementName?: StringNullableFilter<"PostBimElement"> | string | null
    discipline?: EnumBimDisciplineFilter<"PostBimElement"> | $Enums.BimDiscipline
    properties?: JsonNullableFilter<"PostBimElement">
    postId?: StringFilter<"PostBimElement"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type PostBimElementOrderByWithAggregationInput = {
    id?: SortOrder
    elementId?: SortOrder
    elementType?: SortOrder
    elementName?: SortOrderInput | SortOrder
    discipline?: SortOrder
    properties?: SortOrderInput | SortOrder
    postId?: SortOrder
    _count?: PostBimElementCountOrderByAggregateInput
    _max?: PostBimElementMaxOrderByAggregateInput
    _min?: PostBimElementMinOrderByAggregateInput
  }

  export type PostBimElementScalarWhereWithAggregatesInput = {
    AND?: PostBimElementScalarWhereWithAggregatesInput | PostBimElementScalarWhereWithAggregatesInput[]
    OR?: PostBimElementScalarWhereWithAggregatesInput[]
    NOT?: PostBimElementScalarWhereWithAggregatesInput | PostBimElementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostBimElement"> | string
    elementId?: StringWithAggregatesFilter<"PostBimElement"> | string
    elementType?: StringWithAggregatesFilter<"PostBimElement"> | string
    elementName?: StringNullableWithAggregatesFilter<"PostBimElement"> | string | null
    discipline?: EnumBimDisciplineWithAggregatesFilter<"PostBimElement"> | $Enums.BimDiscipline
    properties?: JsonNullableWithAggregatesFilter<"PostBimElement">
    postId?: StringWithAggregatesFilter<"PostBimElement"> | string
  }

  export type PostLikeWhereInput = {
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    id?: StringFilter<"PostLike"> | string
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostLikeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_postId?: PostLikeUserIdPostIdCompoundUniqueInput
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id" | "userId_postId">

  export type PostLikeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    _count?: PostLikeCountOrderByAggregateInput
    _max?: PostLikeMaxOrderByAggregateInput
    _min?: PostLikeMinOrderByAggregateInput
  }

  export type PostLikeScalarWhereWithAggregatesInput = {
    AND?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    OR?: PostLikeScalarWhereWithAggregatesInput[]
    NOT?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostLike"> | string
    userId?: StringWithAggregatesFilter<"PostLike"> | string
    postId?: StringWithAggregatesFilter<"PostLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PostLike"> | Date | string
  }

  export type PostCommentWhereInput = {
    AND?: PostCommentWhereInput | PostCommentWhereInput[]
    OR?: PostCommentWhereInput[]
    NOT?: PostCommentWhereInput | PostCommentWhereInput[]
    id?: StringFilter<"PostComment"> | string
    content?: StringFilter<"PostComment"> | string
    createdAt?: DateTimeFilter<"PostComment"> | Date | string
    updatedAt?: DateTimeFilter<"PostComment"> | Date | string
    authorId?: StringFilter<"PostComment"> | string
    postId?: StringFilter<"PostComment"> | string
    parentCommentId?: StringNullableFilter<"PostComment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    parentComment?: XOR<PostCommentNullableScalarRelationFilter, PostCommentWhereInput> | null
    replies?: PostCommentListRelationFilter
  }

  export type PostCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    postId?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
    parentComment?: PostCommentOrderByWithRelationInput
    replies?: PostCommentOrderByRelationAggregateInput
  }

  export type PostCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostCommentWhereInput | PostCommentWhereInput[]
    OR?: PostCommentWhereInput[]
    NOT?: PostCommentWhereInput | PostCommentWhereInput[]
    content?: StringFilter<"PostComment"> | string
    createdAt?: DateTimeFilter<"PostComment"> | Date | string
    updatedAt?: DateTimeFilter<"PostComment"> | Date | string
    authorId?: StringFilter<"PostComment"> | string
    postId?: StringFilter<"PostComment"> | string
    parentCommentId?: StringNullableFilter<"PostComment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    parentComment?: XOR<PostCommentNullableScalarRelationFilter, PostCommentWhereInput> | null
    replies?: PostCommentListRelationFilter
  }, "id">

  export type PostCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    postId?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    _count?: PostCommentCountOrderByAggregateInput
    _max?: PostCommentMaxOrderByAggregateInput
    _min?: PostCommentMinOrderByAggregateInput
  }

  export type PostCommentScalarWhereWithAggregatesInput = {
    AND?: PostCommentScalarWhereWithAggregatesInput | PostCommentScalarWhereWithAggregatesInput[]
    OR?: PostCommentScalarWhereWithAggregatesInput[]
    NOT?: PostCommentScalarWhereWithAggregatesInput | PostCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostComment"> | string
    content?: StringWithAggregatesFilter<"PostComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PostComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PostComment"> | Date | string
    authorId?: StringWithAggregatesFilter<"PostComment"> | string
    postId?: StringWithAggregatesFilter<"PostComment"> | string
    parentCommentId?: StringNullableWithAggregatesFilter<"PostComment"> | string | null
  }

  export type PostShareWhereInput = {
    AND?: PostShareWhereInput | PostShareWhereInput[]
    OR?: PostShareWhereInput[]
    NOT?: PostShareWhereInput | PostShareWhereInput[]
    id?: StringFilter<"PostShare"> | string
    comment?: StringNullableFilter<"PostShare"> | string | null
    createdAt?: DateTimeFilter<"PostShare"> | Date | string
    userId?: StringFilter<"PostShare"> | string
    postId?: StringFilter<"PostShare"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostShareOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostShareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_postId?: PostShareUserIdPostIdCompoundUniqueInput
    AND?: PostShareWhereInput | PostShareWhereInput[]
    OR?: PostShareWhereInput[]
    NOT?: PostShareWhereInput | PostShareWhereInput[]
    comment?: StringNullableFilter<"PostShare"> | string | null
    createdAt?: DateTimeFilter<"PostShare"> | Date | string
    userId?: StringFilter<"PostShare"> | string
    postId?: StringFilter<"PostShare"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id" | "userId_postId">

  export type PostShareOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    _count?: PostShareCountOrderByAggregateInput
    _max?: PostShareMaxOrderByAggregateInput
    _min?: PostShareMinOrderByAggregateInput
  }

  export type PostShareScalarWhereWithAggregatesInput = {
    AND?: PostShareScalarWhereWithAggregatesInput | PostShareScalarWhereWithAggregatesInput[]
    OR?: PostShareScalarWhereWithAggregatesInput[]
    NOT?: PostShareScalarWhereWithAggregatesInput | PostShareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostShare"> | string
    comment?: StringNullableWithAggregatesFilter<"PostShare"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PostShare"> | Date | string
    userId?: StringWithAggregatesFilter<"PostShare"> | string
    postId?: StringWithAggregatesFilter<"PostShare"> | string
  }

  export type PostMentionWhereInput = {
    AND?: PostMentionWhereInput | PostMentionWhereInput[]
    OR?: PostMentionWhereInput[]
    NOT?: PostMentionWhereInput | PostMentionWhereInput[]
    id?: StringFilter<"PostMention"> | string
    createdAt?: DateTimeFilter<"PostMention"> | Date | string
    mentionedUserId?: StringFilter<"PostMention"> | string
    mentioningUserId?: StringFilter<"PostMention"> | string
    postId?: StringFilter<"PostMention"> | string
    mentionedUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    mentioningUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostMentionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    mentionedUserId?: SortOrder
    mentioningUserId?: SortOrder
    postId?: SortOrder
    mentionedUser?: UserOrderByWithRelationInput
    mentioningUser?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostMentionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mentionedUserId_postId?: PostMentionMentionedUserIdPostIdCompoundUniqueInput
    AND?: PostMentionWhereInput | PostMentionWhereInput[]
    OR?: PostMentionWhereInput[]
    NOT?: PostMentionWhereInput | PostMentionWhereInput[]
    createdAt?: DateTimeFilter<"PostMention"> | Date | string
    mentionedUserId?: StringFilter<"PostMention"> | string
    mentioningUserId?: StringFilter<"PostMention"> | string
    postId?: StringFilter<"PostMention"> | string
    mentionedUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    mentioningUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id" | "mentionedUserId_postId">

  export type PostMentionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    mentionedUserId?: SortOrder
    mentioningUserId?: SortOrder
    postId?: SortOrder
    _count?: PostMentionCountOrderByAggregateInput
    _max?: PostMentionMaxOrderByAggregateInput
    _min?: PostMentionMinOrderByAggregateInput
  }

  export type PostMentionScalarWhereWithAggregatesInput = {
    AND?: PostMentionScalarWhereWithAggregatesInput | PostMentionScalarWhereWithAggregatesInput[]
    OR?: PostMentionScalarWhereWithAggregatesInput[]
    NOT?: PostMentionScalarWhereWithAggregatesInput | PostMentionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostMention"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PostMention"> | Date | string
    mentionedUserId?: StringWithAggregatesFilter<"PostMention"> | string
    mentioningUserId?: StringWithAggregatesFilter<"PostMention"> | string
    postId?: StringWithAggregatesFilter<"PostMention"> | string
  }

  export type PostHashtagWhereInput = {
    AND?: PostHashtagWhereInput | PostHashtagWhereInput[]
    OR?: PostHashtagWhereInput[]
    NOT?: PostHashtagWhereInput | PostHashtagWhereInput[]
    id?: StringFilter<"PostHashtag"> | string
    tag?: StringFilter<"PostHashtag"> | string
    postId?: StringFilter<"PostHashtag"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostHashtagOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrder
    postId?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type PostHashtagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tag_postId?: PostHashtagTagPostIdCompoundUniqueInput
    AND?: PostHashtagWhereInput | PostHashtagWhereInput[]
    OR?: PostHashtagWhereInput[]
    NOT?: PostHashtagWhereInput | PostHashtagWhereInput[]
    tag?: StringFilter<"PostHashtag"> | string
    postId?: StringFilter<"PostHashtag"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id" | "tag_postId">

  export type PostHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrder
    postId?: SortOrder
    _count?: PostHashtagCountOrderByAggregateInput
    _max?: PostHashtagMaxOrderByAggregateInput
    _min?: PostHashtagMinOrderByAggregateInput
  }

  export type PostHashtagScalarWhereWithAggregatesInput = {
    AND?: PostHashtagScalarWhereWithAggregatesInput | PostHashtagScalarWhereWithAggregatesInput[]
    OR?: PostHashtagScalarWhereWithAggregatesInput[]
    NOT?: PostHashtagScalarWhereWithAggregatesInput | PostHashtagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostHashtag"> | string
    tag?: StringWithAggregatesFilter<"PostHashtag"> | string
    postId?: StringWithAggregatesFilter<"PostHashtag"> | string
  }

  export type PostResolutionWhereInput = {
    AND?: PostResolutionWhereInput | PostResolutionWhereInput[]
    OR?: PostResolutionWhereInput[]
    NOT?: PostResolutionWhereInput | PostResolutionWhereInput[]
    id?: StringFilter<"PostResolution"> | string
    description?: StringFilter<"PostResolution"> | string
    implementedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    costImpact?: DecimalNullableFilter<"PostResolution"> | Decimal | DecimalJsLike | number | string | null
    timeImpact?: FloatNullableFilter<"PostResolution"> | number | null
    lessonsLearned?: StringNullableFilter<"PostResolution"> | string | null
    preventiveMeasures?: StringNullableFilter<"PostResolution"> | string | null
    clientNotified?: BoolFilter<"PostResolution"> | boolean
    verifiedById?: StringNullableFilter<"PostResolution"> | string | null
    createdAt?: DateTimeFilter<"PostResolution"> | Date | string
    updatedAt?: DateTimeFilter<"PostResolution"> | Date | string
    verifier?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    posts?: PostListRelationFilter
  }

  export type PostResolutionOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    implementedAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    costImpact?: SortOrderInput | SortOrder
    timeImpact?: SortOrderInput | SortOrder
    lessonsLearned?: SortOrderInput | SortOrder
    preventiveMeasures?: SortOrderInput | SortOrder
    clientNotified?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    verifier?: UserOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
  }

  export type PostResolutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostResolutionWhereInput | PostResolutionWhereInput[]
    OR?: PostResolutionWhereInput[]
    NOT?: PostResolutionWhereInput | PostResolutionWhereInput[]
    description?: StringFilter<"PostResolution"> | string
    implementedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    costImpact?: DecimalNullableFilter<"PostResolution"> | Decimal | DecimalJsLike | number | string | null
    timeImpact?: FloatNullableFilter<"PostResolution"> | number | null
    lessonsLearned?: StringNullableFilter<"PostResolution"> | string | null
    preventiveMeasures?: StringNullableFilter<"PostResolution"> | string | null
    clientNotified?: BoolFilter<"PostResolution"> | boolean
    verifiedById?: StringNullableFilter<"PostResolution"> | string | null
    createdAt?: DateTimeFilter<"PostResolution"> | Date | string
    updatedAt?: DateTimeFilter<"PostResolution"> | Date | string
    verifier?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    posts?: PostListRelationFilter
  }, "id">

  export type PostResolutionOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    implementedAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    costImpact?: SortOrderInput | SortOrder
    timeImpact?: SortOrderInput | SortOrder
    lessonsLearned?: SortOrderInput | SortOrder
    preventiveMeasures?: SortOrderInput | SortOrder
    clientNotified?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostResolutionCountOrderByAggregateInput
    _avg?: PostResolutionAvgOrderByAggregateInput
    _max?: PostResolutionMaxOrderByAggregateInput
    _min?: PostResolutionMinOrderByAggregateInput
    _sum?: PostResolutionSumOrderByAggregateInput
  }

  export type PostResolutionScalarWhereWithAggregatesInput = {
    AND?: PostResolutionScalarWhereWithAggregatesInput | PostResolutionScalarWhereWithAggregatesInput[]
    OR?: PostResolutionScalarWhereWithAggregatesInput[]
    NOT?: PostResolutionScalarWhereWithAggregatesInput | PostResolutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostResolution"> | string
    description?: StringWithAggregatesFilter<"PostResolution"> | string
    implementedAt?: DateTimeNullableWithAggregatesFilter<"PostResolution"> | Date | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"PostResolution"> | Date | string | null
    costImpact?: DecimalNullableWithAggregatesFilter<"PostResolution"> | Decimal | DecimalJsLike | number | string | null
    timeImpact?: FloatNullableWithAggregatesFilter<"PostResolution"> | number | null
    lessonsLearned?: StringNullableWithAggregatesFilter<"PostResolution"> | string | null
    preventiveMeasures?: StringNullableWithAggregatesFilter<"PostResolution"> | string | null
    clientNotified?: BoolWithAggregatesFilter<"PostResolution"> | boolean
    verifiedById?: StringNullableWithAggregatesFilter<"PostResolution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PostResolution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PostResolution"> | Date | string
  }

  export type RFIWhereInput = {
    AND?: RFIWhereInput | RFIWhereInput[]
    OR?: RFIWhereInput[]
    NOT?: RFIWhereInput | RFIWhereInput[]
    id?: StringFilter<"RFI"> | string
    number?: StringFilter<"RFI"> | string
    subject?: StringFilter<"RFI"> | string
    description?: StringFilter<"RFI"> | string
    priority?: EnumRFIPriorityFilter<"RFI"> | $Enums.RFIPriority
    status?: EnumRFIStatusFilter<"RFI"> | $Enums.RFIStatus
    dueDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    responseDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    response?: StringNullableFilter<"RFI"> | string | null
    clientVisible?: BoolFilter<"RFI"> | boolean
    costImpact?: DecimalNullableFilter<"RFI"> | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: IntNullableFilter<"RFI"> | number | null
    category?: EnumRFICategoryFilter<"RFI"> | $Enums.RFICategory
    externalRFINumber?: StringNullableFilter<"RFI"> | string | null
    submittedById?: StringFilter<"RFI"> | string
    assignedToId?: StringNullableFilter<"RFI"> | string | null
    postId?: StringFilter<"RFI"> | string
    projectId?: StringFilter<"RFI"> | string
    organizationId?: StringFilter<"RFI"> | string
    createdAt?: DateTimeFilter<"RFI"> | Date | string
    updatedAt?: DateTimeFilter<"RFI"> | Date | string
    submittedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type RFIOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    responseDate?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    clientVisible?: SortOrder
    costImpact?: SortOrderInput | SortOrder
    scheduleImpact?: SortOrderInput | SortOrder
    category?: SortOrder
    externalRFINumber?: SortOrderInput | SortOrder
    submittedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    postId?: SortOrder
    projectId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedBy?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type RFIWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    number?: string
    AND?: RFIWhereInput | RFIWhereInput[]
    OR?: RFIWhereInput[]
    NOT?: RFIWhereInput | RFIWhereInput[]
    subject?: StringFilter<"RFI"> | string
    description?: StringFilter<"RFI"> | string
    priority?: EnumRFIPriorityFilter<"RFI"> | $Enums.RFIPriority
    status?: EnumRFIStatusFilter<"RFI"> | $Enums.RFIStatus
    dueDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    responseDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    response?: StringNullableFilter<"RFI"> | string | null
    clientVisible?: BoolFilter<"RFI"> | boolean
    costImpact?: DecimalNullableFilter<"RFI"> | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: IntNullableFilter<"RFI"> | number | null
    category?: EnumRFICategoryFilter<"RFI"> | $Enums.RFICategory
    externalRFINumber?: StringNullableFilter<"RFI"> | string | null
    submittedById?: StringFilter<"RFI"> | string
    assignedToId?: StringNullableFilter<"RFI"> | string | null
    postId?: StringFilter<"RFI"> | string
    projectId?: StringFilter<"RFI"> | string
    organizationId?: StringFilter<"RFI"> | string
    createdAt?: DateTimeFilter<"RFI"> | Date | string
    updatedAt?: DateTimeFilter<"RFI"> | Date | string
    submittedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "number">

  export type RFIOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    responseDate?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    clientVisible?: SortOrder
    costImpact?: SortOrderInput | SortOrder
    scheduleImpact?: SortOrderInput | SortOrder
    category?: SortOrder
    externalRFINumber?: SortOrderInput | SortOrder
    submittedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    postId?: SortOrder
    projectId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RFICountOrderByAggregateInput
    _avg?: RFIAvgOrderByAggregateInput
    _max?: RFIMaxOrderByAggregateInput
    _min?: RFIMinOrderByAggregateInput
    _sum?: RFISumOrderByAggregateInput
  }

  export type RFIScalarWhereWithAggregatesInput = {
    AND?: RFIScalarWhereWithAggregatesInput | RFIScalarWhereWithAggregatesInput[]
    OR?: RFIScalarWhereWithAggregatesInput[]
    NOT?: RFIScalarWhereWithAggregatesInput | RFIScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RFI"> | string
    number?: StringWithAggregatesFilter<"RFI"> | string
    subject?: StringWithAggregatesFilter<"RFI"> | string
    description?: StringWithAggregatesFilter<"RFI"> | string
    priority?: EnumRFIPriorityWithAggregatesFilter<"RFI"> | $Enums.RFIPriority
    status?: EnumRFIStatusWithAggregatesFilter<"RFI"> | $Enums.RFIStatus
    dueDate?: DateTimeNullableWithAggregatesFilter<"RFI"> | Date | string | null
    responseDate?: DateTimeNullableWithAggregatesFilter<"RFI"> | Date | string | null
    response?: StringNullableWithAggregatesFilter<"RFI"> | string | null
    clientVisible?: BoolWithAggregatesFilter<"RFI"> | boolean
    costImpact?: DecimalNullableWithAggregatesFilter<"RFI"> | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: IntNullableWithAggregatesFilter<"RFI"> | number | null
    category?: EnumRFICategoryWithAggregatesFilter<"RFI"> | $Enums.RFICategory
    externalRFINumber?: StringNullableWithAggregatesFilter<"RFI"> | string | null
    submittedById?: StringWithAggregatesFilter<"RFI"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"RFI"> | string | null
    postId?: StringWithAggregatesFilter<"RFI"> | string
    projectId?: StringWithAggregatesFilter<"RFI"> | string
    organizationId?: StringWithAggregatesFilter<"RFI"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RFI"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RFI"> | Date | string
  }

  export type ApprovalWhereInput = {
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    id?: StringFilter<"Approval"> | string
    type?: EnumApprovalTypeFilter<"Approval"> | $Enums.ApprovalType
    entityId?: StringFilter<"Approval"> | string
    entityType?: StringFilter<"Approval"> | string
    status?: EnumApprovalStatusFilter<"Approval"> | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFilter<"Approval"> | $Enums.ApprovalPriority
    dueDate?: DateTimeNullableFilter<"Approval"> | Date | string | null
    requestedAt?: DateTimeFilter<"Approval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Approval"> | Date | string | null
    comments?: StringNullableFilter<"Approval"> | string | null
    conditions?: StringNullableListFilter<"Approval">
    requesterId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    projectId?: StringFilter<"Approval"> | string
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    approver?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ApprovalOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    conditions?: SortOrder
    requesterId?: SortOrder
    approverId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    type?: EnumApprovalTypeFilter<"Approval"> | $Enums.ApprovalType
    entityId?: StringFilter<"Approval"> | string
    entityType?: StringFilter<"Approval"> | string
    status?: EnumApprovalStatusFilter<"Approval"> | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFilter<"Approval"> | $Enums.ApprovalPriority
    dueDate?: DateTimeNullableFilter<"Approval"> | Date | string | null
    requestedAt?: DateTimeFilter<"Approval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Approval"> | Date | string | null
    comments?: StringNullableFilter<"Approval"> | string | null
    conditions?: StringNullableListFilter<"Approval">
    requesterId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    projectId?: StringFilter<"Approval"> | string
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    approver?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type ApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    conditions?: SortOrder
    requesterId?: SortOrder
    approverId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApprovalCountOrderByAggregateInput
    _max?: ApprovalMaxOrderByAggregateInput
    _min?: ApprovalMinOrderByAggregateInput
  }

  export type ApprovalScalarWhereWithAggregatesInput = {
    AND?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    OR?: ApprovalScalarWhereWithAggregatesInput[]
    NOT?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Approval"> | string
    type?: EnumApprovalTypeWithAggregatesFilter<"Approval"> | $Enums.ApprovalType
    entityId?: StringWithAggregatesFilter<"Approval"> | string
    entityType?: StringWithAggregatesFilter<"Approval"> | string
    status?: EnumApprovalStatusWithAggregatesFilter<"Approval"> | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityWithAggregatesFilter<"Approval"> | $Enums.ApprovalPriority
    dueDate?: DateTimeNullableWithAggregatesFilter<"Approval"> | Date | string | null
    requestedAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"Approval"> | Date | string | null
    comments?: StringNullableWithAggregatesFilter<"Approval"> | string | null
    conditions?: StringNullableListFilter<"Approval">
    requesterId?: StringWithAggregatesFilter<"Approval"> | string
    approverId?: StringWithAggregatesFilter<"Approval"> | string
    projectId?: StringWithAggregatesFilter<"Approval"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
  }

  export type SafetyIncidentWhereInput = {
    AND?: SafetyIncidentWhereInput | SafetyIncidentWhereInput[]
    OR?: SafetyIncidentWhereInput[]
    NOT?: SafetyIncidentWhereInput | SafetyIncidentWhereInput[]
    id?: StringFilter<"SafetyIncident"> | string
    title?: StringFilter<"SafetyIncident"> | string
    description?: StringFilter<"SafetyIncident"> | string
    type?: EnumIncidentTypeFilter<"SafetyIncident"> | $Enums.IncidentType
    severity?: EnumIncidentSeverityFilter<"SafetyIncident"> | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFilter<"SafetyIncident"> | $Enums.IncidentStatus
    location?: StringNullableFilter<"SafetyIncident"> | string | null
    coordinates?: JsonNullableFilter<"SafetyIncident">
    injuryCount?: IntFilter<"SafetyIncident"> | number
    nearMiss?: BoolFilter<"SafetyIncident"> | boolean
    regulatoryNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    clientNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    rootCause?: StringNullableFilter<"SafetyIncident"> | string | null
    correctiveActions?: StringNullableFilter<"SafetyIncident"> | string | null
    preventiveMeasures?: StringNullableFilter<"SafetyIncident"> | string | null
    investigationComplete?: BoolFilter<"SafetyIncident"> | boolean
    occurredAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    reportedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"SafetyIncident"> | Date | string | null
    reporterId?: StringFilter<"SafetyIncident"> | string
    assignedToId?: StringNullableFilter<"SafetyIncident"> | string | null
    projectId?: StringFilter<"SafetyIncident"> | string
    postId?: StringFilter<"SafetyIncident"> | string
    createdAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    updatedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type SafetyIncidentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    injuryCount?: SortOrder
    nearMiss?: SortOrder
    regulatoryNotificationRequired?: SortOrder
    clientNotificationRequired?: SortOrder
    rootCause?: SortOrderInput | SortOrder
    correctiveActions?: SortOrderInput | SortOrder
    preventiveMeasures?: SortOrderInput | SortOrder
    investigationComplete?: SortOrder
    occurredAt?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    reporterId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reporter?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type SafetyIncidentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId?: string
    AND?: SafetyIncidentWhereInput | SafetyIncidentWhereInput[]
    OR?: SafetyIncidentWhereInput[]
    NOT?: SafetyIncidentWhereInput | SafetyIncidentWhereInput[]
    title?: StringFilter<"SafetyIncident"> | string
    description?: StringFilter<"SafetyIncident"> | string
    type?: EnumIncidentTypeFilter<"SafetyIncident"> | $Enums.IncidentType
    severity?: EnumIncidentSeverityFilter<"SafetyIncident"> | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFilter<"SafetyIncident"> | $Enums.IncidentStatus
    location?: StringNullableFilter<"SafetyIncident"> | string | null
    coordinates?: JsonNullableFilter<"SafetyIncident">
    injuryCount?: IntFilter<"SafetyIncident"> | number
    nearMiss?: BoolFilter<"SafetyIncident"> | boolean
    regulatoryNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    clientNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    rootCause?: StringNullableFilter<"SafetyIncident"> | string | null
    correctiveActions?: StringNullableFilter<"SafetyIncident"> | string | null
    preventiveMeasures?: StringNullableFilter<"SafetyIncident"> | string | null
    investigationComplete?: BoolFilter<"SafetyIncident"> | boolean
    occurredAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    reportedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"SafetyIncident"> | Date | string | null
    reporterId?: StringFilter<"SafetyIncident"> | string
    assignedToId?: StringNullableFilter<"SafetyIncident"> | string | null
    projectId?: StringFilter<"SafetyIncident"> | string
    createdAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    updatedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id" | "postId">

  export type SafetyIncidentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    injuryCount?: SortOrder
    nearMiss?: SortOrder
    regulatoryNotificationRequired?: SortOrder
    clientNotificationRequired?: SortOrder
    rootCause?: SortOrderInput | SortOrder
    correctiveActions?: SortOrderInput | SortOrder
    preventiveMeasures?: SortOrderInput | SortOrder
    investigationComplete?: SortOrder
    occurredAt?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    reporterId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SafetyIncidentCountOrderByAggregateInput
    _avg?: SafetyIncidentAvgOrderByAggregateInput
    _max?: SafetyIncidentMaxOrderByAggregateInput
    _min?: SafetyIncidentMinOrderByAggregateInput
    _sum?: SafetyIncidentSumOrderByAggregateInput
  }

  export type SafetyIncidentScalarWhereWithAggregatesInput = {
    AND?: SafetyIncidentScalarWhereWithAggregatesInput | SafetyIncidentScalarWhereWithAggregatesInput[]
    OR?: SafetyIncidentScalarWhereWithAggregatesInput[]
    NOT?: SafetyIncidentScalarWhereWithAggregatesInput | SafetyIncidentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SafetyIncident"> | string
    title?: StringWithAggregatesFilter<"SafetyIncident"> | string
    description?: StringWithAggregatesFilter<"SafetyIncident"> | string
    type?: EnumIncidentTypeWithAggregatesFilter<"SafetyIncident"> | $Enums.IncidentType
    severity?: EnumIncidentSeverityWithAggregatesFilter<"SafetyIncident"> | $Enums.IncidentSeverity
    status?: EnumIncidentStatusWithAggregatesFilter<"SafetyIncident"> | $Enums.IncidentStatus
    location?: StringNullableWithAggregatesFilter<"SafetyIncident"> | string | null
    coordinates?: JsonNullableWithAggregatesFilter<"SafetyIncident">
    injuryCount?: IntWithAggregatesFilter<"SafetyIncident"> | number
    nearMiss?: BoolWithAggregatesFilter<"SafetyIncident"> | boolean
    regulatoryNotificationRequired?: BoolWithAggregatesFilter<"SafetyIncident"> | boolean
    clientNotificationRequired?: BoolWithAggregatesFilter<"SafetyIncident"> | boolean
    rootCause?: StringNullableWithAggregatesFilter<"SafetyIncident"> | string | null
    correctiveActions?: StringNullableWithAggregatesFilter<"SafetyIncident"> | string | null
    preventiveMeasures?: StringNullableWithAggregatesFilter<"SafetyIncident"> | string | null
    investigationComplete?: BoolWithAggregatesFilter<"SafetyIncident"> | boolean
    occurredAt?: DateTimeWithAggregatesFilter<"SafetyIncident"> | Date | string
    reportedAt?: DateTimeWithAggregatesFilter<"SafetyIncident"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"SafetyIncident"> | Date | string | null
    reporterId?: StringWithAggregatesFilter<"SafetyIncident"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"SafetyIncident"> | string | null
    projectId?: StringWithAggregatesFilter<"SafetyIncident"> | string
    postId?: StringWithAggregatesFilter<"SafetyIncident"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SafetyIncident"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SafetyIncident"> | Date | string
  }

  export type UserFollowWhereInput = {
    AND?: UserFollowWhereInput | UserFollowWhereInput[]
    OR?: UserFollowWhereInput[]
    NOT?: UserFollowWhereInput | UserFollowWhereInput[]
    id?: StringFilter<"UserFollow"> | string
    createdAt?: DateTimeFilter<"UserFollow"> | Date | string
    followerId?: StringFilter<"UserFollow"> | string
    followingId?: StringFilter<"UserFollow"> | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserFollowOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type UserFollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    followerId_followingId?: UserFollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: UserFollowWhereInput | UserFollowWhereInput[]
    OR?: UserFollowWhereInput[]
    NOT?: UserFollowWhereInput | UserFollowWhereInput[]
    createdAt?: DateTimeFilter<"UserFollow"> | Date | string
    followerId?: StringFilter<"UserFollow"> | string
    followingId?: StringFilter<"UserFollow"> | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type UserFollowOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: UserFollowCountOrderByAggregateInput
    _max?: UserFollowMaxOrderByAggregateInput
    _min?: UserFollowMinOrderByAggregateInput
  }

  export type UserFollowScalarWhereWithAggregatesInput = {
    AND?: UserFollowScalarWhereWithAggregatesInput | UserFollowScalarWhereWithAggregatesInput[]
    OR?: UserFollowScalarWhereWithAggregatesInput[]
    NOT?: UserFollowScalarWhereWithAggregatesInput | UserFollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserFollow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserFollow"> | Date | string
    followerId?: StringWithAggregatesFilter<"UserFollow"> | string
    followingId?: StringWithAggregatesFilter<"UserFollow"> | string
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: StringFilter<"Achievement"> | string
    name?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    icon?: StringFilter<"Achievement"> | string
    category?: EnumAchievementCategoryFilter<"Achievement"> | $Enums.AchievementCategory
    points?: IntFilter<"Achievement"> | number
    rarity?: EnumAchievementRarityFilter<"Achievement"> | $Enums.AchievementRarity
    conditions?: JsonFilter<"Achievement">
    userAchievements?: UserAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    conditions?: SortOrder
    userAchievements?: UserAchievementOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    description?: StringFilter<"Achievement"> | string
    icon?: StringFilter<"Achievement"> | string
    category?: EnumAchievementCategoryFilter<"Achievement"> | $Enums.AchievementCategory
    points?: IntFilter<"Achievement"> | number
    rarity?: EnumAchievementRarityFilter<"Achievement"> | $Enums.AchievementRarity
    conditions?: JsonFilter<"Achievement">
    userAchievements?: UserAchievementListRelationFilter
  }, "id" | "name">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    conditions?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Achievement"> | string
    name?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringWithAggregatesFilter<"Achievement"> | string
    icon?: StringWithAggregatesFilter<"Achievement"> | string
    category?: EnumAchievementCategoryWithAggregatesFilter<"Achievement"> | $Enums.AchievementCategory
    points?: IntWithAggregatesFilter<"Achievement"> | number
    rarity?: EnumAchievementRarityWithAggregatesFilter<"Achievement"> | $Enums.AchievementRarity
    conditions?: JsonWithAggregatesFilter<"Achievement">
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: FloatFilter<"UserAchievement"> | number
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    user?: UserOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_achievementId?: UserAchievementUserIdAchievementIdCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: FloatFilter<"UserAchievement"> | number
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }, "id" | "userId_achievementId">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _avg?: UserAchievementAvgOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
    _sum?: UserAchievementSumOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    progress?: FloatWithAggregatesFilter<"UserAchievement"> | number
    userId?: StringWithAggregatesFilter<"UserAchievement"> | string
    achievementId?: StringWithAggregatesFilter<"UserAchievement"> | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    name?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    color?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    userBadges?: UserBadgeListRelationFilter
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    category?: SortOrder
    userBadges?: UserBadgeOrderByRelationAggregateInput
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    color?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    userBadges?: UserBadgeListRelationFilter
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    category?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringWithAggregatesFilter<"Badge"> | string
    icon?: StringWithAggregatesFilter<"Badge"> | string
    color?: StringWithAggregatesFilter<"Badge"> | string
    category?: EnumBadgeCategoryWithAggregatesFilter<"Badge"> | $Enums.BadgeCategory
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    level?: IntFilter<"UserBadge"> | number
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    badge?: XOR<BadgeScalarRelationFilter, BadgeWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    level?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    user?: UserOrderByWithRelationInput
    badge?: BadgeOrderByWithRelationInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_badgeId?: UserBadgeUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    level?: IntFilter<"UserBadge"> | number
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    badge?: XOR<BadgeScalarRelationFilter, BadgeWhereInput>
  }, "id" | "userId_badgeId">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    level?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _avg?: UserBadgeAvgOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
    _sum?: UserBadgeSumOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadge"> | string
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
    level?: IntWithAggregatesFilter<"UserBadge"> | number
    userId?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeId?: StringWithAggregatesFilter<"UserBadge"> | string
  }

  export type XPTransactionWhereInput = {
    AND?: XPTransactionWhereInput | XPTransactionWhereInput[]
    OR?: XPTransactionWhereInput[]
    NOT?: XPTransactionWhereInput | XPTransactionWhereInput[]
    id?: StringFilter<"XPTransaction"> | string
    amount?: IntFilter<"XPTransaction"> | number
    reason?: StringFilter<"XPTransaction"> | string
    category?: EnumXPCategoryFilter<"XPTransaction"> | $Enums.XPCategory
    metadata?: JsonNullableFilter<"XPTransaction">
    createdAt?: DateTimeFilter<"XPTransaction"> | Date | string
    userId?: StringFilter<"XPTransaction"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type XPTransactionOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    category?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type XPTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: XPTransactionWhereInput | XPTransactionWhereInput[]
    OR?: XPTransactionWhereInput[]
    NOT?: XPTransactionWhereInput | XPTransactionWhereInput[]
    amount?: IntFilter<"XPTransaction"> | number
    reason?: StringFilter<"XPTransaction"> | string
    category?: EnumXPCategoryFilter<"XPTransaction"> | $Enums.XPCategory
    metadata?: JsonNullableFilter<"XPTransaction">
    createdAt?: DateTimeFilter<"XPTransaction"> | Date | string
    userId?: StringFilter<"XPTransaction"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type XPTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    category?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: XPTransactionCountOrderByAggregateInput
    _avg?: XPTransactionAvgOrderByAggregateInput
    _max?: XPTransactionMaxOrderByAggregateInput
    _min?: XPTransactionMinOrderByAggregateInput
    _sum?: XPTransactionSumOrderByAggregateInput
  }

  export type XPTransactionScalarWhereWithAggregatesInput = {
    AND?: XPTransactionScalarWhereWithAggregatesInput | XPTransactionScalarWhereWithAggregatesInput[]
    OR?: XPTransactionScalarWhereWithAggregatesInput[]
    NOT?: XPTransactionScalarWhereWithAggregatesInput | XPTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"XPTransaction"> | string
    amount?: IntWithAggregatesFilter<"XPTransaction"> | number
    reason?: StringWithAggregatesFilter<"XPTransaction"> | string
    category?: EnumXPCategoryWithAggregatesFilter<"XPTransaction"> | $Enums.XPCategory
    metadata?: JsonNullableWithAggregatesFilter<"XPTransaction">
    createdAt?: DateTimeWithAggregatesFilter<"XPTransaction"> | Date | string
    userId?: StringWithAggregatesFilter<"XPTransaction"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    fileUrl?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    isPublic?: BoolFilter<"Document"> | boolean
    downloadCount?: IntFilter<"Document"> | number
    isConfidential?: BoolFilter<"Document"> | boolean
    requiresApproval?: BoolFilter<"Document"> | boolean
    approvalStatus?: EnumApprovalStatusFilter<"Document"> | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFilter<"Document"> | $Enums.AccessLevel
    retentionPeriod?: IntNullableFilter<"Document"> | number | null
    complianceFlags?: StringNullableListFilter<"Document">
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    projectId?: StringNullableFilter<"Document"> | string | null
    taskId?: StringNullableFilter<"Document"> | string | null
    uploadedById?: StringFilter<"Document"> | string
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    version?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
    downloadCount?: SortOrder
    isConfidential?: SortOrder
    requiresApproval?: SortOrder
    approvalStatus?: SortOrder
    accessLevel?: SortOrder
    retentionPeriod?: SortOrderInput | SortOrder
    complianceFlags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    project?: ProjectOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    name?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    fileUrl?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    isPublic?: BoolFilter<"Document"> | boolean
    downloadCount?: IntFilter<"Document"> | number
    isConfidential?: BoolFilter<"Document"> | boolean
    requiresApproval?: BoolFilter<"Document"> | boolean
    approvalStatus?: EnumApprovalStatusFilter<"Document"> | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFilter<"Document"> | $Enums.AccessLevel
    retentionPeriod?: IntNullableFilter<"Document"> | number | null
    complianceFlags?: StringNullableListFilter<"Document">
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    projectId?: StringNullableFilter<"Document"> | string | null
    taskId?: StringNullableFilter<"Document"> | string | null
    uploadedById?: StringFilter<"Document"> | string
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    version?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
    downloadCount?: SortOrder
    isConfidential?: SortOrder
    requiresApproval?: SortOrder
    approvalStatus?: SortOrder
    accessLevel?: SortOrder
    retentionPeriod?: SortOrderInput | SortOrder
    complianceFlags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    name?: StringWithAggregatesFilter<"Document"> | string
    description?: StringNullableWithAggregatesFilter<"Document"> | string | null
    fileUrl?: StringWithAggregatesFilter<"Document"> | string
    fileSize?: IntWithAggregatesFilter<"Document"> | number
    mimeType?: StringWithAggregatesFilter<"Document"> | string
    version?: StringWithAggregatesFilter<"Document"> | string
    type?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    isPublic?: BoolWithAggregatesFilter<"Document"> | boolean
    downloadCount?: IntWithAggregatesFilter<"Document"> | number
    isConfidential?: BoolWithAggregatesFilter<"Document"> | boolean
    requiresApproval?: BoolWithAggregatesFilter<"Document"> | boolean
    approvalStatus?: EnumApprovalStatusWithAggregatesFilter<"Document"> | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelWithAggregatesFilter<"Document"> | $Enums.AccessLevel
    retentionPeriod?: IntNullableWithAggregatesFilter<"Document"> | number | null
    complianceFlags?: StringNullableListFilter<"Document">
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    projectId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    uploadedById?: StringWithAggregatesFilter<"Document"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    projectId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type ActivityLogWhereInput = {
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    entity?: StringFilter<"ActivityLog"> | string
    entityId?: StringFilter<"ActivityLog"> | string
    oldValues?: JsonNullableFilter<"ActivityLog">
    newValues?: JsonNullableFilter<"ActivityLog">
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    sessionId?: StringNullableFilter<"ActivityLog"> | string | null
    riskLevel?: EnumRiskLevelFilter<"ActivityLog"> | $Enums.RiskLevel
    complianceFlag?: BoolFilter<"ActivityLog"> | boolean
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    userId?: StringFilter<"ActivityLog"> | string
    projectId?: StringNullableFilter<"ActivityLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
  }

  export type ActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    complianceFlag?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    action?: StringFilter<"ActivityLog"> | string
    entity?: StringFilter<"ActivityLog"> | string
    entityId?: StringFilter<"ActivityLog"> | string
    oldValues?: JsonNullableFilter<"ActivityLog">
    newValues?: JsonNullableFilter<"ActivityLog">
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    sessionId?: StringNullableFilter<"ActivityLog"> | string | null
    riskLevel?: EnumRiskLevelFilter<"ActivityLog"> | $Enums.RiskLevel
    complianceFlag?: BoolFilter<"ActivityLog"> | boolean
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    userId?: StringFilter<"ActivityLog"> | string
    projectId?: StringNullableFilter<"ActivityLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
  }, "id">

  export type ActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    complianceFlag?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: ActivityLogCountOrderByAggregateInput
    _max?: ActivityLogMaxOrderByAggregateInput
    _min?: ActivityLogMinOrderByAggregateInput
  }

  export type ActivityLogScalarWhereWithAggregatesInput = {
    AND?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    OR?: ActivityLogScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityLog"> | string
    action?: StringWithAggregatesFilter<"ActivityLog"> | string
    entity?: StringWithAggregatesFilter<"ActivityLog"> | string
    entityId?: StringWithAggregatesFilter<"ActivityLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"ActivityLog">
    newValues?: JsonNullableWithAggregatesFilter<"ActivityLog">
    ipAddress?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"ActivityLog"> | $Enums.RiskLevel
    complianceFlag?: BoolWithAggregatesFilter<"ActivityLog"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLog"> | Date | string
    userId?: StringWithAggregatesFilter<"ActivityLog"> | string
    projectId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserCreateNestedManyWithoutOrganizationInput
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    posts?: PostCreateNestedManyWithoutOrganizationInput
    rfis?: RFICreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    posts?: PostUncheckedCreateNestedManyWithoutOrganizationInput
    rfis?: RFIUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    posts?: PostUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    posts?: PostUncheckedUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectPhaseCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutPhasesInput
    tasks?: TaskCreateNestedManyWithoutPhaseInput
    posts?: PostCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    tasks?: TaskUncheckedCreateNestedManyWithoutPhaseInput
    posts?: PostUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutPhasesNestedInput
    tasks?: TaskUpdateManyWithoutPhaseNestedInput
    posts?: PostUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutPhaseNestedInput
    posts?: PostUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ProjectPhaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectPhaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    user: UserCreateNestedOneWithoutProjectMembersInput
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProjectMembersNestedInput
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateManyInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostCreateInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostAttachmentCreateInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    post: PostCreateNestedOneWithoutAttachmentsInput
    markups?: PostMarkupCreateNestedManyWithoutAttachmentInput
  }

  export type PostAttachmentUncheckedCreateInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    postId: string
    markups?: PostMarkupUncheckedCreateNestedManyWithoutAttachmentInput
  }

  export type PostAttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    post?: PostUpdateOneRequiredWithoutAttachmentsNestedInput
    markups?: PostMarkupUpdateManyWithoutAttachmentNestedInput
  }

  export type PostAttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    postId?: StringFieldUpdateOperationsInput | string
    markups?: PostMarkupUncheckedUpdateManyWithoutAttachmentNestedInput
  }

  export type PostAttachmentCreateManyInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    postId: string
  }

  export type PostAttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  }

  export type PostAttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMarkupCreateInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachment: PostAttachmentCreateNestedOneWithoutMarkupsInput
    post: PostCreateNestedOneWithoutMarkupsInput
  }

  export type PostMarkupUncheckedCreateInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachmentId: string
    postId: string
  }

  export type PostMarkupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachment?: PostAttachmentUpdateOneRequiredWithoutMarkupsNestedInput
    post?: PostUpdateOneRequiredWithoutMarkupsNestedInput
  }

  export type PostMarkupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachmentId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMarkupCreateManyInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachmentId: string
    postId: string
  }

  export type PostMarkupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
  }

  export type PostMarkupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachmentId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostBimElementCreateInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    post: PostCreateNestedOneWithoutBimElementsInput
  }

  export type PostBimElementUncheckedCreateInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    postId: string
  }

  export type PostBimElementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    post?: PostUpdateOneRequiredWithoutBimElementsNestedInput
  }

  export type PostBimElementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostBimElementCreateManyInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    postId: string
  }

  export type PostBimElementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostBimElementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostLikesInput
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type PostLikeUncheckedCreateInput = {
    id?: string
    userId: string
    postId: string
    createdAt?: Date | string
  }

  export type PostLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostLikesNestedInput
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type PostLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeCreateManyInput = {
    id?: string
    userId: string
    postId: string
    createdAt?: Date | string
  }

  export type PostLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    parentComment?: PostCommentCreateNestedOneWithoutRepliesInput
    replies?: PostCommentCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    postId: string
    parentCommentId?: string | null
    replies?: PostCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: PostCommentUpdateOneWithoutRepliesNestedInput
    replies?: PostCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: PostCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    postId: string
    parentCommentId?: string | null
  }

  export type PostCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostShareCreateInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostSharesInput
    post: PostCreateNestedOneWithoutSharesInput
  }

  export type PostShareUncheckedCreateInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    userId: string
    postId: string
  }

  export type PostShareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostSharesNestedInput
    post?: PostUpdateOneRequiredWithoutSharesNestedInput
  }

  export type PostShareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostShareCreateManyInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    userId: string
    postId: string
  }

  export type PostShareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostShareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionCreateInput = {
    id?: string
    createdAt?: Date | string
    mentionedUser: UserCreateNestedOneWithoutMentionsInput
    mentioningUser: UserCreateNestedOneWithoutMentionedByInput
    post: PostCreateNestedOneWithoutMentionsInput
  }

  export type PostMentionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    mentioningUserId: string
    postId: string
  }

  export type PostMentionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUser?: UserUpdateOneRequiredWithoutMentionsNestedInput
    mentioningUser?: UserUpdateOneRequiredWithoutMentionedByNestedInput
    post?: PostUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type PostMentionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    mentioningUserId: string
    postId: string
  }

  export type PostMentionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostMentionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagCreateInput = {
    id?: string
    tag: string
    post: PostCreateNestedOneWithoutHashtagsInput
  }

  export type PostHashtagUncheckedCreateInput = {
    id?: string
    tag: string
    postId: string
  }

  export type PostHashtagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutHashtagsNestedInput
  }

  export type PostHashtagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagCreateManyInput = {
    id?: string
    tag: string
    postId: string
  }

  export type PostHashtagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostResolutionCreateInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    verifier?: UserCreateNestedOneWithoutVerifiedResolutionsInput
    posts?: PostCreateNestedManyWithoutResolutionInput
  }

  export type PostResolutionUncheckedCreateInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    verifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutResolutionInput
  }

  export type PostResolutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifier?: UserUpdateOneWithoutVerifiedResolutionsNestedInput
    posts?: PostUpdateManyWithoutResolutionNestedInput
  }

  export type PostResolutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutResolutionNestedInput
  }

  export type PostResolutionCreateManyInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    verifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostResolutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostResolutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFICreateInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedRFIsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedRFIsInput
    post: PostCreateNestedOneWithoutRfisInput
    project: ProjectCreateNestedOneWithoutRfisInput
    organization: OrganizationCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFIUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedRFIsNestedInput
    post?: PostUpdateOneRequiredWithoutRfisNestedInput
    project?: ProjectUpdateOneRequiredWithoutRfisNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFICreateManyInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFIUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutApprovalsReceivedInput
    approver: UserCreateNestedOneWithoutApprovalsGivenInput
    project: ProjectCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    approverId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutApprovalsReceivedNestedInput
    approver?: UserUpdateOneRequiredWithoutApprovalsGivenNestedInput
    project?: ProjectUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateManyInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    approverId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentCreateInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportedIncidentsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedIncidentsInput
    project: ProjectCreateNestedOneWithoutSafetyIncidentsInput
    post: PostCreateNestedOneWithoutSafetyIncidentInput
  }

  export type SafetyIncidentUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    assignedToId?: string | null
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportedIncidentsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedIncidentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutSafetyIncidentsNestedInput
    post?: PostUpdateOneRequiredWithoutSafetyIncidentNestedInput
  }

  export type SafetyIncidentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentCreateManyInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    assignedToId?: string | null
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFollowCreateInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type UserFollowUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
    followingId: string
  }

  export type UserFollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type UserFollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowCreateManyInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
    followingId: string
  }

  export type UserFollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points?: number
    rarity?: $Enums.AchievementRarity
    conditions: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points?: number
    rarity?: $Enums.AchievementRarity
    conditions: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points?: number
    rarity?: $Enums.AchievementRarity
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    user: UserCreateNestedOneWithoutAchievementsInput
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementCreateManyInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type BadgeCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    color?: string
    category: $Enums.BadgeCategory
    userBadges?: UserBadgeCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    color?: string
    category: $Enums.BadgeCategory
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    userBadges?: UserBadgeUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    userBadges?: UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeCreateManyInput = {
    id?: string
    name: string
    description: string
    icon: string
    color?: string
    category: $Enums.BadgeCategory
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
  }

  export type UserBadgeCreateInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    user: UserCreateNestedOneWithoutBadgesInput
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    userId: string
    badgeId: string
  }

  export type UserBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBadgesNestedInput
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeCreateManyInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    userId: string
    badgeId: string
  }

  export type UserBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type XPTransactionCreateInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutXpTransactionsInput
  }

  export type XPTransactionUncheckedCreateInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId: string
  }

  export type XPTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutXpTransactionsNestedInput
  }

  export type XPTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type XPTransactionCreateManyInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId: string
  }

  export type XPTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XPTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutDocumentsInput
    task?: TaskCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
    uploadedById: string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutDocumentsNestedInput
    task?: TaskUpdateOneWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
    uploadedById: string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    taskId?: string | null
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    taskId?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLogsInput
    project?: ProjectCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
  }

  export type ActivityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLogsNestedInput
    project?: ProjectUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogCreateManyInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
  }

  export type ActivityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type RFIListRelationFilter = {
    every?: RFIWhereInput
    some?: RFIWhereInput
    none?: RFIWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RFIOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionTier?: SortOrder
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    customBranding?: SortOrder
    ssoEnabled?: SortOrder
    auditRetention?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    auditRetention?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionTier?: SortOrder
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    customBranding?: SortOrder
    ssoEnabled?: SortOrder
    auditRetention?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionTier?: SortOrder
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    customBranding?: SortOrder
    ssoEnabled?: SortOrder
    auditRetention?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    maxProjects?: SortOrder
    maxUsersPerProject?: SortOrder
    apiRateLimit?: SortOrder
    storageLimit?: SortOrder
    auditRetention?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type ProjectMemberListRelationFilter = {
    every?: ProjectMemberWhereInput
    some?: ProjectMemberWhereInput
    none?: ProjectMemberWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ActivityLogListRelationFilter = {
    every?: ActivityLogWhereInput
    some?: ActivityLogWhereInput
    none?: ActivityLogWhereInput
  }

  export type PostLikeListRelationFilter = {
    every?: PostLikeWhereInput
    some?: PostLikeWhereInput
    none?: PostLikeWhereInput
  }

  export type PostCommentListRelationFilter = {
    every?: PostCommentWhereInput
    some?: PostCommentWhereInput
    none?: PostCommentWhereInput
  }

  export type PostShareListRelationFilter = {
    every?: PostShareWhereInput
    some?: PostShareWhereInput
    none?: PostShareWhereInput
  }

  export type PostMentionListRelationFilter = {
    every?: PostMentionWhereInput
    some?: PostMentionWhereInput
    none?: PostMentionWhereInput
  }

  export type UserFollowListRelationFilter = {
    every?: UserFollowWhereInput
    some?: UserFollowWhereInput
    none?: UserFollowWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type XPTransactionListRelationFilter = {
    every?: XPTransactionWhereInput
    some?: XPTransactionWhereInput
    none?: XPTransactionWhereInput
  }

  export type SafetyIncidentListRelationFilter = {
    every?: SafetyIncidentWhereInput
    some?: SafetyIncidentWhereInput
    none?: SafetyIncidentWhereInput
  }

  export type PostResolutionListRelationFilter = {
    every?: PostResolutionWhereInput
    some?: PostResolutionWhereInput
    none?: PostResolutionWhereInput
  }

  export type ApprovalListRelationFilter = {
    every?: ApprovalWhereInput
    some?: ApprovalWhereInput
    none?: ApprovalWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostMentionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type XPTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SafetyIncidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostResolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    bio?: SortOrder
    specialization?: SortOrder
    experienceYears?: SortOrder
    location?: SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
    professionalLevel?: SortOrder
    certifications?: SortOrder
    skills?: SortOrder
    phoneNumber?: SortOrder
    emergencyContact?: SortOrder
    lastActiveProject?: SortOrder
    timezone?: SortOrder
    notificationPrefs?: SortOrder
    workingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    experienceYears?: SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    bio?: SortOrder
    specialization?: SortOrder
    experienceYears?: SortOrder
    location?: SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
    professionalLevel?: SortOrder
    phoneNumber?: SortOrder
    emergencyContact?: SortOrder
    lastActiveProject?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    bio?: SortOrder
    specialization?: SortOrder
    experienceYears?: SortOrder
    location?: SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
    professionalLevel?: SortOrder
    phoneNumber?: SortOrder
    emergencyContact?: SortOrder
    lastActiveProject?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    experienceYears?: SortOrder
    contributionScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    collaborationScore?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumComplianceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusFilter<$PrismaModel> | $Enums.ComplianceStatus
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type ProjectPhaseListRelationFilter = {
    every?: ProjectPhaseWhereInput
    some?: ProjectPhaseWhereInput
    none?: ProjectPhaseWhereInput
  }

  export type ProjectPhaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    address?: SortOrder
    coordinates?: SortOrder
    bimModelUrl?: SortOrder
    isPublic?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
    clientName?: SortOrder
    contractNumber?: SortOrder
    projectCode?: SortOrder
    regulatoryReqs?: SortOrder
    complianceStatus?: SortOrder
    riskLevel?: SortOrder
    clientApprovalRequired?: SortOrder
    clientContactEmail?: SortOrder
    clientContactName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    budget?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    address?: SortOrder
    bimModelUrl?: SortOrder
    isPublic?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
    clientName?: SortOrder
    contractNumber?: SortOrder
    projectCode?: SortOrder
    complianceStatus?: SortOrder
    riskLevel?: SortOrder
    clientApprovalRequired?: SortOrder
    clientContactEmail?: SortOrder
    clientContactName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    address?: SortOrder
    bimModelUrl?: SortOrder
    isPublic?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
    clientName?: SortOrder
    contractNumber?: SortOrder
    projectCode?: SortOrder
    complianceStatus?: SortOrder
    riskLevel?: SortOrder
    clientApprovalRequired?: SortOrder
    clientContactEmail?: SortOrder
    clientContactName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    budget?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    collaborationScore?: SortOrder
    safetyScore?: SortOrder
    qualityScore?: SortOrder
    efficiencyScore?: SortOrder
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumComplianceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStatusFilter<$PrismaModel>
    _max?: NestedEnumComplianceStatusFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type EnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProjectPhaseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrder
    actualCost?: SortOrder
    milestones?: SortOrder
    dependencies?: SortOrder
    criticalPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectPhaseAvgOrderByAggregateInput = {
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrder
    actualCost?: SortOrder
  }

  export type ProjectPhaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrder
    actualCost?: SortOrder
    criticalPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectPhaseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrder
    actualCost?: SortOrder
    criticalPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectPhaseSumOrderByAggregateInput = {
    progress?: SortOrder
    order?: SortOrder
    budgetAllocated?: SortOrder
    actualCost?: SortOrder
  }

  export type EnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type EnumProjectRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleFilter<$PrismaModel> | $Enums.ProjectRole
  }

  export type EnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProjectMemberUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type ProjectMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    hourlyRate?: SortOrder
    maxHoursPerWeek?: SortOrder
    accessLevel?: SortOrder
    isLead?: SortOrder
    department?: SortOrder
    costCenter?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberAvgOrderByAggregateInput = {
    hourlyRate?: SortOrder
    maxHoursPerWeek?: SortOrder
  }

  export type ProjectMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    hourlyRate?: SortOrder
    maxHoursPerWeek?: SortOrder
    accessLevel?: SortOrder
    isLead?: SortOrder
    department?: SortOrder
    costCenter?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    hourlyRate?: SortOrder
    maxHoursPerWeek?: SortOrder
    accessLevel?: SortOrder
    isLead?: SortOrder
    department?: SortOrder
    costCenter?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberSumOrderByAggregateInput = {
    hourlyRate?: SortOrder
    maxHoursPerWeek?: SortOrder
  }

  export type EnumProjectRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectRoleFilter<$PrismaModel>
  }

  export type EnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type EnumTaskPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityFilter<$PrismaModel> | $Enums.TaskPriority
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProjectPhaseNullableScalarRelationFilter = {
    is?: ProjectPhaseWhereInput | null
    isNot?: ProjectPhaseWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TaskNullableScalarRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    tags?: SortOrder
    isBlocked?: SortOrder
    blockedReason?: SortOrder
    blockedSince?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    requiresApproval?: SortOrder
    isClientVisible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    isBlocked?: SortOrder
    blockedReason?: SortOrder
    blockedSince?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    requiresApproval?: SortOrder
    isClientVisible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    isBlocked?: SortOrder
    blockedReason?: SortOrder
    blockedSince?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    requiresApproval?: SortOrder
    isClientVisible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type EnumTaskPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel> | $Enums.TaskPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPriorityFilter<$PrismaModel>
    _max?: NestedEnumTaskPriorityFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumPostTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeFilter<$PrismaModel> | $Enums.PostType
  }

  export type EnumPostPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.PostPriority | EnumPostPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPostPriorityFilter<$PrismaModel> | $Enums.PostPriority
  }

  export type EnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type EnumBusinessImpactFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessImpact | EnumBusinessImpactFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessImpactFilter<$PrismaModel> | $Enums.BusinessImpact
  }

  export type PostAttachmentListRelationFilter = {
    every?: PostAttachmentWhereInput
    some?: PostAttachmentWhereInput
    none?: PostAttachmentWhereInput
  }

  export type PostMarkupListRelationFilter = {
    every?: PostMarkupWhereInput
    some?: PostMarkupWhereInput
    none?: PostMarkupWhereInput
  }

  export type PostBimElementListRelationFilter = {
    every?: PostBimElementWhereInput
    some?: PostBimElementWhereInput
    none?: PostBimElementWhereInput
  }

  export type PostHashtagListRelationFilter = {
    every?: PostHashtagWhereInput
    some?: PostHashtagWhereInput
    none?: PostHashtagWhereInput
  }

  export type SafetyIncidentNullableScalarRelationFilter = {
    is?: SafetyIncidentWhereInput | null
    isNot?: SafetyIncidentWhereInput | null
  }

  export type PostResolutionNullableScalarRelationFilter = {
    is?: PostResolutionWhereInput | null
    isNot?: PostResolutionWhereInput | null
  }

  export type PostAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostMarkupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostBimElementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostHashtagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
    requiresApproval?: SortOrder
    approvedAt?: SortOrder
    approvedById?: SortOrder
    isClientVisible?: SortOrder
    estimatedResolution?: SortOrder
    actualResolution?: SortOrder
    businessImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    taskId?: SortOrder
    resolutionId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
    requiresApproval?: SortOrder
    approvedAt?: SortOrder
    approvedById?: SortOrder
    isClientVisible?: SortOrder
    estimatedResolution?: SortOrder
    actualResolution?: SortOrder
    businessImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    taskId?: SortOrder
    resolutionId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
    requiresApproval?: SortOrder
    approvedAt?: SortOrder
    approvedById?: SortOrder
    isClientVisible?: SortOrder
    estimatedResolution?: SortOrder
    actualResolution?: SortOrder
    businessImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    projectId?: SortOrder
    phaseId?: SortOrder
    taskId?: SortOrder
    resolutionId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    viewCount?: SortOrder
    likeCount?: SortOrder
    commentCount?: SortOrder
    shareCount?: SortOrder
  }

  export type EnumPostTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeWithAggregatesFilter<$PrismaModel> | $Enums.PostType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostTypeFilter<$PrismaModel>
    _max?: NestedEnumPostTypeFilter<$PrismaModel>
  }

  export type EnumPostPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostPriority | EnumPostPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPostPriorityWithAggregatesFilter<$PrismaModel> | $Enums.PostPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostPriorityFilter<$PrismaModel>
    _max?: NestedEnumPostPriorityFilter<$PrismaModel>
  }

  export type EnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type EnumBusinessImpactWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessImpact | EnumBusinessImpactFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessImpactWithAggregatesFilter<$PrismaModel> | $Enums.BusinessImpact
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessImpactFilter<$PrismaModel>
    _max?: NestedEnumBusinessImpactFilter<$PrismaModel>
  }

  export type EnumAttachmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentType | EnumAttachmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentTypeFilter<$PrismaModel> | $Enums.AttachmentType
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type PostAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    metadata?: SortOrder
    order?: SortOrder
    isConfidential?: SortOrder
    accessLevel?: SortOrder
    postId?: SortOrder
  }

  export type PostAttachmentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    order?: SortOrder
  }

  export type PostAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    order?: SortOrder
    isConfidential?: SortOrder
    accessLevel?: SortOrder
    postId?: SortOrder
  }

  export type PostAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    order?: SortOrder
    isConfidential?: SortOrder
    accessLevel?: SortOrder
    postId?: SortOrder
  }

  export type PostAttachmentSumOrderByAggregateInput = {
    fileSize?: SortOrder
    order?: SortOrder
  }

  export type EnumAttachmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentType | EnumAttachmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AttachmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttachmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAttachmentTypeFilter<$PrismaModel>
  }

  export type EnumMarkupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MarkupType | EnumMarkupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMarkupTypeFilter<$PrismaModel> | $Enums.MarkupType
  }

  export type PostAttachmentScalarRelationFilter = {
    is?: PostAttachmentWhereInput
    isNot?: PostAttachmentWhereInput
  }

  export type PostMarkupCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    coordinates?: SortOrder
    content?: SortOrder
    color?: SortOrder
    strokeWidth?: SortOrder
    opacity?: SortOrder
    attachmentId?: SortOrder
    postId?: SortOrder
  }

  export type PostMarkupAvgOrderByAggregateInput = {
    strokeWidth?: SortOrder
    opacity?: SortOrder
  }

  export type PostMarkupMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    color?: SortOrder
    strokeWidth?: SortOrder
    opacity?: SortOrder
    attachmentId?: SortOrder
    postId?: SortOrder
  }

  export type PostMarkupMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    color?: SortOrder
    strokeWidth?: SortOrder
    opacity?: SortOrder
    attachmentId?: SortOrder
    postId?: SortOrder
  }

  export type PostMarkupSumOrderByAggregateInput = {
    strokeWidth?: SortOrder
    opacity?: SortOrder
  }

  export type EnumMarkupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MarkupType | EnumMarkupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMarkupTypeWithAggregatesFilter<$PrismaModel> | $Enums.MarkupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMarkupTypeFilter<$PrismaModel>
    _max?: NestedEnumMarkupTypeFilter<$PrismaModel>
  }

  export type EnumBimDisciplineFilter<$PrismaModel = never> = {
    equals?: $Enums.BimDiscipline | EnumBimDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumBimDisciplineFilter<$PrismaModel> | $Enums.BimDiscipline
  }

  export type PostBimElementCountOrderByAggregateInput = {
    id?: SortOrder
    elementId?: SortOrder
    elementType?: SortOrder
    elementName?: SortOrder
    discipline?: SortOrder
    properties?: SortOrder
    postId?: SortOrder
  }

  export type PostBimElementMaxOrderByAggregateInput = {
    id?: SortOrder
    elementId?: SortOrder
    elementType?: SortOrder
    elementName?: SortOrder
    discipline?: SortOrder
    postId?: SortOrder
  }

  export type PostBimElementMinOrderByAggregateInput = {
    id?: SortOrder
    elementId?: SortOrder
    elementType?: SortOrder
    elementName?: SortOrder
    discipline?: SortOrder
    postId?: SortOrder
  }

  export type EnumBimDisciplineWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BimDiscipline | EnumBimDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumBimDisciplineWithAggregatesFilter<$PrismaModel> | $Enums.BimDiscipline
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBimDisciplineFilter<$PrismaModel>
    _max?: NestedEnumBimDisciplineFilter<$PrismaModel>
  }

  export type PostLikeUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type PostLikeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostLikeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostCommentNullableScalarRelationFilter = {
    is?: PostCommentWhereInput | null
    isNot?: PostCommentWhereInput | null
  }

  export type PostCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    postId?: SortOrder
    parentCommentId?: SortOrder
  }

  export type PostCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    postId?: SortOrder
    parentCommentId?: SortOrder
  }

  export type PostCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    postId?: SortOrder
    parentCommentId?: SortOrder
  }

  export type PostShareUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type PostShareCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostShareMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostShareMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostMentionMentionedUserIdPostIdCompoundUniqueInput = {
    mentionedUserId: string
    postId: string
  }

  export type PostMentionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    mentionedUserId?: SortOrder
    mentioningUserId?: SortOrder
    postId?: SortOrder
  }

  export type PostMentionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    mentionedUserId?: SortOrder
    mentioningUserId?: SortOrder
    postId?: SortOrder
  }

  export type PostMentionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    mentionedUserId?: SortOrder
    mentioningUserId?: SortOrder
    postId?: SortOrder
  }

  export type PostHashtagTagPostIdCompoundUniqueInput = {
    tag: string
    postId: string
  }

  export type PostHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    postId?: SortOrder
  }

  export type PostHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    postId?: SortOrder
  }

  export type PostHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    postId?: SortOrder
  }

  export type PostResolutionCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    implementedAt?: SortOrder
    verifiedAt?: SortOrder
    costImpact?: SortOrder
    timeImpact?: SortOrder
    lessonsLearned?: SortOrder
    preventiveMeasures?: SortOrder
    clientNotified?: SortOrder
    verifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostResolutionAvgOrderByAggregateInput = {
    costImpact?: SortOrder
    timeImpact?: SortOrder
  }

  export type PostResolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    implementedAt?: SortOrder
    verifiedAt?: SortOrder
    costImpact?: SortOrder
    timeImpact?: SortOrder
    lessonsLearned?: SortOrder
    preventiveMeasures?: SortOrder
    clientNotified?: SortOrder
    verifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostResolutionMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    implementedAt?: SortOrder
    verifiedAt?: SortOrder
    costImpact?: SortOrder
    timeImpact?: SortOrder
    lessonsLearned?: SortOrder
    preventiveMeasures?: SortOrder
    clientNotified?: SortOrder
    verifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostResolutionSumOrderByAggregateInput = {
    costImpact?: SortOrder
    timeImpact?: SortOrder
  }

  export type EnumRFIPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIPriority | EnumRFIPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIPriorityFilter<$PrismaModel> | $Enums.RFIPriority
  }

  export type EnumRFIStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIStatus | EnumRFIStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIStatusFilter<$PrismaModel> | $Enums.RFIStatus
  }

  export type EnumRFICategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.RFICategory | EnumRFICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRFICategoryFilter<$PrismaModel> | $Enums.RFICategory
  }

  export type RFICountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    responseDate?: SortOrder
    response?: SortOrder
    clientVisible?: SortOrder
    costImpact?: SortOrder
    scheduleImpact?: SortOrder
    category?: SortOrder
    externalRFINumber?: SortOrder
    submittedById?: SortOrder
    assignedToId?: SortOrder
    postId?: SortOrder
    projectId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RFIAvgOrderByAggregateInput = {
    costImpact?: SortOrder
    scheduleImpact?: SortOrder
  }

  export type RFIMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    responseDate?: SortOrder
    response?: SortOrder
    clientVisible?: SortOrder
    costImpact?: SortOrder
    scheduleImpact?: SortOrder
    category?: SortOrder
    externalRFINumber?: SortOrder
    submittedById?: SortOrder
    assignedToId?: SortOrder
    postId?: SortOrder
    projectId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RFIMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    responseDate?: SortOrder
    response?: SortOrder
    clientVisible?: SortOrder
    costImpact?: SortOrder
    scheduleImpact?: SortOrder
    category?: SortOrder
    externalRFINumber?: SortOrder
    submittedById?: SortOrder
    assignedToId?: SortOrder
    postId?: SortOrder
    projectId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RFISumOrderByAggregateInput = {
    costImpact?: SortOrder
    scheduleImpact?: SortOrder
  }

  export type EnumRFIPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIPriority | EnumRFIPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIPriorityWithAggregatesFilter<$PrismaModel> | $Enums.RFIPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFIPriorityFilter<$PrismaModel>
    _max?: NestedEnumRFIPriorityFilter<$PrismaModel>
  }

  export type EnumRFIStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIStatus | EnumRFIStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIStatusWithAggregatesFilter<$PrismaModel> | $Enums.RFIStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFIStatusFilter<$PrismaModel>
    _max?: NestedEnumRFIStatusFilter<$PrismaModel>
  }

  export type EnumRFICategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFICategory | EnumRFICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRFICategoryWithAggregatesFilter<$PrismaModel> | $Enums.RFICategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFICategoryFilter<$PrismaModel>
    _max?: NestedEnumRFICategoryFilter<$PrismaModel>
  }

  export type EnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type EnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type EnumApprovalPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalPriority | EnumApprovalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalPriorityFilter<$PrismaModel> | $Enums.ApprovalPriority
  }

  export type ApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    conditions?: SortOrder
    requesterId?: SortOrder
    approverId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    requesterId?: SortOrder
    approverId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    requesterId?: SortOrder
    approverId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type EnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type EnumApprovalPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalPriority | EnumApprovalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalPriorityFilter<$PrismaModel>
    _max?: NestedEnumApprovalPriorityFilter<$PrismaModel>
  }

  export type EnumIncidentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentType | EnumIncidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentTypeFilter<$PrismaModel> | $Enums.IncidentType
  }

  export type EnumIncidentSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentSeverity | EnumIncidentSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentSeverityFilter<$PrismaModel> | $Enums.IncidentSeverity
  }

  export type EnumIncidentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusFilter<$PrismaModel> | $Enums.IncidentStatus
  }

  export type SafetyIncidentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    location?: SortOrder
    coordinates?: SortOrder
    injuryCount?: SortOrder
    nearMiss?: SortOrder
    regulatoryNotificationRequired?: SortOrder
    clientNotificationRequired?: SortOrder
    rootCause?: SortOrder
    correctiveActions?: SortOrder
    preventiveMeasures?: SortOrder
    investigationComplete?: SortOrder
    occurredAt?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    reporterId?: SortOrder
    assignedToId?: SortOrder
    projectId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SafetyIncidentAvgOrderByAggregateInput = {
    injuryCount?: SortOrder
  }

  export type SafetyIncidentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    location?: SortOrder
    injuryCount?: SortOrder
    nearMiss?: SortOrder
    regulatoryNotificationRequired?: SortOrder
    clientNotificationRequired?: SortOrder
    rootCause?: SortOrder
    correctiveActions?: SortOrder
    preventiveMeasures?: SortOrder
    investigationComplete?: SortOrder
    occurredAt?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    reporterId?: SortOrder
    assignedToId?: SortOrder
    projectId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SafetyIncidentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    location?: SortOrder
    injuryCount?: SortOrder
    nearMiss?: SortOrder
    regulatoryNotificationRequired?: SortOrder
    clientNotificationRequired?: SortOrder
    rootCause?: SortOrder
    correctiveActions?: SortOrder
    preventiveMeasures?: SortOrder
    investigationComplete?: SortOrder
    occurredAt?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    reporterId?: SortOrder
    assignedToId?: SortOrder
    projectId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SafetyIncidentSumOrderByAggregateInput = {
    injuryCount?: SortOrder
  }

  export type EnumIncidentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentType | EnumIncidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentTypeWithAggregatesFilter<$PrismaModel> | $Enums.IncidentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentTypeFilter<$PrismaModel>
    _max?: NestedEnumIncidentTypeFilter<$PrismaModel>
  }

  export type EnumIncidentSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentSeverity | EnumIncidentSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentSeverityWithAggregatesFilter<$PrismaModel> | $Enums.IncidentSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentSeverityFilter<$PrismaModel>
    _max?: NestedEnumIncidentSeverityFilter<$PrismaModel>
  }

  export type EnumIncidentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncidentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentStatusFilter<$PrismaModel>
    _max?: NestedEnumIncidentStatusFilter<$PrismaModel>
  }

  export type UserFollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type UserFollowCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type UserFollowMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type UserFollowMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type EnumAchievementCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryFilter<$PrismaModel> | $Enums.AchievementCategory
  }

  export type EnumAchievementRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityFilter<$PrismaModel> | $Enums.AchievementRarity
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    conditions?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type EnumAchievementCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AchievementCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementCategoryFilter<$PrismaModel>
    _max?: NestedEnumAchievementCategoryFilter<$PrismaModel>
  }

  export type EnumAchievementRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel> | $Enums.AchievementRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementRarityFilter<$PrismaModel>
    _max?: NestedEnumAchievementRarityFilter<$PrismaModel>
  }

  export type AchievementScalarRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievementUserIdAchievementIdCompoundUniqueInput = {
    userId: string
    achievementId: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type EnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    category?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    category?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    category?: SortOrder
  }

  export type EnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type BadgeScalarRelationFilter = {
    is?: BadgeWhereInput
    isNot?: BadgeWhereInput
  }

  export type UserBadgeUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: string
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    level?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    level?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    level?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
  }

  export type UserBadgeSumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type EnumXPCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.XPCategory | EnumXPCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumXPCategoryFilter<$PrismaModel> | $Enums.XPCategory
  }

  export type XPTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    category?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type XPTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type XPTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type XPTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type XPTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumXPCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.XPCategory | EnumXPCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumXPCategoryWithAggregatesFilter<$PrismaModel> | $Enums.XPCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumXPCategoryFilter<$PrismaModel>
    _max?: NestedEnumXPCategoryFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type ProjectNullableScalarRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    version?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
    downloadCount?: SortOrder
    isConfidential?: SortOrder
    requiresApproval?: SortOrder
    approvalStatus?: SortOrder
    accessLevel?: SortOrder
    retentionPeriod?: SortOrder
    complianceFlags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    downloadCount?: SortOrder
    retentionPeriod?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    version?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
    downloadCount?: SortOrder
    isConfidential?: SortOrder
    requiresApproval?: SortOrder
    approvalStatus?: SortOrder
    accessLevel?: SortOrder
    retentionPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fileUrl?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    version?: SortOrder
    type?: SortOrder
    isPublic?: SortOrder
    downloadCount?: SortOrder
    isConfidential?: SortOrder
    requiresApproval?: SortOrder
    approvalStatus?: SortOrder
    accessLevel?: SortOrder
    retentionPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
    downloadCount?: SortOrder
    retentionPeriod?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
  }

  export type ActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    riskLevel?: SortOrder
    complianceFlag?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    riskLevel?: SortOrder
    complianceFlag?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    riskLevel?: SortOrder
    complianceFlag?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput> | PostCreateWithoutOrganizationInput[] | PostUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOrganizationInput | PostCreateOrConnectWithoutOrganizationInput[]
    createMany?: PostCreateManyOrganizationInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RFICreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput> | RFICreateWithoutOrganizationInput[] | RFIUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RFICreateOrConnectWithoutOrganizationInput | RFICreateOrConnectWithoutOrganizationInput[]
    createMany?: RFICreateManyOrganizationInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput> | PostCreateWithoutOrganizationInput[] | PostUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOrganizationInput | PostCreateOrConnectWithoutOrganizationInput[]
    createMany?: PostCreateManyOrganizationInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RFIUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput> | RFICreateWithoutOrganizationInput[] | RFIUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RFICreateOrConnectWithoutOrganizationInput | RFICreateOrConnectWithoutOrganizationInput[]
    createMany?: RFICreateManyOrganizationInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type PostUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput> | PostCreateWithoutOrganizationInput[] | PostUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOrganizationInput | PostCreateOrConnectWithoutOrganizationInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOrganizationInput | PostUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PostCreateManyOrganizationInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOrganizationInput | PostUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOrganizationInput | PostUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RFIUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput> | RFICreateWithoutOrganizationInput[] | RFIUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RFICreateOrConnectWithoutOrganizationInput | RFICreateOrConnectWithoutOrganizationInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutOrganizationInput | RFIUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RFICreateManyOrganizationInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutOrganizationInput | RFIUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutOrganizationInput | RFIUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput> | PostCreateWithoutOrganizationInput[] | PostUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOrganizationInput | PostCreateOrConnectWithoutOrganizationInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOrganizationInput | PostUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PostCreateManyOrganizationInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOrganizationInput | PostUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOrganizationInput | PostUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RFIUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput> | RFICreateWithoutOrganizationInput[] | RFIUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RFICreateOrConnectWithoutOrganizationInput | RFICreateOrConnectWithoutOrganizationInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutOrganizationInput | RFIUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RFICreateManyOrganizationInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutOrganizationInput | RFIUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutOrganizationInput | RFIUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type UserCreatecertificationsInput = {
    set: string[]
  }

  export type UserCreateskillsInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput> | TaskCreateWithoutCreatedByInput[] | TaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatedByInput | TaskCreateOrConnectWithoutCreatedByInput[]
    createMany?: TaskCreateManyCreatedByInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type PostCommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput> | PostCommentCreateWithoutAuthorInput[] | PostCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutAuthorInput | PostCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCommentCreateManyAuthorInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type PostShareCreateNestedManyWithoutUserInput = {
    create?: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput> | PostShareCreateWithoutUserInput[] | PostShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutUserInput | PostShareCreateOrConnectWithoutUserInput[]
    createMany?: PostShareCreateManyUserInputEnvelope
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
  }

  export type PostMentionCreateNestedManyWithoutMentionedUserInput = {
    create?: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput> | PostMentionCreateWithoutMentionedUserInput[] | PostMentionUncheckedCreateWithoutMentionedUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentionedUserInput | PostMentionCreateOrConnectWithoutMentionedUserInput[]
    createMany?: PostMentionCreateManyMentionedUserInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type PostMentionCreateNestedManyWithoutMentioningUserInput = {
    create?: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput> | PostMentionCreateWithoutMentioningUserInput[] | PostMentionUncheckedCreateWithoutMentioningUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentioningUserInput | PostMentionCreateOrConnectWithoutMentioningUserInput[]
    createMany?: PostMentionCreateManyMentioningUserInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type UserFollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput> | UserFollowCreateWithoutFollowerInput[] | UserFollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowerInput | UserFollowCreateOrConnectWithoutFollowerInput[]
    createMany?: UserFollowCreateManyFollowerInputEnvelope
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
  }

  export type UserFollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput> | UserFollowCreateWithoutFollowingInput[] | UserFollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowingInput | UserFollowCreateOrConnectWithoutFollowingInput[]
    createMany?: UserFollowCreateManyFollowingInputEnvelope
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
  }

  export type RFICreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput> | RFICreateWithoutSubmittedByInput[] | RFIUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: RFICreateOrConnectWithoutSubmittedByInput | RFICreateOrConnectWithoutSubmittedByInput[]
    createMany?: RFICreateManySubmittedByInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type RFICreateNestedManyWithoutAssignedToInput = {
    create?: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput> | RFICreateWithoutAssignedToInput[] | RFIUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: RFICreateOrConnectWithoutAssignedToInput | RFICreateOrConnectWithoutAssignedToInput[]
    createMany?: RFICreateManyAssignedToInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type XPTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput> | XPTransactionCreateWithoutUserInput[] | XPTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XPTransactionCreateOrConnectWithoutUserInput | XPTransactionCreateOrConnectWithoutUserInput[]
    createMany?: XPTransactionCreateManyUserInputEnvelope
    connect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
  }

  export type SafetyIncidentCreateNestedManyWithoutReporterInput = {
    create?: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput> | SafetyIncidentCreateWithoutReporterInput[] | SafetyIncidentUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutReporterInput | SafetyIncidentCreateOrConnectWithoutReporterInput[]
    createMany?: SafetyIncidentCreateManyReporterInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type SafetyIncidentCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput> | SafetyIncidentCreateWithoutAssignedToInput[] | SafetyIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutAssignedToInput | SafetyIncidentCreateOrConnectWithoutAssignedToInput[]
    createMany?: SafetyIncidentCreateManyAssignedToInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type PostResolutionCreateNestedManyWithoutVerifierInput = {
    create?: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput> | PostResolutionCreateWithoutVerifierInput[] | PostResolutionUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: PostResolutionCreateOrConnectWithoutVerifierInput | PostResolutionCreateOrConnectWithoutVerifierInput[]
    createMany?: PostResolutionCreateManyVerifierInputEnvelope
    connect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
  }

  export type ApprovalCreateNestedManyWithoutApproverInput = {
    create?: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput> | ApprovalCreateWithoutApproverInput[] | ApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutApproverInput | ApprovalCreateOrConnectWithoutApproverInput[]
    createMany?: ApprovalCreateManyApproverInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type ApprovalCreateNestedManyWithoutRequesterInput = {
    create?: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput> | ApprovalCreateWithoutRequesterInput[] | ApprovalUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutRequesterInput | ApprovalCreateOrConnectWithoutRequesterInput[]
    createMany?: ApprovalCreateManyRequesterInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput> | TaskCreateWithoutCreatedByInput[] | TaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatedByInput | TaskCreateOrConnectWithoutCreatedByInput[]
    createMany?: TaskCreateManyCreatedByInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type PostCommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput> | PostCommentCreateWithoutAuthorInput[] | PostCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutAuthorInput | PostCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCommentCreateManyAuthorInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type PostShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput> | PostShareCreateWithoutUserInput[] | PostShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutUserInput | PostShareCreateOrConnectWithoutUserInput[]
    createMany?: PostShareCreateManyUserInputEnvelope
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
  }

  export type PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput = {
    create?: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput> | PostMentionCreateWithoutMentionedUserInput[] | PostMentionUncheckedCreateWithoutMentionedUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentionedUserInput | PostMentionCreateOrConnectWithoutMentionedUserInput[]
    createMany?: PostMentionCreateManyMentionedUserInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput = {
    create?: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput> | PostMentionCreateWithoutMentioningUserInput[] | PostMentionUncheckedCreateWithoutMentioningUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentioningUserInput | PostMentionCreateOrConnectWithoutMentioningUserInput[]
    createMany?: PostMentionCreateManyMentioningUserInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type UserFollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput> | UserFollowCreateWithoutFollowerInput[] | UserFollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowerInput | UserFollowCreateOrConnectWithoutFollowerInput[]
    createMany?: UserFollowCreateManyFollowerInputEnvelope
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
  }

  export type UserFollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput> | UserFollowCreateWithoutFollowingInput[] | UserFollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowingInput | UserFollowCreateOrConnectWithoutFollowingInput[]
    createMany?: UserFollowCreateManyFollowingInputEnvelope
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
  }

  export type RFIUncheckedCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput> | RFICreateWithoutSubmittedByInput[] | RFIUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: RFICreateOrConnectWithoutSubmittedByInput | RFICreateOrConnectWithoutSubmittedByInput[]
    createMany?: RFICreateManySubmittedByInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type RFIUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput> | RFICreateWithoutAssignedToInput[] | RFIUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: RFICreateOrConnectWithoutAssignedToInput | RFICreateOrConnectWithoutAssignedToInput[]
    createMany?: RFICreateManyAssignedToInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type XPTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput> | XPTransactionCreateWithoutUserInput[] | XPTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XPTransactionCreateOrConnectWithoutUserInput | XPTransactionCreateOrConnectWithoutUserInput[]
    createMany?: XPTransactionCreateManyUserInputEnvelope
    connect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
  }

  export type SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput> | SafetyIncidentCreateWithoutReporterInput[] | SafetyIncidentUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutReporterInput | SafetyIncidentCreateOrConnectWithoutReporterInput[]
    createMany?: SafetyIncidentCreateManyReporterInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput> | SafetyIncidentCreateWithoutAssignedToInput[] | SafetyIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutAssignedToInput | SafetyIncidentCreateOrConnectWithoutAssignedToInput[]
    createMany?: SafetyIncidentCreateManyAssignedToInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type PostResolutionUncheckedCreateNestedManyWithoutVerifierInput = {
    create?: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput> | PostResolutionCreateWithoutVerifierInput[] | PostResolutionUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: PostResolutionCreateOrConnectWithoutVerifierInput | PostResolutionCreateOrConnectWithoutVerifierInput[]
    createMany?: PostResolutionCreateManyVerifierInputEnvelope
    connect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput> | ApprovalCreateWithoutApproverInput[] | ApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutApproverInput | ApprovalCreateOrConnectWithoutApproverInput[]
    createMany?: ApprovalCreateManyApproverInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput> | ApprovalCreateWithoutRequesterInput[] | ApprovalUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutRequesterInput | ApprovalCreateOrConnectWithoutRequesterInput[]
    createMany?: ApprovalCreateManyRequesterInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdatecertificationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateskillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput> | TaskCreateWithoutCreatedByInput[] | TaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatedByInput | TaskCreateOrConnectWithoutCreatedByInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatedByInput | TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TaskCreateManyCreatedByInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatedByInput | TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatedByInput | TaskUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type PostCommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput> | PostCommentCreateWithoutAuthorInput[] | PostCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutAuthorInput | PostCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutAuthorInput | PostCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCommentCreateManyAuthorInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutAuthorInput | PostCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutAuthorInput | PostCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type PostShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput> | PostShareCreateWithoutUserInput[] | PostShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutUserInput | PostShareCreateOrConnectWithoutUserInput[]
    upsert?: PostShareUpsertWithWhereUniqueWithoutUserInput | PostShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostShareCreateManyUserInputEnvelope
    set?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    disconnect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    delete?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    update?: PostShareUpdateWithWhereUniqueWithoutUserInput | PostShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostShareUpdateManyWithWhereWithoutUserInput | PostShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
  }

  export type PostMentionUpdateManyWithoutMentionedUserNestedInput = {
    create?: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput> | PostMentionCreateWithoutMentionedUserInput[] | PostMentionUncheckedCreateWithoutMentionedUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentionedUserInput | PostMentionCreateOrConnectWithoutMentionedUserInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutMentionedUserInput | PostMentionUpsertWithWhereUniqueWithoutMentionedUserInput[]
    createMany?: PostMentionCreateManyMentionedUserInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutMentionedUserInput | PostMentionUpdateWithWhereUniqueWithoutMentionedUserInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutMentionedUserInput | PostMentionUpdateManyWithWhereWithoutMentionedUserInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type PostMentionUpdateManyWithoutMentioningUserNestedInput = {
    create?: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput> | PostMentionCreateWithoutMentioningUserInput[] | PostMentionUncheckedCreateWithoutMentioningUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentioningUserInput | PostMentionCreateOrConnectWithoutMentioningUserInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutMentioningUserInput | PostMentionUpsertWithWhereUniqueWithoutMentioningUserInput[]
    createMany?: PostMentionCreateManyMentioningUserInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutMentioningUserInput | PostMentionUpdateWithWhereUniqueWithoutMentioningUserInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutMentioningUserInput | PostMentionUpdateManyWithWhereWithoutMentioningUserInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type UserFollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput> | UserFollowCreateWithoutFollowerInput[] | UserFollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowerInput | UserFollowCreateOrConnectWithoutFollowerInput[]
    upsert?: UserFollowUpsertWithWhereUniqueWithoutFollowerInput | UserFollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: UserFollowCreateManyFollowerInputEnvelope
    set?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    disconnect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    delete?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    update?: UserFollowUpdateWithWhereUniqueWithoutFollowerInput | UserFollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: UserFollowUpdateManyWithWhereWithoutFollowerInput | UserFollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
  }

  export type UserFollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput> | UserFollowCreateWithoutFollowingInput[] | UserFollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowingInput | UserFollowCreateOrConnectWithoutFollowingInput[]
    upsert?: UserFollowUpsertWithWhereUniqueWithoutFollowingInput | UserFollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: UserFollowCreateManyFollowingInputEnvelope
    set?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    disconnect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    delete?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    update?: UserFollowUpdateWithWhereUniqueWithoutFollowingInput | UserFollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserFollowUpdateManyWithWhereWithoutFollowingInput | UserFollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
  }

  export type RFIUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput> | RFICreateWithoutSubmittedByInput[] | RFIUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: RFICreateOrConnectWithoutSubmittedByInput | RFICreateOrConnectWithoutSubmittedByInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutSubmittedByInput | RFIUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: RFICreateManySubmittedByInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutSubmittedByInput | RFIUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutSubmittedByInput | RFIUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type RFIUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput> | RFICreateWithoutAssignedToInput[] | RFIUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: RFICreateOrConnectWithoutAssignedToInput | RFICreateOrConnectWithoutAssignedToInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutAssignedToInput | RFIUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: RFICreateManyAssignedToInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutAssignedToInput | RFIUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutAssignedToInput | RFIUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type XPTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput> | XPTransactionCreateWithoutUserInput[] | XPTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XPTransactionCreateOrConnectWithoutUserInput | XPTransactionCreateOrConnectWithoutUserInput[]
    upsert?: XPTransactionUpsertWithWhereUniqueWithoutUserInput | XPTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XPTransactionCreateManyUserInputEnvelope
    set?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    disconnect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    delete?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    connect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    update?: XPTransactionUpdateWithWhereUniqueWithoutUserInput | XPTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XPTransactionUpdateManyWithWhereWithoutUserInput | XPTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XPTransactionScalarWhereInput | XPTransactionScalarWhereInput[]
  }

  export type SafetyIncidentUpdateManyWithoutReporterNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput> | SafetyIncidentCreateWithoutReporterInput[] | SafetyIncidentUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutReporterInput | SafetyIncidentCreateOrConnectWithoutReporterInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutReporterInput | SafetyIncidentUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: SafetyIncidentCreateManyReporterInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutReporterInput | SafetyIncidentUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutReporterInput | SafetyIncidentUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type SafetyIncidentUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput> | SafetyIncidentCreateWithoutAssignedToInput[] | SafetyIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutAssignedToInput | SafetyIncidentCreateOrConnectWithoutAssignedToInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutAssignedToInput | SafetyIncidentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: SafetyIncidentCreateManyAssignedToInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutAssignedToInput | SafetyIncidentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutAssignedToInput | SafetyIncidentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type PostResolutionUpdateManyWithoutVerifierNestedInput = {
    create?: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput> | PostResolutionCreateWithoutVerifierInput[] | PostResolutionUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: PostResolutionCreateOrConnectWithoutVerifierInput | PostResolutionCreateOrConnectWithoutVerifierInput[]
    upsert?: PostResolutionUpsertWithWhereUniqueWithoutVerifierInput | PostResolutionUpsertWithWhereUniqueWithoutVerifierInput[]
    createMany?: PostResolutionCreateManyVerifierInputEnvelope
    set?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    disconnect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    delete?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    connect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    update?: PostResolutionUpdateWithWhereUniqueWithoutVerifierInput | PostResolutionUpdateWithWhereUniqueWithoutVerifierInput[]
    updateMany?: PostResolutionUpdateManyWithWhereWithoutVerifierInput | PostResolutionUpdateManyWithWhereWithoutVerifierInput[]
    deleteMany?: PostResolutionScalarWhereInput | PostResolutionScalarWhereInput[]
  }

  export type ApprovalUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput> | ApprovalCreateWithoutApproverInput[] | ApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutApproverInput | ApprovalCreateOrConnectWithoutApproverInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutApproverInput | ApprovalUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ApprovalCreateManyApproverInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutApproverInput | ApprovalUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutApproverInput | ApprovalUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ApprovalUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput> | ApprovalCreateWithoutRequesterInput[] | ApprovalUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutRequesterInput | ApprovalCreateOrConnectWithoutRequesterInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutRequesterInput | ApprovalUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: ApprovalCreateManyRequesterInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutRequesterInput | ApprovalUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutRequesterInput | ApprovalUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput> | TaskCreateWithoutCreatedByInput[] | TaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatedByInput | TaskCreateOrConnectWithoutCreatedByInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatedByInput | TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TaskCreateManyCreatedByInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatedByInput | TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatedByInput | TaskUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type PostCommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput> | PostCommentCreateWithoutAuthorInput[] | PostCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutAuthorInput | PostCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutAuthorInput | PostCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCommentCreateManyAuthorInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutAuthorInput | PostCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutAuthorInput | PostCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type PostShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput> | PostShareCreateWithoutUserInput[] | PostShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutUserInput | PostShareCreateOrConnectWithoutUserInput[]
    upsert?: PostShareUpsertWithWhereUniqueWithoutUserInput | PostShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostShareCreateManyUserInputEnvelope
    set?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    disconnect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    delete?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    update?: PostShareUpdateWithWhereUniqueWithoutUserInput | PostShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostShareUpdateManyWithWhereWithoutUserInput | PostShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
  }

  export type PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput = {
    create?: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput> | PostMentionCreateWithoutMentionedUserInput[] | PostMentionUncheckedCreateWithoutMentionedUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentionedUserInput | PostMentionCreateOrConnectWithoutMentionedUserInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutMentionedUserInput | PostMentionUpsertWithWhereUniqueWithoutMentionedUserInput[]
    createMany?: PostMentionCreateManyMentionedUserInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutMentionedUserInput | PostMentionUpdateWithWhereUniqueWithoutMentionedUserInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutMentionedUserInput | PostMentionUpdateManyWithWhereWithoutMentionedUserInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput = {
    create?: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput> | PostMentionCreateWithoutMentioningUserInput[] | PostMentionUncheckedCreateWithoutMentioningUserInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutMentioningUserInput | PostMentionCreateOrConnectWithoutMentioningUserInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutMentioningUserInput | PostMentionUpsertWithWhereUniqueWithoutMentioningUserInput[]
    createMany?: PostMentionCreateManyMentioningUserInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutMentioningUserInput | PostMentionUpdateWithWhereUniqueWithoutMentioningUserInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutMentioningUserInput | PostMentionUpdateManyWithWhereWithoutMentioningUserInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type UserFollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput> | UserFollowCreateWithoutFollowerInput[] | UserFollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowerInput | UserFollowCreateOrConnectWithoutFollowerInput[]
    upsert?: UserFollowUpsertWithWhereUniqueWithoutFollowerInput | UserFollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: UserFollowCreateManyFollowerInputEnvelope
    set?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    disconnect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    delete?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    update?: UserFollowUpdateWithWhereUniqueWithoutFollowerInput | UserFollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: UserFollowUpdateManyWithWhereWithoutFollowerInput | UserFollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
  }

  export type UserFollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput> | UserFollowCreateWithoutFollowingInput[] | UserFollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserFollowCreateOrConnectWithoutFollowingInput | UserFollowCreateOrConnectWithoutFollowingInput[]
    upsert?: UserFollowUpsertWithWhereUniqueWithoutFollowingInput | UserFollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: UserFollowCreateManyFollowingInputEnvelope
    set?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    disconnect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    delete?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    connect?: UserFollowWhereUniqueInput | UserFollowWhereUniqueInput[]
    update?: UserFollowUpdateWithWhereUniqueWithoutFollowingInput | UserFollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserFollowUpdateManyWithWhereWithoutFollowingInput | UserFollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
  }

  export type RFIUncheckedUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput> | RFICreateWithoutSubmittedByInput[] | RFIUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: RFICreateOrConnectWithoutSubmittedByInput | RFICreateOrConnectWithoutSubmittedByInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutSubmittedByInput | RFIUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: RFICreateManySubmittedByInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutSubmittedByInput | RFIUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutSubmittedByInput | RFIUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type RFIUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput> | RFICreateWithoutAssignedToInput[] | RFIUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: RFICreateOrConnectWithoutAssignedToInput | RFICreateOrConnectWithoutAssignedToInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutAssignedToInput | RFIUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: RFICreateManyAssignedToInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutAssignedToInput | RFIUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutAssignedToInput | RFIUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type XPTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput> | XPTransactionCreateWithoutUserInput[] | XPTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XPTransactionCreateOrConnectWithoutUserInput | XPTransactionCreateOrConnectWithoutUserInput[]
    upsert?: XPTransactionUpsertWithWhereUniqueWithoutUserInput | XPTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XPTransactionCreateManyUserInputEnvelope
    set?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    disconnect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    delete?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    connect?: XPTransactionWhereUniqueInput | XPTransactionWhereUniqueInput[]
    update?: XPTransactionUpdateWithWhereUniqueWithoutUserInput | XPTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XPTransactionUpdateManyWithWhereWithoutUserInput | XPTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XPTransactionScalarWhereInput | XPTransactionScalarWhereInput[]
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput> | SafetyIncidentCreateWithoutReporterInput[] | SafetyIncidentUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutReporterInput | SafetyIncidentCreateOrConnectWithoutReporterInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutReporterInput | SafetyIncidentUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: SafetyIncidentCreateManyReporterInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutReporterInput | SafetyIncidentUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutReporterInput | SafetyIncidentUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput> | SafetyIncidentCreateWithoutAssignedToInput[] | SafetyIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutAssignedToInput | SafetyIncidentCreateOrConnectWithoutAssignedToInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutAssignedToInput | SafetyIncidentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: SafetyIncidentCreateManyAssignedToInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutAssignedToInput | SafetyIncidentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutAssignedToInput | SafetyIncidentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput = {
    create?: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput> | PostResolutionCreateWithoutVerifierInput[] | PostResolutionUncheckedCreateWithoutVerifierInput[]
    connectOrCreate?: PostResolutionCreateOrConnectWithoutVerifierInput | PostResolutionCreateOrConnectWithoutVerifierInput[]
    upsert?: PostResolutionUpsertWithWhereUniqueWithoutVerifierInput | PostResolutionUpsertWithWhereUniqueWithoutVerifierInput[]
    createMany?: PostResolutionCreateManyVerifierInputEnvelope
    set?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    disconnect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    delete?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    connect?: PostResolutionWhereUniqueInput | PostResolutionWhereUniqueInput[]
    update?: PostResolutionUpdateWithWhereUniqueWithoutVerifierInput | PostResolutionUpdateWithWhereUniqueWithoutVerifierInput[]
    updateMany?: PostResolutionUpdateManyWithWhereWithoutVerifierInput | PostResolutionUpdateManyWithWhereWithoutVerifierInput[]
    deleteMany?: PostResolutionScalarWhereInput | PostResolutionScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput> | ApprovalCreateWithoutApproverInput[] | ApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutApproverInput | ApprovalCreateOrConnectWithoutApproverInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutApproverInput | ApprovalUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ApprovalCreateManyApproverInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutApproverInput | ApprovalUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutApproverInput | ApprovalUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput> | ApprovalCreateWithoutRequesterInput[] | ApprovalUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutRequesterInput | ApprovalCreateOrConnectWithoutRequesterInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutRequesterInput | ApprovalUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: ApprovalCreateManyRequesterInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutRequesterInput | ApprovalUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutRequesterInput | ApprovalUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ProjectCreateregulatoryReqsInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutProjectsInput = {
    create?: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ProjectPhaseCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput> | ProjectPhaseCreateWithoutProjectInput[] | ProjectPhaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutProjectInput | ProjectPhaseCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectPhaseCreateManyProjectInputEnvelope
    connect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutProjectInput = {
    create?: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput> | ActivityLogCreateWithoutProjectInput[] | ActivityLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutProjectInput | ActivityLogCreateOrConnectWithoutProjectInput[]
    createMany?: ActivityLogCreateManyProjectInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutProjectInput = {
    create?: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput> | PostCreateWithoutProjectInput[] | PostUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProjectInput | PostCreateOrConnectWithoutProjectInput[]
    createMany?: PostCreateManyProjectInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RFICreateNestedManyWithoutProjectInput = {
    create?: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput> | RFICreateWithoutProjectInput[] | RFIUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RFICreateOrConnectWithoutProjectInput | RFICreateOrConnectWithoutProjectInput[]
    createMany?: RFICreateManyProjectInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type SafetyIncidentCreateNestedManyWithoutProjectInput = {
    create?: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput> | SafetyIncidentCreateWithoutProjectInput[] | SafetyIncidentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutProjectInput | SafetyIncidentCreateOrConnectWithoutProjectInput[]
    createMany?: SafetyIncidentCreateManyProjectInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type ApprovalCreateNestedManyWithoutProjectInput = {
    create?: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput> | ApprovalCreateWithoutProjectInput[] | ApprovalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProjectInput | ApprovalCreateOrConnectWithoutProjectInput[]
    createMany?: ApprovalCreateManyProjectInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput> | ProjectPhaseCreateWithoutProjectInput[] | ProjectPhaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutProjectInput | ProjectPhaseCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectPhaseCreateManyProjectInputEnvelope
    connect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput> | ActivityLogCreateWithoutProjectInput[] | ActivityLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutProjectInput | ActivityLogCreateOrConnectWithoutProjectInput[]
    createMany?: ActivityLogCreateManyProjectInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput> | PostCreateWithoutProjectInput[] | PostUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProjectInput | PostCreateOrConnectWithoutProjectInput[]
    createMany?: PostCreateManyProjectInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RFIUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput> | RFICreateWithoutProjectInput[] | RFIUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RFICreateOrConnectWithoutProjectInput | RFICreateOrConnectWithoutProjectInput[]
    createMany?: RFICreateManyProjectInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput> | SafetyIncidentCreateWithoutProjectInput[] | SafetyIncidentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutProjectInput | SafetyIncidentCreateOrConnectWithoutProjectInput[]
    createMany?: SafetyIncidentCreateManyProjectInputEnvelope
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput> | ApprovalCreateWithoutProjectInput[] | ApprovalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProjectInput | ApprovalCreateOrConnectWithoutProjectInput[]
    createMany?: ApprovalCreateManyProjectInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateregulatoryReqsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumComplianceStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplianceStatus
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type OrganizationUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectsInput
    upsert?: OrganizationUpsertWithoutProjectsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutProjectsInput, OrganizationUpdateWithoutProjectsInput>, OrganizationUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectPhaseUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput> | ProjectPhaseCreateWithoutProjectInput[] | ProjectPhaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutProjectInput | ProjectPhaseCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectPhaseUpsertWithWhereUniqueWithoutProjectInput | ProjectPhaseUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectPhaseCreateManyProjectInputEnvelope
    set?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    disconnect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    delete?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    connect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    update?: ProjectPhaseUpdateWithWhereUniqueWithoutProjectInput | ProjectPhaseUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectPhaseUpdateManyWithWhereWithoutProjectInput | ProjectPhaseUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectPhaseScalarWhereInput | ProjectPhaseScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectMemberUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProjectInput | DocumentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProjectInput | DocumentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProjectInput | DocumentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput> | ActivityLogCreateWithoutProjectInput[] | ActivityLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutProjectInput | ActivityLogCreateOrConnectWithoutProjectInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutProjectInput | ActivityLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ActivityLogCreateManyProjectInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutProjectInput | ActivityLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutProjectInput | ActivityLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PostUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput> | PostCreateWithoutProjectInput[] | PostUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProjectInput | PostCreateOrConnectWithoutProjectInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutProjectInput | PostUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PostCreateManyProjectInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutProjectInput | PostUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PostUpdateManyWithWhereWithoutProjectInput | PostUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RFIUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput> | RFICreateWithoutProjectInput[] | RFIUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RFICreateOrConnectWithoutProjectInput | RFICreateOrConnectWithoutProjectInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutProjectInput | RFIUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RFICreateManyProjectInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutProjectInput | RFIUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutProjectInput | RFIUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type SafetyIncidentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput> | SafetyIncidentCreateWithoutProjectInput[] | SafetyIncidentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutProjectInput | SafetyIncidentCreateOrConnectWithoutProjectInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutProjectInput | SafetyIncidentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SafetyIncidentCreateManyProjectInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutProjectInput | SafetyIncidentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutProjectInput | SafetyIncidentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type ApprovalUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput> | ApprovalCreateWithoutProjectInput[] | ApprovalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProjectInput | ApprovalCreateOrConnectWithoutProjectInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutProjectInput | ApprovalUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ApprovalCreateManyProjectInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutProjectInput | ApprovalUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutProjectInput | ApprovalUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput> | ProjectPhaseCreateWithoutProjectInput[] | ProjectPhaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutProjectInput | ProjectPhaseCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectPhaseUpsertWithWhereUniqueWithoutProjectInput | ProjectPhaseUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectPhaseCreateManyProjectInputEnvelope
    set?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    disconnect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    delete?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    connect?: ProjectPhaseWhereUniqueInput | ProjectPhaseWhereUniqueInput[]
    update?: ProjectPhaseUpdateWithWhereUniqueWithoutProjectInput | ProjectPhaseUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectPhaseUpdateManyWithWhereWithoutProjectInput | ProjectPhaseUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectPhaseScalarWhereInput | ProjectPhaseScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProjectInput | DocumentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProjectInput | DocumentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProjectInput | DocumentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput> | ActivityLogCreateWithoutProjectInput[] | ActivityLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutProjectInput | ActivityLogCreateOrConnectWithoutProjectInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutProjectInput | ActivityLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ActivityLogCreateManyProjectInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutProjectInput | ActivityLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutProjectInput | ActivityLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput> | PostCreateWithoutProjectInput[] | PostUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProjectInput | PostCreateOrConnectWithoutProjectInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutProjectInput | PostUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PostCreateManyProjectInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutProjectInput | PostUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PostUpdateManyWithWhereWithoutProjectInput | PostUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RFIUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput> | RFICreateWithoutProjectInput[] | RFIUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RFICreateOrConnectWithoutProjectInput | RFICreateOrConnectWithoutProjectInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutProjectInput | RFIUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RFICreateManyProjectInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutProjectInput | RFIUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutProjectInput | RFIUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput> | SafetyIncidentCreateWithoutProjectInput[] | SafetyIncidentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutProjectInput | SafetyIncidentCreateOrConnectWithoutProjectInput[]
    upsert?: SafetyIncidentUpsertWithWhereUniqueWithoutProjectInput | SafetyIncidentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SafetyIncidentCreateManyProjectInputEnvelope
    set?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    disconnect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    delete?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    connect?: SafetyIncidentWhereUniqueInput | SafetyIncidentWhereUniqueInput[]
    update?: SafetyIncidentUpdateWithWhereUniqueWithoutProjectInput | SafetyIncidentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SafetyIncidentUpdateManyWithWhereWithoutProjectInput | SafetyIncidentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput> | ApprovalCreateWithoutProjectInput[] | ApprovalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProjectInput | ApprovalCreateOrConnectWithoutProjectInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutProjectInput | ApprovalUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ApprovalCreateManyProjectInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutProjectInput | ApprovalUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutProjectInput | ApprovalUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ProjectPhaseCreatedependenciesInput = {
    set: string[]
  }

  export type ProjectCreateNestedOneWithoutPhasesInput = {
    create?: XOR<ProjectCreateWithoutPhasesInput, ProjectUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPhasesInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutPhaseInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutPhaseInput = {
    create?: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput> | PostCreateWithoutPhaseInput[] | PostUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPhaseInput | PostCreateOrConnectWithoutPhaseInput[]
    createMany?: PostCreateManyPhaseInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutPhaseInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutPhaseInput = {
    create?: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput> | PostCreateWithoutPhaseInput[] | PostUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPhaseInput | PostCreateOrConnectWithoutPhaseInput[]
    createMany?: PostCreateManyPhaseInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type EnumPhaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.PhaseStatus
  }

  export type ProjectPhaseUpdatedependenciesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProjectUpdateOneRequiredWithoutPhasesNestedInput = {
    create?: XOR<ProjectCreateWithoutPhasesInput, ProjectUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPhasesInput
    upsert?: ProjectUpsertWithoutPhasesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutPhasesInput, ProjectUpdateWithoutPhasesInput>, ProjectUncheckedUpdateWithoutPhasesInput>
  }

  export type TaskUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutPhaseInput | TaskUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutPhaseInput | TaskUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutPhaseInput | TaskUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type PostUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput> | PostCreateWithoutPhaseInput[] | PostUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPhaseInput | PostCreateOrConnectWithoutPhaseInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutPhaseInput | PostUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: PostCreateManyPhaseInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutPhaseInput | PostUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: PostUpdateManyWithWhereWithoutPhaseInput | PostUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutPhaseInput | TaskUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutPhaseInput | TaskUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutPhaseInput | TaskUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput> | PostCreateWithoutPhaseInput[] | PostUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPhaseInput | PostCreateOrConnectWithoutPhaseInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutPhaseInput | PostUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: PostCreateManyPhaseInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutPhaseInput | PostUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: PostUpdateManyWithWhereWithoutPhaseInput | PostUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectMembersInput = {
    create?: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectMembersInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutMembersInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumProjectRoleFieldUpdateOperationsInput = {
    set?: $Enums.ProjectRole
  }

  export type EnumAccessLevelFieldUpdateOperationsInput = {
    set?: $Enums.AccessLevel
  }

  export type UserUpdateOneRequiredWithoutProjectMembersNestedInput = {
    create?: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectMembersInput
    upsert?: UserUpsertWithoutProjectMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectMembersInput, UserUpdateWithoutProjectMembersInput>, UserUncheckedUpdateWithoutProjectMembersInput>
  }

  export type ProjectUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    upsert?: ProjectUpsertWithoutMembersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMembersInput, ProjectUpdateWithoutMembersInput>, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type TaskCreatetagsInput = {
    set: string[]
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectPhaseCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectPhaseCreateWithoutTasksInput, ProjectPhaseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutTasksInput
    connect?: ProjectPhaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTasksInput = {
    create?: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutSubtasksInput = {
    create?: XOR<TaskCreateWithoutSubtasksInput, TaskUncheckedCreateWithoutSubtasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubtasksInput
    connect?: TaskWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutParentTaskInput = {
    create?: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput> | TaskCreateWithoutParentTaskInput[] | TaskUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutParentTaskInput | TaskCreateOrConnectWithoutParentTaskInput[]
    createMany?: TaskCreateManyParentTaskInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutTaskInput = {
    create?: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput> | DocumentCreateWithoutTaskInput[] | DocumentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTaskInput | DocumentCreateOrConnectWithoutTaskInput[]
    createMany?: DocumentCreateManyTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutTaskInput = {
    create?: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput> | PostCreateWithoutTaskInput[] | PostUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTaskInput | PostCreateOrConnectWithoutTaskInput[]
    createMany?: PostCreateManyTaskInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutParentTaskInput = {
    create?: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput> | TaskCreateWithoutParentTaskInput[] | TaskUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutParentTaskInput | TaskCreateOrConnectWithoutParentTaskInput[]
    createMany?: TaskCreateManyParentTaskInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput> | DocumentCreateWithoutTaskInput[] | DocumentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTaskInput | DocumentCreateOrConnectWithoutTaskInput[]
    createMany?: DocumentCreateManyTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput> | PostCreateWithoutTaskInput[] | PostUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTaskInput | PostCreateOrConnectWithoutTaskInput[]
    createMany?: PostCreateManyTaskInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type EnumTaskPriorityFieldUpdateOperationsInput = {
    set?: $Enums.TaskPriority
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TaskUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectPhaseUpdateOneWithoutTasksNestedInput = {
    create?: XOR<ProjectPhaseCreateWithoutTasksInput, ProjectPhaseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutTasksInput
    upsert?: ProjectPhaseUpsertWithoutTasksInput
    disconnect?: ProjectPhaseWhereInput | boolean
    delete?: ProjectPhaseWhereInput | boolean
    connect?: ProjectPhaseWhereUniqueInput
    update?: XOR<XOR<ProjectPhaseUpdateToOneWithWhereWithoutTasksInput, ProjectPhaseUpdateWithoutTasksInput>, ProjectPhaseUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTasksNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput
    upsert?: UserUpsertWithoutCreatedTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTasksInput, UserUpdateWithoutCreatedTasksInput>, UserUncheckedUpdateWithoutCreatedTasksInput>
  }

  export type TaskUpdateOneWithoutSubtasksNestedInput = {
    create?: XOR<TaskCreateWithoutSubtasksInput, TaskUncheckedCreateWithoutSubtasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubtasksInput
    upsert?: TaskUpsertWithoutSubtasksInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutSubtasksInput, TaskUpdateWithoutSubtasksInput>, TaskUncheckedUpdateWithoutSubtasksInput>
  }

  export type TaskUpdateManyWithoutParentTaskNestedInput = {
    create?: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput> | TaskCreateWithoutParentTaskInput[] | TaskUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutParentTaskInput | TaskCreateOrConnectWithoutParentTaskInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutParentTaskInput | TaskUpsertWithWhereUniqueWithoutParentTaskInput[]
    createMany?: TaskCreateManyParentTaskInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutParentTaskInput | TaskUpdateWithWhereUniqueWithoutParentTaskInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutParentTaskInput | TaskUpdateManyWithWhereWithoutParentTaskInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput> | DocumentCreateWithoutTaskInput[] | DocumentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTaskInput | DocumentCreateOrConnectWithoutTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTaskInput | DocumentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: DocumentCreateManyTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTaskInput | DocumentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTaskInput | DocumentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type PostUpdateManyWithoutTaskNestedInput = {
    create?: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput> | PostCreateWithoutTaskInput[] | PostUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTaskInput | PostCreateOrConnectWithoutTaskInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutTaskInput | PostUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: PostCreateManyTaskInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutTaskInput | PostUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: PostUpdateManyWithWhereWithoutTaskInput | PostUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutParentTaskNestedInput = {
    create?: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput> | TaskCreateWithoutParentTaskInput[] | TaskUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutParentTaskInput | TaskCreateOrConnectWithoutParentTaskInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutParentTaskInput | TaskUpsertWithWhereUniqueWithoutParentTaskInput[]
    createMany?: TaskCreateManyParentTaskInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutParentTaskInput | TaskUpdateWithWhereUniqueWithoutParentTaskInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutParentTaskInput | TaskUpdateManyWithWhereWithoutParentTaskInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput> | DocumentCreateWithoutTaskInput[] | DocumentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTaskInput | DocumentCreateOrConnectWithoutTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTaskInput | DocumentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: DocumentCreateManyTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTaskInput | DocumentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTaskInput | DocumentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput> | PostCreateWithoutTaskInput[] | PostUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTaskInput | PostCreateOrConnectWithoutTaskInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutTaskInput | PostUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: PostCreateManyTaskInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutTaskInput | PostUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: PostUpdateManyWithWhereWithoutTaskInput | PostUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutPostsInput = {
    create?: XOR<OrganizationCreateWithoutPostsInput, OrganizationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPostsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutPostsInput = {
    create?: XOR<ProjectCreateWithoutPostsInput, ProjectUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPostsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectPhaseCreateNestedOneWithoutPostsInput = {
    create?: XOR<ProjectPhaseCreateWithoutPostsInput, ProjectPhaseUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutPostsInput
    connect?: ProjectPhaseWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutPostsInput = {
    create?: XOR<TaskCreateWithoutPostsInput, TaskUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutPostsInput
    connect?: TaskWhereUniqueInput
  }

  export type PostAttachmentCreateNestedManyWithoutPostInput = {
    create?: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput> | PostAttachmentCreateWithoutPostInput[] | PostAttachmentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutPostInput | PostAttachmentCreateOrConnectWithoutPostInput[]
    createMany?: PostAttachmentCreateManyPostInputEnvelope
    connect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
  }

  export type PostMarkupCreateNestedManyWithoutPostInput = {
    create?: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput> | PostMarkupCreateWithoutPostInput[] | PostMarkupUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutPostInput | PostMarkupCreateOrConnectWithoutPostInput[]
    createMany?: PostMarkupCreateManyPostInputEnvelope
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
  }

  export type PostBimElementCreateNestedManyWithoutPostInput = {
    create?: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput> | PostBimElementCreateWithoutPostInput[] | PostBimElementUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostBimElementCreateOrConnectWithoutPostInput | PostBimElementCreateOrConnectWithoutPostInput[]
    createMany?: PostBimElementCreateManyPostInputEnvelope
    connect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
  }

  export type PostLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type PostCommentCreateNestedManyWithoutPostInput = {
    create?: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput> | PostCommentCreateWithoutPostInput[] | PostCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutPostInput | PostCommentCreateOrConnectWithoutPostInput[]
    createMany?: PostCommentCreateManyPostInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type PostShareCreateNestedManyWithoutPostInput = {
    create?: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput> | PostShareCreateWithoutPostInput[] | PostShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutPostInput | PostShareCreateOrConnectWithoutPostInput[]
    createMany?: PostShareCreateManyPostInputEnvelope
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
  }

  export type PostMentionCreateNestedManyWithoutPostInput = {
    create?: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput> | PostMentionCreateWithoutPostInput[] | PostMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutPostInput | PostMentionCreateOrConnectWithoutPostInput[]
    createMany?: PostMentionCreateManyPostInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type PostHashtagCreateNestedManyWithoutPostInput = {
    create?: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput> | PostHashtagCreateWithoutPostInput[] | PostHashtagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostHashtagCreateOrConnectWithoutPostInput | PostHashtagCreateOrConnectWithoutPostInput[]
    createMany?: PostHashtagCreateManyPostInputEnvelope
    connect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
  }

  export type RFICreateNestedManyWithoutPostInput = {
    create?: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput> | RFICreateWithoutPostInput[] | RFIUncheckedCreateWithoutPostInput[]
    connectOrCreate?: RFICreateOrConnectWithoutPostInput | RFICreateOrConnectWithoutPostInput[]
    createMany?: RFICreateManyPostInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type SafetyIncidentCreateNestedOneWithoutPostInput = {
    create?: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutPostInput
    connect?: SafetyIncidentWhereUniqueInput
  }

  export type PostResolutionCreateNestedOneWithoutPostsInput = {
    create?: XOR<PostResolutionCreateWithoutPostsInput, PostResolutionUncheckedCreateWithoutPostsInput>
    connectOrCreate?: PostResolutionCreateOrConnectWithoutPostsInput
    connect?: PostResolutionWhereUniqueInput
  }

  export type PostAttachmentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput> | PostAttachmentCreateWithoutPostInput[] | PostAttachmentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutPostInput | PostAttachmentCreateOrConnectWithoutPostInput[]
    createMany?: PostAttachmentCreateManyPostInputEnvelope
    connect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
  }

  export type PostMarkupUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput> | PostMarkupCreateWithoutPostInput[] | PostMarkupUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutPostInput | PostMarkupCreateOrConnectWithoutPostInput[]
    createMany?: PostMarkupCreateManyPostInputEnvelope
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
  }

  export type PostBimElementUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput> | PostBimElementCreateWithoutPostInput[] | PostBimElementUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostBimElementCreateOrConnectWithoutPostInput | PostBimElementCreateOrConnectWithoutPostInput[]
    createMany?: PostBimElementCreateManyPostInputEnvelope
    connect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type PostCommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput> | PostCommentCreateWithoutPostInput[] | PostCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutPostInput | PostCommentCreateOrConnectWithoutPostInput[]
    createMany?: PostCommentCreateManyPostInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type PostShareUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput> | PostShareCreateWithoutPostInput[] | PostShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutPostInput | PostShareCreateOrConnectWithoutPostInput[]
    createMany?: PostShareCreateManyPostInputEnvelope
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
  }

  export type PostMentionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput> | PostMentionCreateWithoutPostInput[] | PostMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutPostInput | PostMentionCreateOrConnectWithoutPostInput[]
    createMany?: PostMentionCreateManyPostInputEnvelope
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
  }

  export type PostHashtagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput> | PostHashtagCreateWithoutPostInput[] | PostHashtagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostHashtagCreateOrConnectWithoutPostInput | PostHashtagCreateOrConnectWithoutPostInput[]
    createMany?: PostHashtagCreateManyPostInputEnvelope
    connect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
  }

  export type RFIUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput> | RFICreateWithoutPostInput[] | RFIUncheckedCreateWithoutPostInput[]
    connectOrCreate?: RFICreateOrConnectWithoutPostInput | RFICreateOrConnectWithoutPostInput[]
    createMany?: RFICreateManyPostInputEnvelope
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
  }

  export type SafetyIncidentUncheckedCreateNestedOneWithoutPostInput = {
    create?: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutPostInput
    connect?: SafetyIncidentWhereUniqueInput
  }

  export type EnumPostTypeFieldUpdateOperationsInput = {
    set?: $Enums.PostType
  }

  export type EnumPostPriorityFieldUpdateOperationsInput = {
    set?: $Enums.PostPriority
  }

  export type EnumPostStatusFieldUpdateOperationsInput = {
    set?: $Enums.PostStatus
  }

  export type EnumBusinessImpactFieldUpdateOperationsInput = {
    set?: $Enums.BusinessImpact
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<OrganizationCreateWithoutPostsInput, OrganizationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPostsInput
    upsert?: OrganizationUpsertWithoutPostsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutPostsInput, OrganizationUpdateWithoutPostsInput>, OrganizationUncheckedUpdateWithoutPostsInput>
  }

  export type ProjectUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<ProjectCreateWithoutPostsInput, ProjectUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPostsInput
    upsert?: ProjectUpsertWithoutPostsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutPostsInput, ProjectUpdateWithoutPostsInput>, ProjectUncheckedUpdateWithoutPostsInput>
  }

  export type ProjectPhaseUpdateOneWithoutPostsNestedInput = {
    create?: XOR<ProjectPhaseCreateWithoutPostsInput, ProjectPhaseUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProjectPhaseCreateOrConnectWithoutPostsInput
    upsert?: ProjectPhaseUpsertWithoutPostsInput
    disconnect?: ProjectPhaseWhereInput | boolean
    delete?: ProjectPhaseWhereInput | boolean
    connect?: ProjectPhaseWhereUniqueInput
    update?: XOR<XOR<ProjectPhaseUpdateToOneWithWhereWithoutPostsInput, ProjectPhaseUpdateWithoutPostsInput>, ProjectPhaseUncheckedUpdateWithoutPostsInput>
  }

  export type TaskUpdateOneWithoutPostsNestedInput = {
    create?: XOR<TaskCreateWithoutPostsInput, TaskUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutPostsInput
    upsert?: TaskUpsertWithoutPostsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutPostsInput, TaskUpdateWithoutPostsInput>, TaskUncheckedUpdateWithoutPostsInput>
  }

  export type PostAttachmentUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput> | PostAttachmentCreateWithoutPostInput[] | PostAttachmentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutPostInput | PostAttachmentCreateOrConnectWithoutPostInput[]
    upsert?: PostAttachmentUpsertWithWhereUniqueWithoutPostInput | PostAttachmentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostAttachmentCreateManyPostInputEnvelope
    set?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    disconnect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    delete?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    connect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    update?: PostAttachmentUpdateWithWhereUniqueWithoutPostInput | PostAttachmentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostAttachmentUpdateManyWithWhereWithoutPostInput | PostAttachmentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostAttachmentScalarWhereInput | PostAttachmentScalarWhereInput[]
  }

  export type PostMarkupUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput> | PostMarkupCreateWithoutPostInput[] | PostMarkupUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutPostInput | PostMarkupCreateOrConnectWithoutPostInput[]
    upsert?: PostMarkupUpsertWithWhereUniqueWithoutPostInput | PostMarkupUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostMarkupCreateManyPostInputEnvelope
    set?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    disconnect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    delete?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    update?: PostMarkupUpdateWithWhereUniqueWithoutPostInput | PostMarkupUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostMarkupUpdateManyWithWhereWithoutPostInput | PostMarkupUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
  }

  export type PostBimElementUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput> | PostBimElementCreateWithoutPostInput[] | PostBimElementUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostBimElementCreateOrConnectWithoutPostInput | PostBimElementCreateOrConnectWithoutPostInput[]
    upsert?: PostBimElementUpsertWithWhereUniqueWithoutPostInput | PostBimElementUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostBimElementCreateManyPostInputEnvelope
    set?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    disconnect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    delete?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    connect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    update?: PostBimElementUpdateWithWhereUniqueWithoutPostInput | PostBimElementUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostBimElementUpdateManyWithWhereWithoutPostInput | PostBimElementUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostBimElementScalarWhereInput | PostBimElementScalarWhereInput[]
  }

  export type PostLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type PostCommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput> | PostCommentCreateWithoutPostInput[] | PostCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutPostInput | PostCommentCreateOrConnectWithoutPostInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutPostInput | PostCommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostCommentCreateManyPostInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutPostInput | PostCommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutPostInput | PostCommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type PostShareUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput> | PostShareCreateWithoutPostInput[] | PostShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutPostInput | PostShareCreateOrConnectWithoutPostInput[]
    upsert?: PostShareUpsertWithWhereUniqueWithoutPostInput | PostShareUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostShareCreateManyPostInputEnvelope
    set?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    disconnect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    delete?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    update?: PostShareUpdateWithWhereUniqueWithoutPostInput | PostShareUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostShareUpdateManyWithWhereWithoutPostInput | PostShareUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
  }

  export type PostMentionUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput> | PostMentionCreateWithoutPostInput[] | PostMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutPostInput | PostMentionCreateOrConnectWithoutPostInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutPostInput | PostMentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostMentionCreateManyPostInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutPostInput | PostMentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutPostInput | PostMentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type PostHashtagUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput> | PostHashtagCreateWithoutPostInput[] | PostHashtagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostHashtagCreateOrConnectWithoutPostInput | PostHashtagCreateOrConnectWithoutPostInput[]
    upsert?: PostHashtagUpsertWithWhereUniqueWithoutPostInput | PostHashtagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostHashtagCreateManyPostInputEnvelope
    set?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    disconnect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    delete?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    connect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    update?: PostHashtagUpdateWithWhereUniqueWithoutPostInput | PostHashtagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostHashtagUpdateManyWithWhereWithoutPostInput | PostHashtagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostHashtagScalarWhereInput | PostHashtagScalarWhereInput[]
  }

  export type RFIUpdateManyWithoutPostNestedInput = {
    create?: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput> | RFICreateWithoutPostInput[] | RFIUncheckedCreateWithoutPostInput[]
    connectOrCreate?: RFICreateOrConnectWithoutPostInput | RFICreateOrConnectWithoutPostInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutPostInput | RFIUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: RFICreateManyPostInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutPostInput | RFIUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutPostInput | RFIUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type SafetyIncidentUpdateOneWithoutPostNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutPostInput
    upsert?: SafetyIncidentUpsertWithoutPostInput
    disconnect?: SafetyIncidentWhereInput | boolean
    delete?: SafetyIncidentWhereInput | boolean
    connect?: SafetyIncidentWhereUniqueInput
    update?: XOR<XOR<SafetyIncidentUpdateToOneWithWhereWithoutPostInput, SafetyIncidentUpdateWithoutPostInput>, SafetyIncidentUncheckedUpdateWithoutPostInput>
  }

  export type PostResolutionUpdateOneWithoutPostsNestedInput = {
    create?: XOR<PostResolutionCreateWithoutPostsInput, PostResolutionUncheckedCreateWithoutPostsInput>
    connectOrCreate?: PostResolutionCreateOrConnectWithoutPostsInput
    upsert?: PostResolutionUpsertWithoutPostsInput
    disconnect?: PostResolutionWhereInput | boolean
    delete?: PostResolutionWhereInput | boolean
    connect?: PostResolutionWhereUniqueInput
    update?: XOR<XOR<PostResolutionUpdateToOneWithWhereWithoutPostsInput, PostResolutionUpdateWithoutPostsInput>, PostResolutionUncheckedUpdateWithoutPostsInput>
  }

  export type PostAttachmentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput> | PostAttachmentCreateWithoutPostInput[] | PostAttachmentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutPostInput | PostAttachmentCreateOrConnectWithoutPostInput[]
    upsert?: PostAttachmentUpsertWithWhereUniqueWithoutPostInput | PostAttachmentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostAttachmentCreateManyPostInputEnvelope
    set?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    disconnect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    delete?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    connect?: PostAttachmentWhereUniqueInput | PostAttachmentWhereUniqueInput[]
    update?: PostAttachmentUpdateWithWhereUniqueWithoutPostInput | PostAttachmentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostAttachmentUpdateManyWithWhereWithoutPostInput | PostAttachmentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostAttachmentScalarWhereInput | PostAttachmentScalarWhereInput[]
  }

  export type PostMarkupUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput> | PostMarkupCreateWithoutPostInput[] | PostMarkupUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutPostInput | PostMarkupCreateOrConnectWithoutPostInput[]
    upsert?: PostMarkupUpsertWithWhereUniqueWithoutPostInput | PostMarkupUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostMarkupCreateManyPostInputEnvelope
    set?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    disconnect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    delete?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    update?: PostMarkupUpdateWithWhereUniqueWithoutPostInput | PostMarkupUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostMarkupUpdateManyWithWhereWithoutPostInput | PostMarkupUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
  }

  export type PostBimElementUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput> | PostBimElementCreateWithoutPostInput[] | PostBimElementUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostBimElementCreateOrConnectWithoutPostInput | PostBimElementCreateOrConnectWithoutPostInput[]
    upsert?: PostBimElementUpsertWithWhereUniqueWithoutPostInput | PostBimElementUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostBimElementCreateManyPostInputEnvelope
    set?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    disconnect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    delete?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    connect?: PostBimElementWhereUniqueInput | PostBimElementWhereUniqueInput[]
    update?: PostBimElementUpdateWithWhereUniqueWithoutPostInput | PostBimElementUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostBimElementUpdateManyWithWhereWithoutPostInput | PostBimElementUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostBimElementScalarWhereInput | PostBimElementScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type PostCommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput> | PostCommentCreateWithoutPostInput[] | PostCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutPostInput | PostCommentCreateOrConnectWithoutPostInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutPostInput | PostCommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostCommentCreateManyPostInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutPostInput | PostCommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutPostInput | PostCommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type PostShareUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput> | PostShareCreateWithoutPostInput[] | PostShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostShareCreateOrConnectWithoutPostInput | PostShareCreateOrConnectWithoutPostInput[]
    upsert?: PostShareUpsertWithWhereUniqueWithoutPostInput | PostShareUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostShareCreateManyPostInputEnvelope
    set?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    disconnect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    delete?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    connect?: PostShareWhereUniqueInput | PostShareWhereUniqueInput[]
    update?: PostShareUpdateWithWhereUniqueWithoutPostInput | PostShareUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostShareUpdateManyWithWhereWithoutPostInput | PostShareUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
  }

  export type PostMentionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput> | PostMentionCreateWithoutPostInput[] | PostMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostMentionCreateOrConnectWithoutPostInput | PostMentionCreateOrConnectWithoutPostInput[]
    upsert?: PostMentionUpsertWithWhereUniqueWithoutPostInput | PostMentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostMentionCreateManyPostInputEnvelope
    set?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    disconnect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    delete?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    connect?: PostMentionWhereUniqueInput | PostMentionWhereUniqueInput[]
    update?: PostMentionUpdateWithWhereUniqueWithoutPostInput | PostMentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostMentionUpdateManyWithWhereWithoutPostInput | PostMentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
  }

  export type PostHashtagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput> | PostHashtagCreateWithoutPostInput[] | PostHashtagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostHashtagCreateOrConnectWithoutPostInput | PostHashtagCreateOrConnectWithoutPostInput[]
    upsert?: PostHashtagUpsertWithWhereUniqueWithoutPostInput | PostHashtagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostHashtagCreateManyPostInputEnvelope
    set?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    disconnect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    delete?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    connect?: PostHashtagWhereUniqueInput | PostHashtagWhereUniqueInput[]
    update?: PostHashtagUpdateWithWhereUniqueWithoutPostInput | PostHashtagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostHashtagUpdateManyWithWhereWithoutPostInput | PostHashtagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostHashtagScalarWhereInput | PostHashtagScalarWhereInput[]
  }

  export type RFIUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput> | RFICreateWithoutPostInput[] | RFIUncheckedCreateWithoutPostInput[]
    connectOrCreate?: RFICreateOrConnectWithoutPostInput | RFICreateOrConnectWithoutPostInput[]
    upsert?: RFIUpsertWithWhereUniqueWithoutPostInput | RFIUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: RFICreateManyPostInputEnvelope
    set?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    disconnect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    delete?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    connect?: RFIWhereUniqueInput | RFIWhereUniqueInput[]
    update?: RFIUpdateWithWhereUniqueWithoutPostInput | RFIUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: RFIUpdateManyWithWhereWithoutPostInput | RFIUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: RFIScalarWhereInput | RFIScalarWhereInput[]
  }

  export type SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput = {
    create?: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
    connectOrCreate?: SafetyIncidentCreateOrConnectWithoutPostInput
    upsert?: SafetyIncidentUpsertWithoutPostInput
    disconnect?: SafetyIncidentWhereInput | boolean
    delete?: SafetyIncidentWhereInput | boolean
    connect?: SafetyIncidentWhereUniqueInput
    update?: XOR<XOR<SafetyIncidentUpdateToOneWithWhereWithoutPostInput, SafetyIncidentUpdateWithoutPostInput>, SafetyIncidentUncheckedUpdateWithoutPostInput>
  }

  export type PostCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<PostCreateWithoutAttachmentsInput, PostUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutAttachmentsInput
    connect?: PostWhereUniqueInput
  }

  export type PostMarkupCreateNestedManyWithoutAttachmentInput = {
    create?: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput> | PostMarkupCreateWithoutAttachmentInput[] | PostMarkupUncheckedCreateWithoutAttachmentInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutAttachmentInput | PostMarkupCreateOrConnectWithoutAttachmentInput[]
    createMany?: PostMarkupCreateManyAttachmentInputEnvelope
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
  }

  export type PostMarkupUncheckedCreateNestedManyWithoutAttachmentInput = {
    create?: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput> | PostMarkupCreateWithoutAttachmentInput[] | PostMarkupUncheckedCreateWithoutAttachmentInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutAttachmentInput | PostMarkupCreateOrConnectWithoutAttachmentInput[]
    createMany?: PostMarkupCreateManyAttachmentInputEnvelope
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
  }

  export type EnumAttachmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AttachmentType
  }

  export type PostUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<PostCreateWithoutAttachmentsInput, PostUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutAttachmentsInput
    upsert?: PostUpsertWithoutAttachmentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutAttachmentsInput, PostUpdateWithoutAttachmentsInput>, PostUncheckedUpdateWithoutAttachmentsInput>
  }

  export type PostMarkupUpdateManyWithoutAttachmentNestedInput = {
    create?: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput> | PostMarkupCreateWithoutAttachmentInput[] | PostMarkupUncheckedCreateWithoutAttachmentInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutAttachmentInput | PostMarkupCreateOrConnectWithoutAttachmentInput[]
    upsert?: PostMarkupUpsertWithWhereUniqueWithoutAttachmentInput | PostMarkupUpsertWithWhereUniqueWithoutAttachmentInput[]
    createMany?: PostMarkupCreateManyAttachmentInputEnvelope
    set?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    disconnect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    delete?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    update?: PostMarkupUpdateWithWhereUniqueWithoutAttachmentInput | PostMarkupUpdateWithWhereUniqueWithoutAttachmentInput[]
    updateMany?: PostMarkupUpdateManyWithWhereWithoutAttachmentInput | PostMarkupUpdateManyWithWhereWithoutAttachmentInput[]
    deleteMany?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
  }

  export type PostMarkupUncheckedUpdateManyWithoutAttachmentNestedInput = {
    create?: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput> | PostMarkupCreateWithoutAttachmentInput[] | PostMarkupUncheckedCreateWithoutAttachmentInput[]
    connectOrCreate?: PostMarkupCreateOrConnectWithoutAttachmentInput | PostMarkupCreateOrConnectWithoutAttachmentInput[]
    upsert?: PostMarkupUpsertWithWhereUniqueWithoutAttachmentInput | PostMarkupUpsertWithWhereUniqueWithoutAttachmentInput[]
    createMany?: PostMarkupCreateManyAttachmentInputEnvelope
    set?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    disconnect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    delete?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    connect?: PostMarkupWhereUniqueInput | PostMarkupWhereUniqueInput[]
    update?: PostMarkupUpdateWithWhereUniqueWithoutAttachmentInput | PostMarkupUpdateWithWhereUniqueWithoutAttachmentInput[]
    updateMany?: PostMarkupUpdateManyWithWhereWithoutAttachmentInput | PostMarkupUpdateManyWithWhereWithoutAttachmentInput[]
    deleteMany?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
  }

  export type PostAttachmentCreateNestedOneWithoutMarkupsInput = {
    create?: XOR<PostAttachmentCreateWithoutMarkupsInput, PostAttachmentUncheckedCreateWithoutMarkupsInput>
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutMarkupsInput
    connect?: PostAttachmentWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutMarkupsInput = {
    create?: XOR<PostCreateWithoutMarkupsInput, PostUncheckedCreateWithoutMarkupsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMarkupsInput
    connect?: PostWhereUniqueInput
  }

  export type EnumMarkupTypeFieldUpdateOperationsInput = {
    set?: $Enums.MarkupType
  }

  export type PostAttachmentUpdateOneRequiredWithoutMarkupsNestedInput = {
    create?: XOR<PostAttachmentCreateWithoutMarkupsInput, PostAttachmentUncheckedCreateWithoutMarkupsInput>
    connectOrCreate?: PostAttachmentCreateOrConnectWithoutMarkupsInput
    upsert?: PostAttachmentUpsertWithoutMarkupsInput
    connect?: PostAttachmentWhereUniqueInput
    update?: XOR<XOR<PostAttachmentUpdateToOneWithWhereWithoutMarkupsInput, PostAttachmentUpdateWithoutMarkupsInput>, PostAttachmentUncheckedUpdateWithoutMarkupsInput>
  }

  export type PostUpdateOneRequiredWithoutMarkupsNestedInput = {
    create?: XOR<PostCreateWithoutMarkupsInput, PostUncheckedCreateWithoutMarkupsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMarkupsInput
    upsert?: PostUpsertWithoutMarkupsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutMarkupsInput, PostUpdateWithoutMarkupsInput>, PostUncheckedUpdateWithoutMarkupsInput>
  }

  export type PostCreateNestedOneWithoutBimElementsInput = {
    create?: XOR<PostCreateWithoutBimElementsInput, PostUncheckedCreateWithoutBimElementsInput>
    connectOrCreate?: PostCreateOrConnectWithoutBimElementsInput
    connect?: PostWhereUniqueInput
  }

  export type EnumBimDisciplineFieldUpdateOperationsInput = {
    set?: $Enums.BimDiscipline
  }

  export type PostUpdateOneRequiredWithoutBimElementsNestedInput = {
    create?: XOR<PostCreateWithoutBimElementsInput, PostUncheckedCreateWithoutBimElementsInput>
    connectOrCreate?: PostCreateOrConnectWithoutBimElementsInput
    upsert?: PostUpsertWithoutBimElementsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutBimElementsInput, PostUpdateWithoutBimElementsInput>, PostUncheckedUpdateWithoutBimElementsInput>
  }

  export type UserCreateNestedOneWithoutPostLikesInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostLikesNestedInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    upsert?: UserUpsertWithoutPostLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostLikesInput, UserUpdateWithoutPostLikesInput>, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutPostCommentsInput = {
    create?: XOR<UserCreateWithoutPostCommentsInput, UserUncheckedCreateWithoutPostCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type PostCommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<PostCommentCreateWithoutRepliesInput, PostCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: PostCommentCreateOrConnectWithoutRepliesInput
    connect?: PostCommentWhereUniqueInput
  }

  export type PostCommentCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput> | PostCommentCreateWithoutParentCommentInput[] | PostCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutParentCommentInput | PostCommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: PostCommentCreateManyParentCommentInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type PostCommentUncheckedCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput> | PostCommentCreateWithoutParentCommentInput[] | PostCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutParentCommentInput | PostCommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: PostCommentCreateManyParentCommentInputEnvelope
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPostCommentsNestedInput = {
    create?: XOR<UserCreateWithoutPostCommentsInput, UserUncheckedCreateWithoutPostCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostCommentsInput
    upsert?: UserUpsertWithoutPostCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostCommentsInput, UserUpdateWithoutPostCommentsInput>, UserUncheckedUpdateWithoutPostCommentsInput>
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostCommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<PostCommentCreateWithoutRepliesInput, PostCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: PostCommentCreateOrConnectWithoutRepliesInput
    upsert?: PostCommentUpsertWithoutRepliesInput
    disconnect?: PostCommentWhereInput | boolean
    delete?: PostCommentWhereInput | boolean
    connect?: PostCommentWhereUniqueInput
    update?: XOR<XOR<PostCommentUpdateToOneWithWhereWithoutRepliesInput, PostCommentUpdateWithoutRepliesInput>, PostCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type PostCommentUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput> | PostCommentCreateWithoutParentCommentInput[] | PostCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutParentCommentInput | PostCommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutParentCommentInput | PostCommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: PostCommentCreateManyParentCommentInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutParentCommentInput | PostCommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutParentCommentInput | PostCommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type PostCommentUncheckedUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput> | PostCommentCreateWithoutParentCommentInput[] | PostCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: PostCommentCreateOrConnectWithoutParentCommentInput | PostCommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: PostCommentUpsertWithWhereUniqueWithoutParentCommentInput | PostCommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: PostCommentCreateManyParentCommentInputEnvelope
    set?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    disconnect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    delete?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    connect?: PostCommentWhereUniqueInput | PostCommentWhereUniqueInput[]
    update?: PostCommentUpdateWithWhereUniqueWithoutParentCommentInput | PostCommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: PostCommentUpdateManyWithWhereWithoutParentCommentInput | PostCommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostSharesInput = {
    create?: XOR<UserCreateWithoutPostSharesInput, UserUncheckedCreateWithoutPostSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostSharesInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutSharesInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostSharesNestedInput = {
    create?: XOR<UserCreateWithoutPostSharesInput, UserUncheckedCreateWithoutPostSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostSharesInput
    upsert?: UserUpsertWithoutPostSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostSharesInput, UserUpdateWithoutPostSharesInput>, UserUncheckedUpdateWithoutPostSharesInput>
  }

  export type PostUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput
    upsert?: PostUpsertWithoutSharesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutSharesInput, PostUpdateWithoutSharesInput>, PostUncheckedUpdateWithoutSharesInput>
  }

  export type UserCreateNestedOneWithoutMentionsInput = {
    create?: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMentionedByInput = {
    create?: XOR<UserCreateWithoutMentionedByInput, UserUncheckedCreateWithoutMentionedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionedByInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutMentionsInput = {
    create?: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMentionsInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMentionsNestedInput = {
    create?: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionsInput
    upsert?: UserUpsertWithoutMentionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMentionsInput, UserUpdateWithoutMentionsInput>, UserUncheckedUpdateWithoutMentionsInput>
  }

  export type UserUpdateOneRequiredWithoutMentionedByNestedInput = {
    create?: XOR<UserCreateWithoutMentionedByInput, UserUncheckedCreateWithoutMentionedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionedByInput
    upsert?: UserUpsertWithoutMentionedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMentionedByInput, UserUpdateWithoutMentionedByInput>, UserUncheckedUpdateWithoutMentionedByInput>
  }

  export type PostUpdateOneRequiredWithoutMentionsNestedInput = {
    create?: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMentionsInput
    upsert?: PostUpsertWithoutMentionsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutMentionsInput, PostUpdateWithoutMentionsInput>, PostUncheckedUpdateWithoutMentionsInput>
  }

  export type PostCreateNestedOneWithoutHashtagsInput = {
    create?: XOR<PostCreateWithoutHashtagsInput, PostUncheckedCreateWithoutHashtagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutHashtagsInput
    connect?: PostWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutHashtagsNestedInput = {
    create?: XOR<PostCreateWithoutHashtagsInput, PostUncheckedCreateWithoutHashtagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutHashtagsInput
    upsert?: PostUpsertWithoutHashtagsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutHashtagsInput, PostUpdateWithoutHashtagsInput>, PostUncheckedUpdateWithoutHashtagsInput>
  }

  export type UserCreateNestedOneWithoutVerifiedResolutionsInput = {
    create?: XOR<UserCreateWithoutVerifiedResolutionsInput, UserUncheckedCreateWithoutVerifiedResolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerifiedResolutionsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutResolutionInput = {
    create?: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput> | PostCreateWithoutResolutionInput[] | PostUncheckedCreateWithoutResolutionInput[]
    connectOrCreate?: PostCreateOrConnectWithoutResolutionInput | PostCreateOrConnectWithoutResolutionInput[]
    createMany?: PostCreateManyResolutionInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutResolutionInput = {
    create?: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput> | PostCreateWithoutResolutionInput[] | PostUncheckedCreateWithoutResolutionInput[]
    connectOrCreate?: PostCreateOrConnectWithoutResolutionInput | PostCreateOrConnectWithoutResolutionInput[]
    createMany?: PostCreateManyResolutionInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutVerifiedResolutionsNestedInput = {
    create?: XOR<UserCreateWithoutVerifiedResolutionsInput, UserUncheckedCreateWithoutVerifiedResolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerifiedResolutionsInput
    upsert?: UserUpsertWithoutVerifiedResolutionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerifiedResolutionsInput, UserUpdateWithoutVerifiedResolutionsInput>, UserUncheckedUpdateWithoutVerifiedResolutionsInput>
  }

  export type PostUpdateManyWithoutResolutionNestedInput = {
    create?: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput> | PostCreateWithoutResolutionInput[] | PostUncheckedCreateWithoutResolutionInput[]
    connectOrCreate?: PostCreateOrConnectWithoutResolutionInput | PostCreateOrConnectWithoutResolutionInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutResolutionInput | PostUpsertWithWhereUniqueWithoutResolutionInput[]
    createMany?: PostCreateManyResolutionInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutResolutionInput | PostUpdateWithWhereUniqueWithoutResolutionInput[]
    updateMany?: PostUpdateManyWithWhereWithoutResolutionInput | PostUpdateManyWithWhereWithoutResolutionInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutResolutionNestedInput = {
    create?: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput> | PostCreateWithoutResolutionInput[] | PostUncheckedCreateWithoutResolutionInput[]
    connectOrCreate?: PostCreateOrConnectWithoutResolutionInput | PostCreateOrConnectWithoutResolutionInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutResolutionInput | PostUpsertWithWhereUniqueWithoutResolutionInput[]
    createMany?: PostCreateManyResolutionInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutResolutionInput | PostUpdateWithWhereUniqueWithoutResolutionInput[]
    updateMany?: PostUpdateManyWithWhereWithoutResolutionInput | PostUpdateManyWithWhereWithoutResolutionInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubmittedRFIsInput = {
    create?: XOR<UserCreateWithoutSubmittedRFIsInput, UserUncheckedCreateWithoutSubmittedRFIsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedRFIsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedRFIsInput = {
    create?: XOR<UserCreateWithoutAssignedRFIsInput, UserUncheckedCreateWithoutAssignedRFIsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRFIsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutRfisInput = {
    create?: XOR<PostCreateWithoutRfisInput, PostUncheckedCreateWithoutRfisInput>
    connectOrCreate?: PostCreateOrConnectWithoutRfisInput
    connect?: PostWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutRfisInput = {
    create?: XOR<ProjectCreateWithoutRfisInput, ProjectUncheckedCreateWithoutRfisInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutRfisInput
    connect?: ProjectWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutRfisInput = {
    create?: XOR<OrganizationCreateWithoutRfisInput, OrganizationUncheckedCreateWithoutRfisInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRfisInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumRFIPriorityFieldUpdateOperationsInput = {
    set?: $Enums.RFIPriority
  }

  export type EnumRFIStatusFieldUpdateOperationsInput = {
    set?: $Enums.RFIStatus
  }

  export type EnumRFICategoryFieldUpdateOperationsInput = {
    set?: $Enums.RFICategory
  }

  export type UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput = {
    create?: XOR<UserCreateWithoutSubmittedRFIsInput, UserUncheckedCreateWithoutSubmittedRFIsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedRFIsInput
    upsert?: UserUpsertWithoutSubmittedRFIsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmittedRFIsInput, UserUpdateWithoutSubmittedRFIsInput>, UserUncheckedUpdateWithoutSubmittedRFIsInput>
  }

  export type UserUpdateOneWithoutAssignedRFIsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedRFIsInput, UserUncheckedCreateWithoutAssignedRFIsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRFIsInput
    upsert?: UserUpsertWithoutAssignedRFIsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedRFIsInput, UserUpdateWithoutAssignedRFIsInput>, UserUncheckedUpdateWithoutAssignedRFIsInput>
  }

  export type PostUpdateOneRequiredWithoutRfisNestedInput = {
    create?: XOR<PostCreateWithoutRfisInput, PostUncheckedCreateWithoutRfisInput>
    connectOrCreate?: PostCreateOrConnectWithoutRfisInput
    upsert?: PostUpsertWithoutRfisInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutRfisInput, PostUpdateWithoutRfisInput>, PostUncheckedUpdateWithoutRfisInput>
  }

  export type ProjectUpdateOneRequiredWithoutRfisNestedInput = {
    create?: XOR<ProjectCreateWithoutRfisInput, ProjectUncheckedCreateWithoutRfisInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutRfisInput
    upsert?: ProjectUpsertWithoutRfisInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutRfisInput, ProjectUpdateWithoutRfisInput>, ProjectUncheckedUpdateWithoutRfisInput>
  }

  export type OrganizationUpdateOneRequiredWithoutRfisNestedInput = {
    create?: XOR<OrganizationCreateWithoutRfisInput, OrganizationUncheckedCreateWithoutRfisInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRfisInput
    upsert?: OrganizationUpsertWithoutRfisInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutRfisInput, OrganizationUpdateWithoutRfisInput>, OrganizationUncheckedUpdateWithoutRfisInput>
  }

  export type ApprovalCreateconditionsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutApprovalsReceivedInput = {
    create?: XOR<UserCreateWithoutApprovalsReceivedInput, UserUncheckedCreateWithoutApprovalsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalsGivenInput = {
    create?: XOR<UserCreateWithoutApprovalsGivenInput, UserUncheckedCreateWithoutApprovalsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsGivenInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<ProjectCreateWithoutApprovalsInput, ProjectUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutApprovalsInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumApprovalTypeFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalType
  }

  export type EnumApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalStatus
  }

  export type EnumApprovalPriorityFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalPriority
  }

  export type ApprovalUpdateconditionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutApprovalsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutApprovalsReceivedInput, UserUncheckedCreateWithoutApprovalsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsReceivedInput
    upsert?: UserUpsertWithoutApprovalsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalsReceivedInput, UserUpdateWithoutApprovalsReceivedInput>, UserUncheckedUpdateWithoutApprovalsReceivedInput>
  }

  export type UserUpdateOneRequiredWithoutApprovalsGivenNestedInput = {
    create?: XOR<UserCreateWithoutApprovalsGivenInput, UserUncheckedCreateWithoutApprovalsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsGivenInput
    upsert?: UserUpsertWithoutApprovalsGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalsGivenInput, UserUpdateWithoutApprovalsGivenInput>, UserUncheckedUpdateWithoutApprovalsGivenInput>
  }

  export type ProjectUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<ProjectCreateWithoutApprovalsInput, ProjectUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutApprovalsInput
    upsert?: ProjectUpsertWithoutApprovalsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutApprovalsInput, ProjectUpdateWithoutApprovalsInput>, ProjectUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserCreateNestedOneWithoutReportedIncidentsInput = {
    create?: XOR<UserCreateWithoutReportedIncidentsInput, UserUncheckedCreateWithoutReportedIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportedIncidentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedIncidentsInput = {
    create?: XOR<UserCreateWithoutAssignedIncidentsInput, UserUncheckedCreateWithoutAssignedIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedIncidentsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutSafetyIncidentsInput = {
    create?: XOR<ProjectCreateWithoutSafetyIncidentsInput, ProjectUncheckedCreateWithoutSafetyIncidentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSafetyIncidentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutSafetyIncidentInput = {
    create?: XOR<PostCreateWithoutSafetyIncidentInput, PostUncheckedCreateWithoutSafetyIncidentInput>
    connectOrCreate?: PostCreateOrConnectWithoutSafetyIncidentInput
    connect?: PostWhereUniqueInput
  }

  export type EnumIncidentTypeFieldUpdateOperationsInput = {
    set?: $Enums.IncidentType
  }

  export type EnumIncidentSeverityFieldUpdateOperationsInput = {
    set?: $Enums.IncidentSeverity
  }

  export type EnumIncidentStatusFieldUpdateOperationsInput = {
    set?: $Enums.IncidentStatus
  }

  export type UserUpdateOneRequiredWithoutReportedIncidentsNestedInput = {
    create?: XOR<UserCreateWithoutReportedIncidentsInput, UserUncheckedCreateWithoutReportedIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportedIncidentsInput
    upsert?: UserUpsertWithoutReportedIncidentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportedIncidentsInput, UserUpdateWithoutReportedIncidentsInput>, UserUncheckedUpdateWithoutReportedIncidentsInput>
  }

  export type UserUpdateOneWithoutAssignedIncidentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedIncidentsInput, UserUncheckedCreateWithoutAssignedIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedIncidentsInput
    upsert?: UserUpsertWithoutAssignedIncidentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedIncidentsInput, UserUpdateWithoutAssignedIncidentsInput>, UserUncheckedUpdateWithoutAssignedIncidentsInput>
  }

  export type ProjectUpdateOneRequiredWithoutSafetyIncidentsNestedInput = {
    create?: XOR<ProjectCreateWithoutSafetyIncidentsInput, ProjectUncheckedCreateWithoutSafetyIncidentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSafetyIncidentsInput
    upsert?: ProjectUpsertWithoutSafetyIncidentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSafetyIncidentsInput, ProjectUpdateWithoutSafetyIncidentsInput>, ProjectUncheckedUpdateWithoutSafetyIncidentsInput>
  }

  export type PostUpdateOneRequiredWithoutSafetyIncidentNestedInput = {
    create?: XOR<PostCreateWithoutSafetyIncidentInput, PostUncheckedCreateWithoutSafetyIncidentInput>
    connectOrCreate?: PostCreateOrConnectWithoutSafetyIncidentInput
    upsert?: PostUpsertWithoutSafetyIncidentInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutSafetyIncidentInput, PostUpdateWithoutSafetyIncidentInput>, PostUncheckedUpdateWithoutSafetyIncidentInput>
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type EnumAchievementCategoryFieldUpdateOperationsInput = {
    set?: $Enums.AchievementCategory
  }

  export type EnumAchievementRarityFieldUpdateOperationsInput = {
    set?: $Enums.AchievementRarity
  }

  export type UserAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutUserAchievementsInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    upsert?: UserUpsertWithoutAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementsInput, UserUpdateWithoutAchievementsInput>, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    upsert?: AchievementUpsertWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutUserAchievementsInput, AchievementUpdateWithoutUserAchievementsInput>, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type UserBadgeCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type EnumBadgeCategoryFieldUpdateOperationsInput = {
    set?: $Enums.BadgeCategory
  }

  export type UserBadgeUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBadgesInput = {
    create?: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type BadgeCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBadgesNestedInput = {
    create?: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgesInput
    upsert?: UserUpsertWithoutBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBadgesInput, UserUpdateWithoutBadgesInput>, UserUncheckedUpdateWithoutBadgesInput>
  }

  export type BadgeUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    upsert?: BadgeUpsertWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
    update?: XOR<XOR<BadgeUpdateToOneWithWhereWithoutUserBadgesInput, BadgeUpdateWithoutUserBadgesInput>, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserCreateNestedOneWithoutXpTransactionsInput = {
    create?: XOR<UserCreateWithoutXpTransactionsInput, UserUncheckedCreateWithoutXpTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumXPCategoryFieldUpdateOperationsInput = {
    set?: $Enums.XPCategory
  }

  export type UserUpdateOneRequiredWithoutXpTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutXpTransactionsInput, UserUncheckedCreateWithoutXpTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpTransactionsInput
    upsert?: UserUpsertWithoutXpTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutXpTransactionsInput, UserUpdateWithoutXpTransactionsInput>, UserUncheckedUpdateWithoutXpTransactionsInput>
  }

  export type DocumentCreatecomplianceFlagsInput = {
    set: string[]
  }

  export type ProjectCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<TaskCreateWithoutDocumentsInput, TaskUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutDocumentsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type DocumentUpdatecomplianceFlagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProjectUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    upsert?: ProjectUpsertWithoutDocumentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDocumentsInput, ProjectUpdateWithoutDocumentsInput>, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type TaskUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<TaskCreateWithoutDocumentsInput, TaskUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutDocumentsInput
    upsert?: TaskUpsertWithoutDocumentsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutDocumentsInput, TaskUpdateWithoutDocumentsInput>, TaskUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    upsert?: ProjectUpsertWithoutCommentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCommentsInput, ProjectUpdateWithoutCommentsInput>, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    upsert?: TaskUpsertWithoutCommentsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutCommentsInput, TaskUpdateWithoutCommentsInput>, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<ProjectCreateWithoutActivityLogsInput, ProjectUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActivityLogsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type ProjectUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<ProjectCreateWithoutActivityLogsInput, ProjectUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActivityLogsInput
    upsert?: ProjectUpsertWithoutActivityLogsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutActivityLogsInput, ProjectUpdateWithoutActivityLogsInput>, ProjectUncheckedUpdateWithoutActivityLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumComplianceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusFilter<$PrismaModel> | $Enums.ComplianceStatus
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStatusFilter<$PrismaModel>
    _max?: NestedEnumComplianceStatusFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedEnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumProjectRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleFilter<$PrismaModel> | $Enums.ProjectRole
  }

  export type NestedEnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectRoleFilter<$PrismaModel>
  }

  export type NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityFilter<$PrismaModel> | $Enums.TaskPriority
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel> | $Enums.TaskPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPriorityFilter<$PrismaModel>
    _max?: NestedEnumTaskPriorityFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumPostTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeFilter<$PrismaModel> | $Enums.PostType
  }

  export type NestedEnumPostPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.PostPriority | EnumPostPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPostPriorityFilter<$PrismaModel> | $Enums.PostPriority
  }

  export type NestedEnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type NestedEnumBusinessImpactFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessImpact | EnumBusinessImpactFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessImpactFilter<$PrismaModel> | $Enums.BusinessImpact
  }

  export type NestedEnumPostTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeWithAggregatesFilter<$PrismaModel> | $Enums.PostType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostTypeFilter<$PrismaModel>
    _max?: NestedEnumPostTypeFilter<$PrismaModel>
  }

  export type NestedEnumPostPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostPriority | EnumPostPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostPriority[] | ListEnumPostPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPostPriorityWithAggregatesFilter<$PrismaModel> | $Enums.PostPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostPriorityFilter<$PrismaModel>
    _max?: NestedEnumPostPriorityFilter<$PrismaModel>
  }

  export type NestedEnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type NestedEnumBusinessImpactWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessImpact | EnumBusinessImpactFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessImpact[] | ListEnumBusinessImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessImpactWithAggregatesFilter<$PrismaModel> | $Enums.BusinessImpact
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessImpactFilter<$PrismaModel>
    _max?: NestedEnumBusinessImpactFilter<$PrismaModel>
  }

  export type NestedEnumAttachmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentType | EnumAttachmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentTypeFilter<$PrismaModel> | $Enums.AttachmentType
  }

  export type NestedEnumAttachmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentType | EnumAttachmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentType[] | ListEnumAttachmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AttachmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttachmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAttachmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumMarkupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MarkupType | EnumMarkupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMarkupTypeFilter<$PrismaModel> | $Enums.MarkupType
  }

  export type NestedEnumMarkupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MarkupType | EnumMarkupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarkupType[] | ListEnumMarkupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMarkupTypeWithAggregatesFilter<$PrismaModel> | $Enums.MarkupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMarkupTypeFilter<$PrismaModel>
    _max?: NestedEnumMarkupTypeFilter<$PrismaModel>
  }

  export type NestedEnumBimDisciplineFilter<$PrismaModel = never> = {
    equals?: $Enums.BimDiscipline | EnumBimDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumBimDisciplineFilter<$PrismaModel> | $Enums.BimDiscipline
  }

  export type NestedEnumBimDisciplineWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BimDiscipline | EnumBimDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.BimDiscipline[] | ListEnumBimDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumBimDisciplineWithAggregatesFilter<$PrismaModel> | $Enums.BimDiscipline
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBimDisciplineFilter<$PrismaModel>
    _max?: NestedEnumBimDisciplineFilter<$PrismaModel>
  }

  export type NestedEnumRFIPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIPriority | EnumRFIPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIPriorityFilter<$PrismaModel> | $Enums.RFIPriority
  }

  export type NestedEnumRFIStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIStatus | EnumRFIStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIStatusFilter<$PrismaModel> | $Enums.RFIStatus
  }

  export type NestedEnumRFICategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.RFICategory | EnumRFICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRFICategoryFilter<$PrismaModel> | $Enums.RFICategory
  }

  export type NestedEnumRFIPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIPriority | EnumRFIPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIPriority[] | ListEnumRFIPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIPriorityWithAggregatesFilter<$PrismaModel> | $Enums.RFIPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFIPriorityFilter<$PrismaModel>
    _max?: NestedEnumRFIPriorityFilter<$PrismaModel>
  }

  export type NestedEnumRFIStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFIStatus | EnumRFIStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFIStatus[] | ListEnumRFIStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRFIStatusWithAggregatesFilter<$PrismaModel> | $Enums.RFIStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFIStatusFilter<$PrismaModel>
    _max?: NestedEnumRFIStatusFilter<$PrismaModel>
  }

  export type NestedEnumRFICategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RFICategory | EnumRFICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RFICategory[] | ListEnumRFICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRFICategoryWithAggregatesFilter<$PrismaModel> | $Enums.RFICategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRFICategoryFilter<$PrismaModel>
    _max?: NestedEnumRFICategoryFilter<$PrismaModel>
  }

  export type NestedEnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type NestedEnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type NestedEnumApprovalPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalPriority | EnumApprovalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalPriorityFilter<$PrismaModel> | $Enums.ApprovalPriority
  }

  export type NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type NestedEnumApprovalPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalPriority | EnumApprovalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalPriority[] | ListEnumApprovalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalPriorityFilter<$PrismaModel>
    _max?: NestedEnumApprovalPriorityFilter<$PrismaModel>
  }

  export type NestedEnumIncidentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentType | EnumIncidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentTypeFilter<$PrismaModel> | $Enums.IncidentType
  }

  export type NestedEnumIncidentSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentSeverity | EnumIncidentSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentSeverityFilter<$PrismaModel> | $Enums.IncidentSeverity
  }

  export type NestedEnumIncidentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusFilter<$PrismaModel> | $Enums.IncidentStatus
  }

  export type NestedEnumIncidentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentType | EnumIncidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentType[] | ListEnumIncidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentTypeWithAggregatesFilter<$PrismaModel> | $Enums.IncidentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentTypeFilter<$PrismaModel>
    _max?: NestedEnumIncidentTypeFilter<$PrismaModel>
  }

  export type NestedEnumIncidentSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentSeverity | EnumIncidentSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentSeverity[] | ListEnumIncidentSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentSeverityWithAggregatesFilter<$PrismaModel> | $Enums.IncidentSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentSeverityFilter<$PrismaModel>
    _max?: NestedEnumIncidentSeverityFilter<$PrismaModel>
  }

  export type NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncidentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentStatusFilter<$PrismaModel>
    _max?: NestedEnumIncidentStatusFilter<$PrismaModel>
  }

  export type NestedEnumAchievementCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryFilter<$PrismaModel> | $Enums.AchievementCategory
  }

  export type NestedEnumAchievementRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityFilter<$PrismaModel> | $Enums.AchievementRarity
  }

  export type NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AchievementCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementCategoryFilter<$PrismaModel>
    _max?: NestedEnumAchievementCategoryFilter<$PrismaModel>
  }

  export type NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel> | $Enums.AchievementRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementRarityFilter<$PrismaModel>
    _max?: NestedEnumAchievementRarityFilter<$PrismaModel>
  }

  export type NestedEnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type NestedEnumXPCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.XPCategory | EnumXPCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumXPCategoryFilter<$PrismaModel> | $Enums.XPCategory
  }

  export type NestedEnumXPCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.XPCategory | EnumXPCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.XPCategory[] | ListEnumXPCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumXPCategoryWithAggregatesFilter<$PrismaModel> | $Enums.XPCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumXPCategoryFilter<$PrismaModel>
    _max?: NestedEnumXPCategoryFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectCreateManyOrganizationInputEnvelope = {
    data: ProjectCreateManyOrganizationInput | ProjectCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutOrganizationInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutOrganizationInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutOrganizationInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput>
  }

  export type PostCreateManyOrganizationInputEnvelope = {
    data: PostCreateManyOrganizationInput | PostCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type RFICreateWithoutOrganizationInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedRFIsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedRFIsInput
    post: PostCreateNestedOneWithoutRfisInput
    project: ProjectCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateWithoutOrganizationInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateOrConnectWithoutOrganizationInput = {
    where: RFIWhereUniqueInput
    create: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput>
  }

  export type RFICreateManyOrganizationInputEnvelope = {
    data: RFICreateManyOrganizationInput | RFICreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    bio?: StringNullableFilter<"User"> | string | null
    specialization?: StringNullableFilter<"User"> | string | null
    experienceYears?: IntNullableFilter<"User"> | number | null
    location?: StringNullableFilter<"User"> | string | null
    contributionScore?: IntFilter<"User"> | number
    safetyScore?: IntFilter<"User"> | number
    qualityScore?: IntFilter<"User"> | number
    collaborationScore?: IntFilter<"User"> | number
    professionalLevel?: StringNullableFilter<"User"> | string | null
    certifications?: StringNullableListFilter<"User">
    skills?: StringNullableListFilter<"User">
    phoneNumber?: StringNullableFilter<"User"> | string | null
    emergencyContact?: StringNullableFilter<"User"> | string | null
    lastActiveProject?: StringNullableFilter<"User"> | string | null
    timezone?: StringFilter<"User"> | string
    notificationPrefs?: JsonFilter<"User">
    workingHours?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organizationId?: StringFilter<"User"> | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOrganizationInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    budget?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFilter<"Project"> | number
    address?: StringNullableFilter<"Project"> | string | null
    coordinates?: JsonNullableFilter<"Project">
    bimModelUrl?: StringNullableFilter<"Project"> | string | null
    isPublic?: BoolFilter<"Project"> | boolean
    collaborationScore?: IntFilter<"Project"> | number
    safetyScore?: IntFilter<"Project"> | number
    qualityScore?: IntFilter<"Project"> | number
    efficiencyScore?: IntFilter<"Project"> | number
    clientName?: StringNullableFilter<"Project"> | string | null
    contractNumber?: StringNullableFilter<"Project"> | string | null
    projectCode?: StringNullableFilter<"Project"> | string | null
    regulatoryReqs?: StringNullableListFilter<"Project">
    complianceStatus?: EnumComplianceStatusFilter<"Project"> | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFilter<"Project"> | $Enums.RiskLevel
    clientApprovalRequired?: BoolFilter<"Project"> | boolean
    clientContactEmail?: StringNullableFilter<"Project"> | string | null
    clientContactName?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    organizationId?: StringFilter<"Project"> | string
  }

  export type PostUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutOrganizationInput, PostUncheckedUpdateWithoutOrganizationInput>
    create: XOR<PostCreateWithoutOrganizationInput, PostUncheckedCreateWithoutOrganizationInput>
  }

  export type PostUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutOrganizationInput, PostUncheckedUpdateWithoutOrganizationInput>
  }

  export type PostUpdateManyWithWhereWithoutOrganizationInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    priority?: EnumPostPriorityFilter<"Post"> | $Enums.PostPriority
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    isPublic?: BoolFilter<"Post"> | boolean
    viewCount?: IntFilter<"Post"> | number
    likeCount?: IntFilter<"Post"> | number
    commentCount?: IntFilter<"Post"> | number
    shareCount?: IntFilter<"Post"> | number
    requiresApproval?: BoolFilter<"Post"> | boolean
    approvedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    approvedById?: StringNullableFilter<"Post"> | string | null
    isClientVisible?: BoolFilter<"Post"> | boolean
    estimatedResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    actualResolution?: DateTimeNullableFilter<"Post"> | Date | string | null
    businessImpact?: EnumBusinessImpactFilter<"Post"> | $Enums.BusinessImpact
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
    organizationId?: StringFilter<"Post"> | string
    projectId?: StringFilter<"Post"> | string
    phaseId?: StringNullableFilter<"Post"> | string | null
    taskId?: StringNullableFilter<"Post"> | string | null
    resolutionId?: StringNullableFilter<"Post"> | string | null
  }

  export type RFIUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: RFIWhereUniqueInput
    update: XOR<RFIUpdateWithoutOrganizationInput, RFIUncheckedUpdateWithoutOrganizationInput>
    create: XOR<RFICreateWithoutOrganizationInput, RFIUncheckedCreateWithoutOrganizationInput>
  }

  export type RFIUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: RFIWhereUniqueInput
    data: XOR<RFIUpdateWithoutOrganizationInput, RFIUncheckedUpdateWithoutOrganizationInput>
  }

  export type RFIUpdateManyWithWhereWithoutOrganizationInput = {
    where: RFIScalarWhereInput
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type RFIScalarWhereInput = {
    AND?: RFIScalarWhereInput | RFIScalarWhereInput[]
    OR?: RFIScalarWhereInput[]
    NOT?: RFIScalarWhereInput | RFIScalarWhereInput[]
    id?: StringFilter<"RFI"> | string
    number?: StringFilter<"RFI"> | string
    subject?: StringFilter<"RFI"> | string
    description?: StringFilter<"RFI"> | string
    priority?: EnumRFIPriorityFilter<"RFI"> | $Enums.RFIPriority
    status?: EnumRFIStatusFilter<"RFI"> | $Enums.RFIStatus
    dueDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    responseDate?: DateTimeNullableFilter<"RFI"> | Date | string | null
    response?: StringNullableFilter<"RFI"> | string | null
    clientVisible?: BoolFilter<"RFI"> | boolean
    costImpact?: DecimalNullableFilter<"RFI"> | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: IntNullableFilter<"RFI"> | number | null
    category?: EnumRFICategoryFilter<"RFI"> | $Enums.RFICategory
    externalRFINumber?: StringNullableFilter<"RFI"> | string | null
    submittedById?: StringFilter<"RFI"> | string
    assignedToId?: StringNullableFilter<"RFI"> | string | null
    postId?: StringFilter<"RFI"> | string
    projectId?: StringFilter<"RFI"> | string
    organizationId?: StringFilter<"RFI"> | string
    createdAt?: DateTimeFilter<"RFI"> | Date | string
    updatedAt?: DateTimeFilter<"RFI"> | Date | string
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    posts?: PostCreateNestedManyWithoutOrganizationInput
    rfis?: RFICreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    posts?: PostUncheckedCreateNestedManyWithoutOrganizationInput
    rfis?: RFIUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type TaskCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCreatedByInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput>
  }

  export type TaskCreateManyCreatedByInputEnvelope = {
    data: TaskCreateManyCreatedByInput | TaskCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    projectId: string
  }

  export type ProjectMemberCreateOrConnectWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberCreateManyUserInputEnvelope = {
    data: ProjectMemberCreateManyUserInput | ProjectMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUploadedByInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutDocumentsInput
    task?: TaskCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
  }

  export type DocumentCreateOrConnectWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentCreateManyUploadedByInputEnvelope = {
    data: DocumentCreateManyUploadedByInput | DocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    projectId?: string | null
  }

  export type ActivityLogCreateOrConnectWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogCreateManyUserInputEnvelope = {
    data: ActivityLogCreateManyUserInput | ActivityLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutAuthorInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type PostLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type PostLikeUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type PostLikeCreateOrConnectWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeCreateManyUserInputEnvelope = {
    data: PostLikeCreateManyUserInput | PostLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostCommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
    parentComment?: PostCommentCreateNestedOneWithoutRepliesInput
    replies?: PostCommentCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    parentCommentId?: string | null
    replies?: PostCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentCreateOrConnectWithoutAuthorInput = {
    where: PostCommentWhereUniqueInput
    create: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput>
  }

  export type PostCommentCreateManyAuthorInputEnvelope = {
    data: PostCommentCreateManyAuthorInput | PostCommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type PostShareCreateWithoutUserInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutSharesInput
  }

  export type PostShareUncheckedCreateWithoutUserInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    postId: string
  }

  export type PostShareCreateOrConnectWithoutUserInput = {
    where: PostShareWhereUniqueInput
    create: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput>
  }

  export type PostShareCreateManyUserInputEnvelope = {
    data: PostShareCreateManyUserInput | PostShareCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostMentionCreateWithoutMentionedUserInput = {
    id?: string
    createdAt?: Date | string
    mentioningUser: UserCreateNestedOneWithoutMentionedByInput
    post: PostCreateNestedOneWithoutMentionsInput
  }

  export type PostMentionUncheckedCreateWithoutMentionedUserInput = {
    id?: string
    createdAt?: Date | string
    mentioningUserId: string
    postId: string
  }

  export type PostMentionCreateOrConnectWithoutMentionedUserInput = {
    where: PostMentionWhereUniqueInput
    create: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput>
  }

  export type PostMentionCreateManyMentionedUserInputEnvelope = {
    data: PostMentionCreateManyMentionedUserInput | PostMentionCreateManyMentionedUserInput[]
    skipDuplicates?: boolean
  }

  export type PostMentionCreateWithoutMentioningUserInput = {
    id?: string
    createdAt?: Date | string
    mentionedUser: UserCreateNestedOneWithoutMentionsInput
    post: PostCreateNestedOneWithoutMentionsInput
  }

  export type PostMentionUncheckedCreateWithoutMentioningUserInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    postId: string
  }

  export type PostMentionCreateOrConnectWithoutMentioningUserInput = {
    where: PostMentionWhereUniqueInput
    create: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput>
  }

  export type PostMentionCreateManyMentioningUserInputEnvelope = {
    data: PostMentionCreateManyMentioningUserInput | PostMentionCreateManyMentioningUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFollowCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type UserFollowUncheckedCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    followingId: string
  }

  export type UserFollowCreateOrConnectWithoutFollowerInput = {
    where: UserFollowWhereUniqueInput
    create: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput>
  }

  export type UserFollowCreateManyFollowerInputEnvelope = {
    data: UserFollowCreateManyFollowerInput | UserFollowCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type UserFollowCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type UserFollowUncheckedCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
  }

  export type UserFollowCreateOrConnectWithoutFollowingInput = {
    where: UserFollowWhereUniqueInput
    create: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput>
  }

  export type UserFollowCreateManyFollowingInputEnvelope = {
    data: UserFollowCreateManyFollowingInput | UserFollowCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type RFICreateWithoutSubmittedByInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedRFIsInput
    post: PostCreateNestedOneWithoutRfisInput
    project: ProjectCreateNestedOneWithoutRfisInput
    organization: OrganizationCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateWithoutSubmittedByInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    assignedToId?: string | null
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateOrConnectWithoutSubmittedByInput = {
    where: RFIWhereUniqueInput
    create: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput>
  }

  export type RFICreateManySubmittedByInputEnvelope = {
    data: RFICreateManySubmittedByInput | RFICreateManySubmittedByInput[]
    skipDuplicates?: boolean
  }

  export type RFICreateWithoutAssignedToInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedRFIsInput
    post: PostCreateNestedOneWithoutRfisInput
    project: ProjectCreateNestedOneWithoutRfisInput
    organization: OrganizationCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateWithoutAssignedToInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateOrConnectWithoutAssignedToInput = {
    where: RFIWhereUniqueInput
    create: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput>
  }

  export type RFICreateManyAssignedToInputEnvelope = {
    data: RFICreateManyAssignedToInput | RFICreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    achievementId: string
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    badgeId: string
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type XPTransactionCreateWithoutUserInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type XPTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type XPTransactionCreateOrConnectWithoutUserInput = {
    where: XPTransactionWhereUniqueInput
    create: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput>
  }

  export type XPTransactionCreateManyUserInputEnvelope = {
    data: XPTransactionCreateManyUserInput | XPTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SafetyIncidentCreateWithoutReporterInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedIncidentsInput
    project: ProjectCreateNestedOneWithoutSafetyIncidentsInput
    post: PostCreateNestedOneWithoutSafetyIncidentInput
  }

  export type SafetyIncidentUncheckedCreateWithoutReporterInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    assignedToId?: string | null
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateOrConnectWithoutReporterInput = {
    where: SafetyIncidentWhereUniqueInput
    create: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput>
  }

  export type SafetyIncidentCreateManyReporterInputEnvelope = {
    data: SafetyIncidentCreateManyReporterInput | SafetyIncidentCreateManyReporterInput[]
    skipDuplicates?: boolean
  }

  export type SafetyIncidentCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportedIncidentsInput
    project: ProjectCreateNestedOneWithoutSafetyIncidentsInput
    post: PostCreateNestedOneWithoutSafetyIncidentInput
  }

  export type SafetyIncidentUncheckedCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateOrConnectWithoutAssignedToInput = {
    where: SafetyIncidentWhereUniqueInput
    create: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput>
  }

  export type SafetyIncidentCreateManyAssignedToInputEnvelope = {
    data: SafetyIncidentCreateManyAssignedToInput | SafetyIncidentCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type PostResolutionCreateWithoutVerifierInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutResolutionInput
  }

  export type PostResolutionUncheckedCreateWithoutVerifierInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutResolutionInput
  }

  export type PostResolutionCreateOrConnectWithoutVerifierInput = {
    where: PostResolutionWhereUniqueInput
    create: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput>
  }

  export type PostResolutionCreateManyVerifierInputEnvelope = {
    data: PostResolutionCreateManyVerifierInput | PostResolutionCreateManyVerifierInput[]
    skipDuplicates?: boolean
  }

  export type ApprovalCreateWithoutApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutApprovalsReceivedInput
    project: ProjectCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutApproverInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput>
  }

  export type ApprovalCreateManyApproverInputEnvelope = {
    data: ApprovalCreateManyApproverInput | ApprovalCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type ApprovalCreateWithoutRequesterInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    approver: UserCreateNestedOneWithoutApprovalsGivenInput
    project: ProjectCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutRequesterInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    approverId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutRequesterInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput>
  }

  export type ApprovalCreateManyRequesterInputEnvelope = {
    data: ApprovalCreateManyRequesterInput | ApprovalCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    posts?: PostUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    posts?: PostUncheckedUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    progress?: FloatFilter<"Task"> | number
    tags?: StringNullableListFilter<"Task">
    isBlocked?: BoolFilter<"Task"> | boolean
    blockedReason?: StringNullableFilter<"Task"> | string | null
    blockedSince?: DateTimeNullableFilter<"Task"> | Date | string | null
    estimatedCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFilter<"Task"> | boolean
    isClientVisible?: BoolFilter<"Task"> | boolean
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    projectId?: StringFilter<"Task"> | string
    phaseId?: StringNullableFilter<"Task"> | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    createdById?: StringFilter<"Task"> | string
    parentTaskId?: StringNullableFilter<"Task"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutCreatedByInput, TaskUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TaskCreateWithoutCreatedByInput, TaskUncheckedCreateWithoutCreatedByInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutCreatedByInput, TaskUncheckedUpdateWithoutCreatedByInput>
  }

  export type TaskUpdateManyWithWhereWithoutCreatedByInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutUserInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectMemberScalarWhereInput = {
    AND?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    OR?: ProjectMemberScalarWhereInput[]
    NOT?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    hourlyRate?: DecimalNullableFilter<"ProjectMember"> | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: IntNullableFilter<"ProjectMember"> | number | null
    accessLevel?: EnumAccessLevelFilter<"ProjectMember"> | $Enums.AccessLevel
    isLead?: BoolFilter<"ProjectMember"> | boolean
    department?: StringNullableFilter<"ProjectMember"> | string | null
    costCenter?: StringNullableFilter<"ProjectMember"> | string | null
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
  }

  export type DocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    fileUrl?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    isPublic?: BoolFilter<"Document"> | boolean
    downloadCount?: IntFilter<"Document"> | number
    isConfidential?: BoolFilter<"Document"> | boolean
    requiresApproval?: BoolFilter<"Document"> | boolean
    approvalStatus?: EnumApprovalStatusFilter<"Document"> | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFilter<"Document"> | $Enums.AccessLevel
    retentionPeriod?: IntNullableFilter<"Document"> | number | null
    complianceFlags?: StringNullableListFilter<"Document">
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    projectId?: StringNullableFilter<"Document"> | string | null
    taskId?: StringNullableFilter<"Document"> | string | null
    uploadedById?: StringFilter<"Document"> | string
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityLogScalarWhereInput = {
    AND?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    OR?: ActivityLogScalarWhereInput[]
    NOT?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    entity?: StringFilter<"ActivityLog"> | string
    entityId?: StringFilter<"ActivityLog"> | string
    oldValues?: JsonNullableFilter<"ActivityLog">
    newValues?: JsonNullableFilter<"ActivityLog">
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    sessionId?: StringNullableFilter<"ActivityLog"> | string | null
    riskLevel?: EnumRiskLevelFilter<"ActivityLog"> | $Enums.RiskLevel
    complianceFlag?: BoolFilter<"ActivityLog"> | boolean
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    userId?: StringFilter<"ActivityLog"> | string
    projectId?: StringNullableFilter<"ActivityLog"> | string | null
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type PostLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutUserInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type PostLikeScalarWhereInput = {
    AND?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    OR?: PostLikeScalarWhereInput[]
    NOT?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    id?: StringFilter<"PostLike"> | string
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
  }

  export type PostCommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostCommentWhereUniqueInput
    update: XOR<PostCommentUpdateWithoutAuthorInput, PostCommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCommentCreateWithoutAuthorInput, PostCommentUncheckedCreateWithoutAuthorInput>
  }

  export type PostCommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostCommentWhereUniqueInput
    data: XOR<PostCommentUpdateWithoutAuthorInput, PostCommentUncheckedUpdateWithoutAuthorInput>
  }

  export type PostCommentUpdateManyWithWhereWithoutAuthorInput = {
    where: PostCommentScalarWhereInput
    data: XOR<PostCommentUpdateManyMutationInput, PostCommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type PostCommentScalarWhereInput = {
    AND?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
    OR?: PostCommentScalarWhereInput[]
    NOT?: PostCommentScalarWhereInput | PostCommentScalarWhereInput[]
    id?: StringFilter<"PostComment"> | string
    content?: StringFilter<"PostComment"> | string
    createdAt?: DateTimeFilter<"PostComment"> | Date | string
    updatedAt?: DateTimeFilter<"PostComment"> | Date | string
    authorId?: StringFilter<"PostComment"> | string
    postId?: StringFilter<"PostComment"> | string
    parentCommentId?: StringNullableFilter<"PostComment"> | string | null
  }

  export type PostShareUpsertWithWhereUniqueWithoutUserInput = {
    where: PostShareWhereUniqueInput
    update: XOR<PostShareUpdateWithoutUserInput, PostShareUncheckedUpdateWithoutUserInput>
    create: XOR<PostShareCreateWithoutUserInput, PostShareUncheckedCreateWithoutUserInput>
  }

  export type PostShareUpdateWithWhereUniqueWithoutUserInput = {
    where: PostShareWhereUniqueInput
    data: XOR<PostShareUpdateWithoutUserInput, PostShareUncheckedUpdateWithoutUserInput>
  }

  export type PostShareUpdateManyWithWhereWithoutUserInput = {
    where: PostShareScalarWhereInput
    data: XOR<PostShareUpdateManyMutationInput, PostShareUncheckedUpdateManyWithoutUserInput>
  }

  export type PostShareScalarWhereInput = {
    AND?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
    OR?: PostShareScalarWhereInput[]
    NOT?: PostShareScalarWhereInput | PostShareScalarWhereInput[]
    id?: StringFilter<"PostShare"> | string
    comment?: StringNullableFilter<"PostShare"> | string | null
    createdAt?: DateTimeFilter<"PostShare"> | Date | string
    userId?: StringFilter<"PostShare"> | string
    postId?: StringFilter<"PostShare"> | string
  }

  export type PostMentionUpsertWithWhereUniqueWithoutMentionedUserInput = {
    where: PostMentionWhereUniqueInput
    update: XOR<PostMentionUpdateWithoutMentionedUserInput, PostMentionUncheckedUpdateWithoutMentionedUserInput>
    create: XOR<PostMentionCreateWithoutMentionedUserInput, PostMentionUncheckedCreateWithoutMentionedUserInput>
  }

  export type PostMentionUpdateWithWhereUniqueWithoutMentionedUserInput = {
    where: PostMentionWhereUniqueInput
    data: XOR<PostMentionUpdateWithoutMentionedUserInput, PostMentionUncheckedUpdateWithoutMentionedUserInput>
  }

  export type PostMentionUpdateManyWithWhereWithoutMentionedUserInput = {
    where: PostMentionScalarWhereInput
    data: XOR<PostMentionUpdateManyMutationInput, PostMentionUncheckedUpdateManyWithoutMentionedUserInput>
  }

  export type PostMentionScalarWhereInput = {
    AND?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
    OR?: PostMentionScalarWhereInput[]
    NOT?: PostMentionScalarWhereInput | PostMentionScalarWhereInput[]
    id?: StringFilter<"PostMention"> | string
    createdAt?: DateTimeFilter<"PostMention"> | Date | string
    mentionedUserId?: StringFilter<"PostMention"> | string
    mentioningUserId?: StringFilter<"PostMention"> | string
    postId?: StringFilter<"PostMention"> | string
  }

  export type PostMentionUpsertWithWhereUniqueWithoutMentioningUserInput = {
    where: PostMentionWhereUniqueInput
    update: XOR<PostMentionUpdateWithoutMentioningUserInput, PostMentionUncheckedUpdateWithoutMentioningUserInput>
    create: XOR<PostMentionCreateWithoutMentioningUserInput, PostMentionUncheckedCreateWithoutMentioningUserInput>
  }

  export type PostMentionUpdateWithWhereUniqueWithoutMentioningUserInput = {
    where: PostMentionWhereUniqueInput
    data: XOR<PostMentionUpdateWithoutMentioningUserInput, PostMentionUncheckedUpdateWithoutMentioningUserInput>
  }

  export type PostMentionUpdateManyWithWhereWithoutMentioningUserInput = {
    where: PostMentionScalarWhereInput
    data: XOR<PostMentionUpdateManyMutationInput, PostMentionUncheckedUpdateManyWithoutMentioningUserInput>
  }

  export type UserFollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: UserFollowWhereUniqueInput
    update: XOR<UserFollowUpdateWithoutFollowerInput, UserFollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<UserFollowCreateWithoutFollowerInput, UserFollowUncheckedCreateWithoutFollowerInput>
  }

  export type UserFollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: UserFollowWhereUniqueInput
    data: XOR<UserFollowUpdateWithoutFollowerInput, UserFollowUncheckedUpdateWithoutFollowerInput>
  }

  export type UserFollowUpdateManyWithWhereWithoutFollowerInput = {
    where: UserFollowScalarWhereInput
    data: XOR<UserFollowUpdateManyMutationInput, UserFollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type UserFollowScalarWhereInput = {
    AND?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
    OR?: UserFollowScalarWhereInput[]
    NOT?: UserFollowScalarWhereInput | UserFollowScalarWhereInput[]
    id?: StringFilter<"UserFollow"> | string
    createdAt?: DateTimeFilter<"UserFollow"> | Date | string
    followerId?: StringFilter<"UserFollow"> | string
    followingId?: StringFilter<"UserFollow"> | string
  }

  export type UserFollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: UserFollowWhereUniqueInput
    update: XOR<UserFollowUpdateWithoutFollowingInput, UserFollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserFollowCreateWithoutFollowingInput, UserFollowUncheckedCreateWithoutFollowingInput>
  }

  export type UserFollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: UserFollowWhereUniqueInput
    data: XOR<UserFollowUpdateWithoutFollowingInput, UserFollowUncheckedUpdateWithoutFollowingInput>
  }

  export type UserFollowUpdateManyWithWhereWithoutFollowingInput = {
    where: UserFollowScalarWhereInput
    data: XOR<UserFollowUpdateManyMutationInput, UserFollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type RFIUpsertWithWhereUniqueWithoutSubmittedByInput = {
    where: RFIWhereUniqueInput
    update: XOR<RFIUpdateWithoutSubmittedByInput, RFIUncheckedUpdateWithoutSubmittedByInput>
    create: XOR<RFICreateWithoutSubmittedByInput, RFIUncheckedCreateWithoutSubmittedByInput>
  }

  export type RFIUpdateWithWhereUniqueWithoutSubmittedByInput = {
    where: RFIWhereUniqueInput
    data: XOR<RFIUpdateWithoutSubmittedByInput, RFIUncheckedUpdateWithoutSubmittedByInput>
  }

  export type RFIUpdateManyWithWhereWithoutSubmittedByInput = {
    where: RFIScalarWhereInput
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyWithoutSubmittedByInput>
  }

  export type RFIUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: RFIWhereUniqueInput
    update: XOR<RFIUpdateWithoutAssignedToInput, RFIUncheckedUpdateWithoutAssignedToInput>
    create: XOR<RFICreateWithoutAssignedToInput, RFIUncheckedCreateWithoutAssignedToInput>
  }

  export type RFIUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: RFIWhereUniqueInput
    data: XOR<RFIUpdateWithoutAssignedToInput, RFIUncheckedUpdateWithoutAssignedToInput>
  }

  export type RFIUpdateManyWithWhereWithoutAssignedToInput = {
    where: RFIScalarWhereInput
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: FloatFilter<"UserAchievement"> | number
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    level?: IntFilter<"UserBadge"> | number
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
  }

  export type XPTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: XPTransactionWhereUniqueInput
    update: XOR<XPTransactionUpdateWithoutUserInput, XPTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<XPTransactionCreateWithoutUserInput, XPTransactionUncheckedCreateWithoutUserInput>
  }

  export type XPTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: XPTransactionWhereUniqueInput
    data: XOR<XPTransactionUpdateWithoutUserInput, XPTransactionUncheckedUpdateWithoutUserInput>
  }

  export type XPTransactionUpdateManyWithWhereWithoutUserInput = {
    where: XPTransactionScalarWhereInput
    data: XOR<XPTransactionUpdateManyMutationInput, XPTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type XPTransactionScalarWhereInput = {
    AND?: XPTransactionScalarWhereInput | XPTransactionScalarWhereInput[]
    OR?: XPTransactionScalarWhereInput[]
    NOT?: XPTransactionScalarWhereInput | XPTransactionScalarWhereInput[]
    id?: StringFilter<"XPTransaction"> | string
    amount?: IntFilter<"XPTransaction"> | number
    reason?: StringFilter<"XPTransaction"> | string
    category?: EnumXPCategoryFilter<"XPTransaction"> | $Enums.XPCategory
    metadata?: JsonNullableFilter<"XPTransaction">
    createdAt?: DateTimeFilter<"XPTransaction"> | Date | string
    userId?: StringFilter<"XPTransaction"> | string
  }

  export type SafetyIncidentUpsertWithWhereUniqueWithoutReporterInput = {
    where: SafetyIncidentWhereUniqueInput
    update: XOR<SafetyIncidentUpdateWithoutReporterInput, SafetyIncidentUncheckedUpdateWithoutReporterInput>
    create: XOR<SafetyIncidentCreateWithoutReporterInput, SafetyIncidentUncheckedCreateWithoutReporterInput>
  }

  export type SafetyIncidentUpdateWithWhereUniqueWithoutReporterInput = {
    where: SafetyIncidentWhereUniqueInput
    data: XOR<SafetyIncidentUpdateWithoutReporterInput, SafetyIncidentUncheckedUpdateWithoutReporterInput>
  }

  export type SafetyIncidentUpdateManyWithWhereWithoutReporterInput = {
    where: SafetyIncidentScalarWhereInput
    data: XOR<SafetyIncidentUpdateManyMutationInput, SafetyIncidentUncheckedUpdateManyWithoutReporterInput>
  }

  export type SafetyIncidentScalarWhereInput = {
    AND?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
    OR?: SafetyIncidentScalarWhereInput[]
    NOT?: SafetyIncidentScalarWhereInput | SafetyIncidentScalarWhereInput[]
    id?: StringFilter<"SafetyIncident"> | string
    title?: StringFilter<"SafetyIncident"> | string
    description?: StringFilter<"SafetyIncident"> | string
    type?: EnumIncidentTypeFilter<"SafetyIncident"> | $Enums.IncidentType
    severity?: EnumIncidentSeverityFilter<"SafetyIncident"> | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFilter<"SafetyIncident"> | $Enums.IncidentStatus
    location?: StringNullableFilter<"SafetyIncident"> | string | null
    coordinates?: JsonNullableFilter<"SafetyIncident">
    injuryCount?: IntFilter<"SafetyIncident"> | number
    nearMiss?: BoolFilter<"SafetyIncident"> | boolean
    regulatoryNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    clientNotificationRequired?: BoolFilter<"SafetyIncident"> | boolean
    rootCause?: StringNullableFilter<"SafetyIncident"> | string | null
    correctiveActions?: StringNullableFilter<"SafetyIncident"> | string | null
    preventiveMeasures?: StringNullableFilter<"SafetyIncident"> | string | null
    investigationComplete?: BoolFilter<"SafetyIncident"> | boolean
    occurredAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    reportedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"SafetyIncident"> | Date | string | null
    reporterId?: StringFilter<"SafetyIncident"> | string
    assignedToId?: StringNullableFilter<"SafetyIncident"> | string | null
    projectId?: StringFilter<"SafetyIncident"> | string
    postId?: StringFilter<"SafetyIncident"> | string
    createdAt?: DateTimeFilter<"SafetyIncident"> | Date | string
    updatedAt?: DateTimeFilter<"SafetyIncident"> | Date | string
  }

  export type SafetyIncidentUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: SafetyIncidentWhereUniqueInput
    update: XOR<SafetyIncidentUpdateWithoutAssignedToInput, SafetyIncidentUncheckedUpdateWithoutAssignedToInput>
    create: XOR<SafetyIncidentCreateWithoutAssignedToInput, SafetyIncidentUncheckedCreateWithoutAssignedToInput>
  }

  export type SafetyIncidentUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: SafetyIncidentWhereUniqueInput
    data: XOR<SafetyIncidentUpdateWithoutAssignedToInput, SafetyIncidentUncheckedUpdateWithoutAssignedToInput>
  }

  export type SafetyIncidentUpdateManyWithWhereWithoutAssignedToInput = {
    where: SafetyIncidentScalarWhereInput
    data: XOR<SafetyIncidentUpdateManyMutationInput, SafetyIncidentUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type PostResolutionUpsertWithWhereUniqueWithoutVerifierInput = {
    where: PostResolutionWhereUniqueInput
    update: XOR<PostResolutionUpdateWithoutVerifierInput, PostResolutionUncheckedUpdateWithoutVerifierInput>
    create: XOR<PostResolutionCreateWithoutVerifierInput, PostResolutionUncheckedCreateWithoutVerifierInput>
  }

  export type PostResolutionUpdateWithWhereUniqueWithoutVerifierInput = {
    where: PostResolutionWhereUniqueInput
    data: XOR<PostResolutionUpdateWithoutVerifierInput, PostResolutionUncheckedUpdateWithoutVerifierInput>
  }

  export type PostResolutionUpdateManyWithWhereWithoutVerifierInput = {
    where: PostResolutionScalarWhereInput
    data: XOR<PostResolutionUpdateManyMutationInput, PostResolutionUncheckedUpdateManyWithoutVerifierInput>
  }

  export type PostResolutionScalarWhereInput = {
    AND?: PostResolutionScalarWhereInput | PostResolutionScalarWhereInput[]
    OR?: PostResolutionScalarWhereInput[]
    NOT?: PostResolutionScalarWhereInput | PostResolutionScalarWhereInput[]
    id?: StringFilter<"PostResolution"> | string
    description?: StringFilter<"PostResolution"> | string
    implementedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"PostResolution"> | Date | string | null
    costImpact?: DecimalNullableFilter<"PostResolution"> | Decimal | DecimalJsLike | number | string | null
    timeImpact?: FloatNullableFilter<"PostResolution"> | number | null
    lessonsLearned?: StringNullableFilter<"PostResolution"> | string | null
    preventiveMeasures?: StringNullableFilter<"PostResolution"> | string | null
    clientNotified?: BoolFilter<"PostResolution"> | boolean
    verifiedById?: StringNullableFilter<"PostResolution"> | string | null
    createdAt?: DateTimeFilter<"PostResolution"> | Date | string
    updatedAt?: DateTimeFilter<"PostResolution"> | Date | string
  }

  export type ApprovalUpsertWithWhereUniqueWithoutApproverInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutApproverInput, ApprovalUncheckedUpdateWithoutApproverInput>
    create: XOR<ApprovalCreateWithoutApproverInput, ApprovalUncheckedCreateWithoutApproverInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutApproverInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutApproverInput, ApprovalUncheckedUpdateWithoutApproverInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutApproverInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutApproverInput>
  }

  export type ApprovalScalarWhereInput = {
    AND?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    OR?: ApprovalScalarWhereInput[]
    NOT?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    id?: StringFilter<"Approval"> | string
    type?: EnumApprovalTypeFilter<"Approval"> | $Enums.ApprovalType
    entityId?: StringFilter<"Approval"> | string
    entityType?: StringFilter<"Approval"> | string
    status?: EnumApprovalStatusFilter<"Approval"> | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFilter<"Approval"> | $Enums.ApprovalPriority
    dueDate?: DateTimeNullableFilter<"Approval"> | Date | string | null
    requestedAt?: DateTimeFilter<"Approval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Approval"> | Date | string | null
    comments?: StringNullableFilter<"Approval"> | string | null
    conditions?: StringNullableListFilter<"Approval">
    requesterId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    projectId?: StringFilter<"Approval"> | string
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
  }

  export type ApprovalUpsertWithWhereUniqueWithoutRequesterInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutRequesterInput, ApprovalUncheckedUpdateWithoutRequesterInput>
    create: XOR<ApprovalCreateWithoutRequesterInput, ApprovalUncheckedCreateWithoutRequesterInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutRequesterInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutRequesterInput, ApprovalUncheckedUpdateWithoutRequesterInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutRequesterInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutRequesterInput>
  }

  export type OrganizationCreateWithoutProjectsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserCreateNestedManyWithoutOrganizationInput
    posts?: PostCreateNestedManyWithoutOrganizationInput
    rfis?: RFICreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    posts?: PostUncheckedCreateNestedManyWithoutOrganizationInput
    rfis?: RFIUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutProjectsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectPhaseCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutPhaseInput
    posts?: PostCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutPhaseInput
    posts?: PostUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseCreateOrConnectWithoutProjectInput = {
    where: ProjectPhaseWhereUniqueInput
    create: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput>
  }

  export type ProjectPhaseCreateManyProjectInputEnvelope = {
    data: ProjectPhaseCreateManyProjectInput | ProjectPhaseCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectMemberCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    user: UserCreateNestedOneWithoutProjectMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    userId: string
  }

  export type ProjectMemberCreateOrConnectWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberCreateManyProjectInputEnvelope = {
    data: ProjectMemberCreateManyProjectInput | ProjectMemberCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    task?: TaskCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId?: string | null
    uploadedById: string
  }

  export type DocumentCreateOrConnectWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput>
  }

  export type DocumentCreateManyProjectInputEnvelope = {
    data: DocumentCreateManyProjectInput | DocumentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    taskId?: string | null
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentCreateManyProjectInputEnvelope = {
    data: CommentCreateManyProjectInput | CommentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogCreateWithoutProjectInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutProjectInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type ActivityLogCreateOrConnectWithoutProjectInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput>
  }

  export type ActivityLogCreateManyProjectInputEnvelope = {
    data: ActivityLogCreateManyProjectInput | ActivityLogCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutProjectInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutProjectInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutProjectInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput>
  }

  export type PostCreateManyProjectInputEnvelope = {
    data: PostCreateManyProjectInput | PostCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type RFICreateWithoutProjectInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedRFIsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedRFIsInput
    post: PostCreateNestedOneWithoutRfisInput
    organization: OrganizationCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateWithoutProjectInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateOrConnectWithoutProjectInput = {
    where: RFIWhereUniqueInput
    create: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput>
  }

  export type RFICreateManyProjectInputEnvelope = {
    data: RFICreateManyProjectInput | RFICreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type SafetyIncidentCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportedIncidentsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedIncidentsInput
    post: PostCreateNestedOneWithoutSafetyIncidentInput
  }

  export type SafetyIncidentUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    assignedToId?: string | null
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateOrConnectWithoutProjectInput = {
    where: SafetyIncidentWhereUniqueInput
    create: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput>
  }

  export type SafetyIncidentCreateManyProjectInputEnvelope = {
    data: SafetyIncidentCreateManyProjectInput | SafetyIncidentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ApprovalCreateWithoutProjectInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutApprovalsReceivedInput
    approver: UserCreateNestedOneWithoutApprovalsGivenInput
  }

  export type ApprovalUncheckedCreateWithoutProjectInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    approverId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutProjectInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput>
  }

  export type ApprovalCreateManyProjectInputEnvelope = {
    data: ApprovalCreateManyProjectInput | ApprovalCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutProjectsInput = {
    update: XOR<OrganizationUpdateWithoutProjectsInput, OrganizationUncheckedUpdateWithoutProjectsInput>
    create: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutProjectsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutProjectsInput, OrganizationUncheckedUpdateWithoutProjectsInput>
  }

  export type OrganizationUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutOrganizationNestedInput
    posts?: PostUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    posts?: PostUncheckedUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ProjectPhaseUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectPhaseWhereUniqueInput
    update: XOR<ProjectPhaseUpdateWithoutProjectInput, ProjectPhaseUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectPhaseCreateWithoutProjectInput, ProjectPhaseUncheckedCreateWithoutProjectInput>
  }

  export type ProjectPhaseUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectPhaseWhereUniqueInput
    data: XOR<ProjectPhaseUpdateWithoutProjectInput, ProjectPhaseUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectPhaseUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectPhaseScalarWhereInput
    data: XOR<ProjectPhaseUpdateManyMutationInput, ProjectPhaseUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectPhaseScalarWhereInput = {
    AND?: ProjectPhaseScalarWhereInput | ProjectPhaseScalarWhereInput[]
    OR?: ProjectPhaseScalarWhereInput[]
    NOT?: ProjectPhaseScalarWhereInput | ProjectPhaseScalarWhereInput[]
    id?: StringFilter<"ProjectPhase"> | string
    name?: StringFilter<"ProjectPhase"> | string
    description?: StringNullableFilter<"ProjectPhase"> | string | null
    status?: EnumPhaseStatusFilter<"ProjectPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProjectPhase"> | Date | string | null
    progress?: FloatFilter<"ProjectPhase"> | number
    order?: IntFilter<"ProjectPhase"> | number
    budgetAllocated?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter<"ProjectPhase"> | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonFilter<"ProjectPhase">
    dependencies?: StringNullableListFilter<"ProjectPhase">
    criticalPath?: BoolFilter<"ProjectPhase"> | boolean
    createdAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectPhase"> | Date | string
    projectId?: StringFilter<"ProjectPhase"> | string
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutProjectInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutProjectInput, DocumentUncheckedUpdateWithoutProjectInput>
    create: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutProjectInput, DocumentUncheckedUpdateWithoutProjectInput>
  }

  export type DocumentUpdateManyWithWhereWithoutProjectInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutProjectInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectInput>
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutProjectInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutProjectInput, ActivityLogUncheckedUpdateWithoutProjectInput>
    create: XOR<ActivityLogCreateWithoutProjectInput, ActivityLogUncheckedCreateWithoutProjectInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutProjectInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutProjectInput, ActivityLogUncheckedUpdateWithoutProjectInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutProjectInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutProjectInput>
  }

  export type PostUpsertWithWhereUniqueWithoutProjectInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutProjectInput, PostUncheckedUpdateWithoutProjectInput>
    create: XOR<PostCreateWithoutProjectInput, PostUncheckedCreateWithoutProjectInput>
  }

  export type PostUpdateWithWhereUniqueWithoutProjectInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutProjectInput, PostUncheckedUpdateWithoutProjectInput>
  }

  export type PostUpdateManyWithWhereWithoutProjectInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutProjectInput>
  }

  export type RFIUpsertWithWhereUniqueWithoutProjectInput = {
    where: RFIWhereUniqueInput
    update: XOR<RFIUpdateWithoutProjectInput, RFIUncheckedUpdateWithoutProjectInput>
    create: XOR<RFICreateWithoutProjectInput, RFIUncheckedCreateWithoutProjectInput>
  }

  export type RFIUpdateWithWhereUniqueWithoutProjectInput = {
    where: RFIWhereUniqueInput
    data: XOR<RFIUpdateWithoutProjectInput, RFIUncheckedUpdateWithoutProjectInput>
  }

  export type RFIUpdateManyWithWhereWithoutProjectInput = {
    where: RFIScalarWhereInput
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyWithoutProjectInput>
  }

  export type SafetyIncidentUpsertWithWhereUniqueWithoutProjectInput = {
    where: SafetyIncidentWhereUniqueInput
    update: XOR<SafetyIncidentUpdateWithoutProjectInput, SafetyIncidentUncheckedUpdateWithoutProjectInput>
    create: XOR<SafetyIncidentCreateWithoutProjectInput, SafetyIncidentUncheckedCreateWithoutProjectInput>
  }

  export type SafetyIncidentUpdateWithWhereUniqueWithoutProjectInput = {
    where: SafetyIncidentWhereUniqueInput
    data: XOR<SafetyIncidentUpdateWithoutProjectInput, SafetyIncidentUncheckedUpdateWithoutProjectInput>
  }

  export type SafetyIncidentUpdateManyWithWhereWithoutProjectInput = {
    where: SafetyIncidentScalarWhereInput
    data: XOR<SafetyIncidentUpdateManyMutationInput, SafetyIncidentUncheckedUpdateManyWithoutProjectInput>
  }

  export type ApprovalUpsertWithWhereUniqueWithoutProjectInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutProjectInput, ApprovalUncheckedUpdateWithoutProjectInput>
    create: XOR<ApprovalCreateWithoutProjectInput, ApprovalUncheckedCreateWithoutProjectInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutProjectInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutProjectInput, ApprovalUncheckedUpdateWithoutProjectInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutProjectInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectCreateWithoutPhasesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutPhasesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutPhasesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutPhasesInput, ProjectUncheckedCreateWithoutPhasesInput>
  }

  export type TaskCreateWithoutPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput>
  }

  export type TaskCreateManyPhaseInputEnvelope = {
    data: TaskCreateManyPhaseInput | TaskCreateManyPhaseInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutPhaseInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutPhaseInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPhaseInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput>
  }

  export type PostCreateManyPhaseInputEnvelope = {
    data: PostCreateManyPhaseInput | PostCreateManyPhaseInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutPhasesInput = {
    update: XOR<ProjectUpdateWithoutPhasesInput, ProjectUncheckedUpdateWithoutPhasesInput>
    create: XOR<ProjectCreateWithoutPhasesInput, ProjectUncheckedCreateWithoutPhasesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutPhasesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutPhasesInput, ProjectUncheckedUpdateWithoutPhasesInput>
  }

  export type ProjectUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutPhaseInput, TaskUncheckedUpdateWithoutPhaseInput>
    create: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutPhaseInput, TaskUncheckedUpdateWithoutPhaseInput>
  }

  export type TaskUpdateManyWithWhereWithoutPhaseInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutPhaseInput>
  }

  export type PostUpsertWithWhereUniqueWithoutPhaseInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutPhaseInput, PostUncheckedUpdateWithoutPhaseInput>
    create: XOR<PostCreateWithoutPhaseInput, PostUncheckedCreateWithoutPhaseInput>
  }

  export type PostUpdateWithWhereUniqueWithoutPhaseInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutPhaseInput, PostUncheckedUpdateWithoutPhaseInput>
  }

  export type PostUpdateManyWithWhereWithoutPhaseInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPhaseInput>
  }

  export type UserCreateWithoutProjectMembersInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutProjectMembersInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutProjectMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
  }

  export type ProjectCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMembersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutProjectMembersInput = {
    update: XOR<UserUpdateWithoutProjectMembersInput, UserUncheckedUpdateWithoutProjectMembersInput>
    create: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectMembersInput, UserUncheckedUpdateWithoutProjectMembersInput>
  }

  export type UserUpdateWithoutProjectMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectUpsertWithoutMembersInput = {
    update: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMembersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type ProjectUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type ProjectPhaseCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutPhasesInput
    posts?: PostCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    posts?: PostUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseCreateOrConnectWithoutTasksInput = {
    where: ProjectPhaseWhereUniqueInput
    create: XOR<ProjectPhaseCreateWithoutTasksInput, ProjectPhaseUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type UserCreateWithoutCreatedTasksInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutCreatedTasksInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutCreatedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
  }

  export type TaskCreateWithoutSubtasksInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSubtasksInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSubtasksInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSubtasksInput, TaskUncheckedCreateWithoutSubtasksInput>
  }

  export type TaskCreateWithoutParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutParentTaskInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput>
  }

  export type TaskCreateManyParentTaskInputEnvelope = {
    data: TaskCreateManyParentTaskInput | TaskCreateManyParentTaskInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutTaskInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutTaskInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutTaskInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentCreateManyTaskInputEnvelope = {
    data: CommentCreateManyTaskInput | CommentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutTaskInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutTaskInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    uploadedById: string
  }

  export type DocumentCreateOrConnectWithoutTaskInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput>
  }

  export type DocumentCreateManyTaskInputEnvelope = {
    data: DocumentCreateManyTaskInput | DocumentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutTaskInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutTaskInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutTaskInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput>
  }

  export type PostCreateManyTaskInputEnvelope = {
    data: PostCreateManyTaskInput | PostCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectPhaseUpsertWithoutTasksInput = {
    update: XOR<ProjectPhaseUpdateWithoutTasksInput, ProjectPhaseUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectPhaseCreateWithoutTasksInput, ProjectPhaseUncheckedCreateWithoutTasksInput>
    where?: ProjectPhaseWhereInput
  }

  export type ProjectPhaseUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectPhaseWhereInput
    data: XOR<ProjectPhaseUpdateWithoutTasksInput, ProjectPhaseUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectPhaseUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutPhasesNestedInput
    posts?: PostUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUpsertWithoutCreatedTasksInput = {
    update: XOR<UserUpdateWithoutCreatedTasksInput, UserUncheckedUpdateWithoutCreatedTasksInput>
    create: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTasksInput, UserUncheckedUpdateWithoutCreatedTasksInput>
  }

  export type UserUpdateWithoutCreatedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type TaskUpsertWithoutSubtasksInput = {
    update: XOR<TaskUpdateWithoutSubtasksInput, TaskUncheckedUpdateWithoutSubtasksInput>
    create: XOR<TaskCreateWithoutSubtasksInput, TaskUncheckedCreateWithoutSubtasksInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutSubtasksInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutSubtasksInput, TaskUncheckedUpdateWithoutSubtasksInput>
  }

  export type TaskUpdateWithoutSubtasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSubtasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutParentTaskInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutParentTaskInput, TaskUncheckedUpdateWithoutParentTaskInput>
    create: XOR<TaskCreateWithoutParentTaskInput, TaskUncheckedCreateWithoutParentTaskInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutParentTaskInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutParentTaskInput, TaskUncheckedUpdateWithoutParentTaskInput>
  }

  export type TaskUpdateManyWithWhereWithoutParentTaskInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutParentTaskInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
  }

  export type CommentUpdateManyWithWhereWithoutTaskInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutTaskInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutTaskInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutTaskInput, DocumentUncheckedUpdateWithoutTaskInput>
    create: XOR<DocumentCreateWithoutTaskInput, DocumentUncheckedCreateWithoutTaskInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutTaskInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutTaskInput, DocumentUncheckedUpdateWithoutTaskInput>
  }

  export type DocumentUpdateManyWithWhereWithoutTaskInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutTaskInput>
  }

  export type PostUpsertWithWhereUniqueWithoutTaskInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutTaskInput, PostUncheckedUpdateWithoutTaskInput>
    create: XOR<PostCreateWithoutTaskInput, PostUncheckedCreateWithoutTaskInput>
  }

  export type PostUpdateWithWhereUniqueWithoutTaskInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutTaskInput, PostUncheckedUpdateWithoutTaskInput>
  }

  export type PostUpdateManyWithWhereWithoutTaskInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type OrganizationCreateWithoutPostsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserCreateNestedManyWithoutOrganizationInput
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    rfis?: RFICreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    rfis?: RFIUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutPostsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPostsInput, OrganizationUncheckedCreateWithoutPostsInput>
  }

  export type ProjectCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutPostsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutPostsInput, ProjectUncheckedCreateWithoutPostsInput>
  }

  export type ProjectPhaseCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutPhasesInput
    tasks?: TaskCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    tasks?: TaskUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ProjectPhaseCreateOrConnectWithoutPostsInput = {
    where: ProjectPhaseWhereUniqueInput
    create: XOR<ProjectPhaseCreateWithoutPostsInput, ProjectPhaseUncheckedCreateWithoutPostsInput>
  }

  export type TaskCreateWithoutPostsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutPostsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutPostsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutPostsInput, TaskUncheckedCreateWithoutPostsInput>
  }

  export type PostAttachmentCreateWithoutPostInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    markups?: PostMarkupCreateNestedManyWithoutAttachmentInput
  }

  export type PostAttachmentUncheckedCreateWithoutPostInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    markups?: PostMarkupUncheckedCreateNestedManyWithoutAttachmentInput
  }

  export type PostAttachmentCreateOrConnectWithoutPostInput = {
    where: PostAttachmentWhereUniqueInput
    create: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput>
  }

  export type PostAttachmentCreateManyPostInputEnvelope = {
    data: PostAttachmentCreateManyPostInput | PostAttachmentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostMarkupCreateWithoutPostInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachment: PostAttachmentCreateNestedOneWithoutMarkupsInput
  }

  export type PostMarkupUncheckedCreateWithoutPostInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachmentId: string
  }

  export type PostMarkupCreateOrConnectWithoutPostInput = {
    where: PostMarkupWhereUniqueInput
    create: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput>
  }

  export type PostMarkupCreateManyPostInputEnvelope = {
    data: PostMarkupCreateManyPostInput | PostMarkupCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostBimElementCreateWithoutPostInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostBimElementUncheckedCreateWithoutPostInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostBimElementCreateOrConnectWithoutPostInput = {
    where: PostBimElementWhereUniqueInput
    create: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput>
  }

  export type PostBimElementCreateManyPostInputEnvelope = {
    data: PostBimElementCreateManyPostInput | PostBimElementCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostLikeCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostLikesInput
  }

  export type PostLikeUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type PostLikeCreateOrConnectWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeCreateManyPostInputEnvelope = {
    data: PostLikeCreateManyPostInput | PostLikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostCommentCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostCommentsInput
    parentComment?: PostCommentCreateNestedOneWithoutRepliesInput
    replies?: PostCommentCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentUncheckedCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    parentCommentId?: string | null
    replies?: PostCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentCreateOrConnectWithoutPostInput = {
    where: PostCommentWhereUniqueInput
    create: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput>
  }

  export type PostCommentCreateManyPostInputEnvelope = {
    data: PostCommentCreateManyPostInput | PostCommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostShareCreateWithoutPostInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostSharesInput
  }

  export type PostShareUncheckedCreateWithoutPostInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type PostShareCreateOrConnectWithoutPostInput = {
    where: PostShareWhereUniqueInput
    create: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput>
  }

  export type PostShareCreateManyPostInputEnvelope = {
    data: PostShareCreateManyPostInput | PostShareCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostMentionCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    mentionedUser: UserCreateNestedOneWithoutMentionsInput
    mentioningUser: UserCreateNestedOneWithoutMentionedByInput
  }

  export type PostMentionUncheckedCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    mentioningUserId: string
  }

  export type PostMentionCreateOrConnectWithoutPostInput = {
    where: PostMentionWhereUniqueInput
    create: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput>
  }

  export type PostMentionCreateManyPostInputEnvelope = {
    data: PostMentionCreateManyPostInput | PostMentionCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostHashtagCreateWithoutPostInput = {
    id?: string
    tag: string
  }

  export type PostHashtagUncheckedCreateWithoutPostInput = {
    id?: string
    tag: string
  }

  export type PostHashtagCreateOrConnectWithoutPostInput = {
    where: PostHashtagWhereUniqueInput
    create: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput>
  }

  export type PostHashtagCreateManyPostInputEnvelope = {
    data: PostHashtagCreateManyPostInput | PostHashtagCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type RFICreateWithoutPostInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedRFIsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedRFIsInput
    project: ProjectCreateNestedOneWithoutRfisInput
    organization: OrganizationCreateNestedOneWithoutRfisInput
  }

  export type RFIUncheckedCreateWithoutPostInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateOrConnectWithoutPostInput = {
    where: RFIWhereUniqueInput
    create: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput>
  }

  export type RFICreateManyPostInputEnvelope = {
    data: RFICreateManyPostInput | RFICreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type SafetyIncidentCreateWithoutPostInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportedIncidentsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedIncidentsInput
    project: ProjectCreateNestedOneWithoutSafetyIncidentsInput
  }

  export type SafetyIncidentUncheckedCreateWithoutPostInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    assignedToId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateOrConnectWithoutPostInput = {
    where: SafetyIncidentWhereUniqueInput
    create: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
  }

  export type PostResolutionCreateWithoutPostsInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    verifier?: UserCreateNestedOneWithoutVerifiedResolutionsInput
  }

  export type PostResolutionUncheckedCreateWithoutPostsInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    verifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostResolutionCreateOrConnectWithoutPostsInput = {
    where: PostResolutionWhereUniqueInput
    create: XOR<PostResolutionCreateWithoutPostsInput, PostResolutionUncheckedCreateWithoutPostsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type OrganizationUpsertWithoutPostsInput = {
    update: XOR<OrganizationUpdateWithoutPostsInput, OrganizationUncheckedUpdateWithoutPostsInput>
    create: XOR<OrganizationCreateWithoutPostsInput, OrganizationUncheckedCreateWithoutPostsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutPostsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutPostsInput, OrganizationUncheckedUpdateWithoutPostsInput>
  }

  export type OrganizationUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ProjectUpsertWithoutPostsInput = {
    update: XOR<ProjectUpdateWithoutPostsInput, ProjectUncheckedUpdateWithoutPostsInput>
    create: XOR<ProjectCreateWithoutPostsInput, ProjectUncheckedCreateWithoutPostsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutPostsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutPostsInput, ProjectUncheckedUpdateWithoutPostsInput>
  }

  export type ProjectUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectPhaseUpsertWithoutPostsInput = {
    update: XOR<ProjectPhaseUpdateWithoutPostsInput, ProjectPhaseUncheckedUpdateWithoutPostsInput>
    create: XOR<ProjectPhaseCreateWithoutPostsInput, ProjectPhaseUncheckedCreateWithoutPostsInput>
    where?: ProjectPhaseWhereInput
  }

  export type ProjectPhaseUpdateToOneWithWhereWithoutPostsInput = {
    where?: ProjectPhaseWhereInput
    data: XOR<ProjectPhaseUpdateWithoutPostsInput, ProjectPhaseUncheckedUpdateWithoutPostsInput>
  }

  export type ProjectPhaseUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutPhasesNestedInput
    tasks?: TaskUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type TaskUpsertWithoutPostsInput = {
    update: XOR<TaskUpdateWithoutPostsInput, TaskUncheckedUpdateWithoutPostsInput>
    create: XOR<TaskCreateWithoutPostsInput, TaskUncheckedCreateWithoutPostsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutPostsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutPostsInput, TaskUncheckedUpdateWithoutPostsInput>
  }

  export type TaskUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type PostAttachmentUpsertWithWhereUniqueWithoutPostInput = {
    where: PostAttachmentWhereUniqueInput
    update: XOR<PostAttachmentUpdateWithoutPostInput, PostAttachmentUncheckedUpdateWithoutPostInput>
    create: XOR<PostAttachmentCreateWithoutPostInput, PostAttachmentUncheckedCreateWithoutPostInput>
  }

  export type PostAttachmentUpdateWithWhereUniqueWithoutPostInput = {
    where: PostAttachmentWhereUniqueInput
    data: XOR<PostAttachmentUpdateWithoutPostInput, PostAttachmentUncheckedUpdateWithoutPostInput>
  }

  export type PostAttachmentUpdateManyWithWhereWithoutPostInput = {
    where: PostAttachmentScalarWhereInput
    data: XOR<PostAttachmentUpdateManyMutationInput, PostAttachmentUncheckedUpdateManyWithoutPostInput>
  }

  export type PostAttachmentScalarWhereInput = {
    AND?: PostAttachmentScalarWhereInput | PostAttachmentScalarWhereInput[]
    OR?: PostAttachmentScalarWhereInput[]
    NOT?: PostAttachmentScalarWhereInput | PostAttachmentScalarWhereInput[]
    id?: StringFilter<"PostAttachment"> | string
    type?: EnumAttachmentTypeFilter<"PostAttachment"> | $Enums.AttachmentType
    fileUrl?: StringFilter<"PostAttachment"> | string
    fileName?: StringFilter<"PostAttachment"> | string
    fileSize?: IntFilter<"PostAttachment"> | number
    mimeType?: StringFilter<"PostAttachment"> | string
    metadata?: JsonNullableFilter<"PostAttachment">
    order?: IntFilter<"PostAttachment"> | number
    isConfidential?: BoolFilter<"PostAttachment"> | boolean
    accessLevel?: EnumAccessLevelFilter<"PostAttachment"> | $Enums.AccessLevel
    postId?: StringFilter<"PostAttachment"> | string
  }

  export type PostMarkupUpsertWithWhereUniqueWithoutPostInput = {
    where: PostMarkupWhereUniqueInput
    update: XOR<PostMarkupUpdateWithoutPostInput, PostMarkupUncheckedUpdateWithoutPostInput>
    create: XOR<PostMarkupCreateWithoutPostInput, PostMarkupUncheckedCreateWithoutPostInput>
  }

  export type PostMarkupUpdateWithWhereUniqueWithoutPostInput = {
    where: PostMarkupWhereUniqueInput
    data: XOR<PostMarkupUpdateWithoutPostInput, PostMarkupUncheckedUpdateWithoutPostInput>
  }

  export type PostMarkupUpdateManyWithWhereWithoutPostInput = {
    where: PostMarkupScalarWhereInput
    data: XOR<PostMarkupUpdateManyMutationInput, PostMarkupUncheckedUpdateManyWithoutPostInput>
  }

  export type PostMarkupScalarWhereInput = {
    AND?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
    OR?: PostMarkupScalarWhereInput[]
    NOT?: PostMarkupScalarWhereInput | PostMarkupScalarWhereInput[]
    id?: StringFilter<"PostMarkup"> | string
    type?: EnumMarkupTypeFilter<"PostMarkup"> | $Enums.MarkupType
    coordinates?: JsonFilter<"PostMarkup">
    content?: StringNullableFilter<"PostMarkup"> | string | null
    color?: StringFilter<"PostMarkup"> | string
    strokeWidth?: FloatFilter<"PostMarkup"> | number
    opacity?: FloatFilter<"PostMarkup"> | number
    attachmentId?: StringFilter<"PostMarkup"> | string
    postId?: StringFilter<"PostMarkup"> | string
  }

  export type PostBimElementUpsertWithWhereUniqueWithoutPostInput = {
    where: PostBimElementWhereUniqueInput
    update: XOR<PostBimElementUpdateWithoutPostInput, PostBimElementUncheckedUpdateWithoutPostInput>
    create: XOR<PostBimElementCreateWithoutPostInput, PostBimElementUncheckedCreateWithoutPostInput>
  }

  export type PostBimElementUpdateWithWhereUniqueWithoutPostInput = {
    where: PostBimElementWhereUniqueInput
    data: XOR<PostBimElementUpdateWithoutPostInput, PostBimElementUncheckedUpdateWithoutPostInput>
  }

  export type PostBimElementUpdateManyWithWhereWithoutPostInput = {
    where: PostBimElementScalarWhereInput
    data: XOR<PostBimElementUpdateManyMutationInput, PostBimElementUncheckedUpdateManyWithoutPostInput>
  }

  export type PostBimElementScalarWhereInput = {
    AND?: PostBimElementScalarWhereInput | PostBimElementScalarWhereInput[]
    OR?: PostBimElementScalarWhereInput[]
    NOT?: PostBimElementScalarWhereInput | PostBimElementScalarWhereInput[]
    id?: StringFilter<"PostBimElement"> | string
    elementId?: StringFilter<"PostBimElement"> | string
    elementType?: StringFilter<"PostBimElement"> | string
    elementName?: StringNullableFilter<"PostBimElement"> | string | null
    discipline?: EnumBimDisciplineFilter<"PostBimElement"> | $Enums.BimDiscipline
    properties?: JsonNullableFilter<"PostBimElement">
    postId?: StringFilter<"PostBimElement"> | string
  }

  export type PostLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutPostInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutPostInput>
  }

  export type PostCommentUpsertWithWhereUniqueWithoutPostInput = {
    where: PostCommentWhereUniqueInput
    update: XOR<PostCommentUpdateWithoutPostInput, PostCommentUncheckedUpdateWithoutPostInput>
    create: XOR<PostCommentCreateWithoutPostInput, PostCommentUncheckedCreateWithoutPostInput>
  }

  export type PostCommentUpdateWithWhereUniqueWithoutPostInput = {
    where: PostCommentWhereUniqueInput
    data: XOR<PostCommentUpdateWithoutPostInput, PostCommentUncheckedUpdateWithoutPostInput>
  }

  export type PostCommentUpdateManyWithWhereWithoutPostInput = {
    where: PostCommentScalarWhereInput
    data: XOR<PostCommentUpdateManyMutationInput, PostCommentUncheckedUpdateManyWithoutPostInput>
  }

  export type PostShareUpsertWithWhereUniqueWithoutPostInput = {
    where: PostShareWhereUniqueInput
    update: XOR<PostShareUpdateWithoutPostInput, PostShareUncheckedUpdateWithoutPostInput>
    create: XOR<PostShareCreateWithoutPostInput, PostShareUncheckedCreateWithoutPostInput>
  }

  export type PostShareUpdateWithWhereUniqueWithoutPostInput = {
    where: PostShareWhereUniqueInput
    data: XOR<PostShareUpdateWithoutPostInput, PostShareUncheckedUpdateWithoutPostInput>
  }

  export type PostShareUpdateManyWithWhereWithoutPostInput = {
    where: PostShareScalarWhereInput
    data: XOR<PostShareUpdateManyMutationInput, PostShareUncheckedUpdateManyWithoutPostInput>
  }

  export type PostMentionUpsertWithWhereUniqueWithoutPostInput = {
    where: PostMentionWhereUniqueInput
    update: XOR<PostMentionUpdateWithoutPostInput, PostMentionUncheckedUpdateWithoutPostInput>
    create: XOR<PostMentionCreateWithoutPostInput, PostMentionUncheckedCreateWithoutPostInput>
  }

  export type PostMentionUpdateWithWhereUniqueWithoutPostInput = {
    where: PostMentionWhereUniqueInput
    data: XOR<PostMentionUpdateWithoutPostInput, PostMentionUncheckedUpdateWithoutPostInput>
  }

  export type PostMentionUpdateManyWithWhereWithoutPostInput = {
    where: PostMentionScalarWhereInput
    data: XOR<PostMentionUpdateManyMutationInput, PostMentionUncheckedUpdateManyWithoutPostInput>
  }

  export type PostHashtagUpsertWithWhereUniqueWithoutPostInput = {
    where: PostHashtagWhereUniqueInput
    update: XOR<PostHashtagUpdateWithoutPostInput, PostHashtagUncheckedUpdateWithoutPostInput>
    create: XOR<PostHashtagCreateWithoutPostInput, PostHashtagUncheckedCreateWithoutPostInput>
  }

  export type PostHashtagUpdateWithWhereUniqueWithoutPostInput = {
    where: PostHashtagWhereUniqueInput
    data: XOR<PostHashtagUpdateWithoutPostInput, PostHashtagUncheckedUpdateWithoutPostInput>
  }

  export type PostHashtagUpdateManyWithWhereWithoutPostInput = {
    where: PostHashtagScalarWhereInput
    data: XOR<PostHashtagUpdateManyMutationInput, PostHashtagUncheckedUpdateManyWithoutPostInput>
  }

  export type PostHashtagScalarWhereInput = {
    AND?: PostHashtagScalarWhereInput | PostHashtagScalarWhereInput[]
    OR?: PostHashtagScalarWhereInput[]
    NOT?: PostHashtagScalarWhereInput | PostHashtagScalarWhereInput[]
    id?: StringFilter<"PostHashtag"> | string
    tag?: StringFilter<"PostHashtag"> | string
    postId?: StringFilter<"PostHashtag"> | string
  }

  export type RFIUpsertWithWhereUniqueWithoutPostInput = {
    where: RFIWhereUniqueInput
    update: XOR<RFIUpdateWithoutPostInput, RFIUncheckedUpdateWithoutPostInput>
    create: XOR<RFICreateWithoutPostInput, RFIUncheckedCreateWithoutPostInput>
  }

  export type RFIUpdateWithWhereUniqueWithoutPostInput = {
    where: RFIWhereUniqueInput
    data: XOR<RFIUpdateWithoutPostInput, RFIUncheckedUpdateWithoutPostInput>
  }

  export type RFIUpdateManyWithWhereWithoutPostInput = {
    where: RFIScalarWhereInput
    data: XOR<RFIUpdateManyMutationInput, RFIUncheckedUpdateManyWithoutPostInput>
  }

  export type SafetyIncidentUpsertWithoutPostInput = {
    update: XOR<SafetyIncidentUpdateWithoutPostInput, SafetyIncidentUncheckedUpdateWithoutPostInput>
    create: XOR<SafetyIncidentCreateWithoutPostInput, SafetyIncidentUncheckedCreateWithoutPostInput>
    where?: SafetyIncidentWhereInput
  }

  export type SafetyIncidentUpdateToOneWithWhereWithoutPostInput = {
    where?: SafetyIncidentWhereInput
    data: XOR<SafetyIncidentUpdateWithoutPostInput, SafetyIncidentUncheckedUpdateWithoutPostInput>
  }

  export type SafetyIncidentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportedIncidentsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedIncidentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutSafetyIncidentsNestedInput
  }

  export type SafetyIncidentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostResolutionUpsertWithoutPostsInput = {
    update: XOR<PostResolutionUpdateWithoutPostsInput, PostResolutionUncheckedUpdateWithoutPostsInput>
    create: XOR<PostResolutionCreateWithoutPostsInput, PostResolutionUncheckedCreateWithoutPostsInput>
    where?: PostResolutionWhereInput
  }

  export type PostResolutionUpdateToOneWithWhereWithoutPostsInput = {
    where?: PostResolutionWhereInput
    data: XOR<PostResolutionUpdateWithoutPostsInput, PostResolutionUncheckedUpdateWithoutPostsInput>
  }

  export type PostResolutionUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifier?: UserUpdateOneWithoutVerifiedResolutionsNestedInput
  }

  export type PostResolutionUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateWithoutAttachmentsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAttachmentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAttachmentsInput, PostUncheckedCreateWithoutAttachmentsInput>
  }

  export type PostMarkupCreateWithoutAttachmentInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    post: PostCreateNestedOneWithoutMarkupsInput
  }

  export type PostMarkupUncheckedCreateWithoutAttachmentInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    postId: string
  }

  export type PostMarkupCreateOrConnectWithoutAttachmentInput = {
    where: PostMarkupWhereUniqueInput
    create: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput>
  }

  export type PostMarkupCreateManyAttachmentInputEnvelope = {
    data: PostMarkupCreateManyAttachmentInput | PostMarkupCreateManyAttachmentInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutAttachmentsInput = {
    update: XOR<PostUpdateWithoutAttachmentsInput, PostUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<PostCreateWithoutAttachmentsInput, PostUncheckedCreateWithoutAttachmentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutAttachmentsInput, PostUncheckedUpdateWithoutAttachmentsInput>
  }

  export type PostUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostMarkupUpsertWithWhereUniqueWithoutAttachmentInput = {
    where: PostMarkupWhereUniqueInput
    update: XOR<PostMarkupUpdateWithoutAttachmentInput, PostMarkupUncheckedUpdateWithoutAttachmentInput>
    create: XOR<PostMarkupCreateWithoutAttachmentInput, PostMarkupUncheckedCreateWithoutAttachmentInput>
  }

  export type PostMarkupUpdateWithWhereUniqueWithoutAttachmentInput = {
    where: PostMarkupWhereUniqueInput
    data: XOR<PostMarkupUpdateWithoutAttachmentInput, PostMarkupUncheckedUpdateWithoutAttachmentInput>
  }

  export type PostMarkupUpdateManyWithWhereWithoutAttachmentInput = {
    where: PostMarkupScalarWhereInput
    data: XOR<PostMarkupUpdateManyMutationInput, PostMarkupUncheckedUpdateManyWithoutAttachmentInput>
  }

  export type PostAttachmentCreateWithoutMarkupsInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    post: PostCreateNestedOneWithoutAttachmentsInput
  }

  export type PostAttachmentUncheckedCreateWithoutMarkupsInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
    postId: string
  }

  export type PostAttachmentCreateOrConnectWithoutMarkupsInput = {
    where: PostAttachmentWhereUniqueInput
    create: XOR<PostAttachmentCreateWithoutMarkupsInput, PostAttachmentUncheckedCreateWithoutMarkupsInput>
  }

  export type PostCreateWithoutMarkupsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutMarkupsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutMarkupsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutMarkupsInput, PostUncheckedCreateWithoutMarkupsInput>
  }

  export type PostAttachmentUpsertWithoutMarkupsInput = {
    update: XOR<PostAttachmentUpdateWithoutMarkupsInput, PostAttachmentUncheckedUpdateWithoutMarkupsInput>
    create: XOR<PostAttachmentCreateWithoutMarkupsInput, PostAttachmentUncheckedCreateWithoutMarkupsInput>
    where?: PostAttachmentWhereInput
  }

  export type PostAttachmentUpdateToOneWithWhereWithoutMarkupsInput = {
    where?: PostAttachmentWhereInput
    data: XOR<PostAttachmentUpdateWithoutMarkupsInput, PostAttachmentUncheckedUpdateWithoutMarkupsInput>
  }

  export type PostAttachmentUpdateWithoutMarkupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    post?: PostUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type PostAttachmentUncheckedUpdateWithoutMarkupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostUpsertWithoutMarkupsInput = {
    update: XOR<PostUpdateWithoutMarkupsInput, PostUncheckedUpdateWithoutMarkupsInput>
    create: XOR<PostCreateWithoutMarkupsInput, PostUncheckedCreateWithoutMarkupsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutMarkupsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutMarkupsInput, PostUncheckedUpdateWithoutMarkupsInput>
  }

  export type PostUpdateWithoutMarkupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutMarkupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostCreateWithoutBimElementsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutBimElementsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutBimElementsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutBimElementsInput, PostUncheckedCreateWithoutBimElementsInput>
  }

  export type PostUpsertWithoutBimElementsInput = {
    update: XOR<PostUpdateWithoutBimElementsInput, PostUncheckedUpdateWithoutBimElementsInput>
    create: XOR<PostCreateWithoutBimElementsInput, PostUncheckedCreateWithoutBimElementsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutBimElementsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutBimElementsInput, PostUncheckedUpdateWithoutBimElementsInput>
  }

  export type PostUpdateWithoutBimElementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutBimElementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type UserCreateWithoutPostLikesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutPostLikesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutPostLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
  }

  export type PostCreateWithoutLikesInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutPostLikesInput = {
    update: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type UserUpdateWithoutPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type UserCreateWithoutPostCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutPostCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutPostCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostCommentsInput, UserUncheckedCreateWithoutPostCommentsInput>
  }

  export type PostCreateWithoutCommentsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type PostCommentCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    parentComment?: PostCommentCreateNestedOneWithoutRepliesInput
  }

  export type PostCommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    postId: string
    parentCommentId?: string | null
  }

  export type PostCommentCreateOrConnectWithoutRepliesInput = {
    where: PostCommentWhereUniqueInput
    create: XOR<PostCommentCreateWithoutRepliesInput, PostCommentUncheckedCreateWithoutRepliesInput>
  }

  export type PostCommentCreateWithoutParentCommentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    replies?: PostCommentCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentUncheckedCreateWithoutParentCommentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    postId: string
    replies?: PostCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type PostCommentCreateOrConnectWithoutParentCommentInput = {
    where: PostCommentWhereUniqueInput
    create: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput>
  }

  export type PostCommentCreateManyParentCommentInputEnvelope = {
    data: PostCommentCreateManyParentCommentInput | PostCommentCreateManyParentCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostCommentsInput = {
    update: XOR<UserUpdateWithoutPostCommentsInput, UserUncheckedUpdateWithoutPostCommentsInput>
    create: XOR<UserCreateWithoutPostCommentsInput, UserUncheckedCreateWithoutPostCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostCommentsInput, UserUncheckedUpdateWithoutPostCommentsInput>
  }

  export type UserUpdateWithoutPostCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutPostCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostCommentUpsertWithoutRepliesInput = {
    update: XOR<PostCommentUpdateWithoutRepliesInput, PostCommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<PostCommentCreateWithoutRepliesInput, PostCommentUncheckedCreateWithoutRepliesInput>
    where?: PostCommentWhereInput
  }

  export type PostCommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: PostCommentWhereInput
    data: XOR<PostCommentUpdateWithoutRepliesInput, PostCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type PostCommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: PostCommentUpdateOneWithoutRepliesNestedInput
  }

  export type PostCommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostCommentUpsertWithWhereUniqueWithoutParentCommentInput = {
    where: PostCommentWhereUniqueInput
    update: XOR<PostCommentUpdateWithoutParentCommentInput, PostCommentUncheckedUpdateWithoutParentCommentInput>
    create: XOR<PostCommentCreateWithoutParentCommentInput, PostCommentUncheckedCreateWithoutParentCommentInput>
  }

  export type PostCommentUpdateWithWhereUniqueWithoutParentCommentInput = {
    where: PostCommentWhereUniqueInput
    data: XOR<PostCommentUpdateWithoutParentCommentInput, PostCommentUncheckedUpdateWithoutParentCommentInput>
  }

  export type PostCommentUpdateManyWithWhereWithoutParentCommentInput = {
    where: PostCommentScalarWhereInput
    data: XOR<PostCommentUpdateManyMutationInput, PostCommentUncheckedUpdateManyWithoutParentCommentInput>
  }

  export type UserCreateWithoutPostSharesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutPostSharesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutPostSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostSharesInput, UserUncheckedCreateWithoutPostSharesInput>
  }

  export type PostCreateWithoutSharesInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutSharesInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutSharesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
  }

  export type UserUpsertWithoutPostSharesInput = {
    update: XOR<UserUpdateWithoutPostSharesInput, UserUncheckedUpdateWithoutPostSharesInput>
    create: XOR<UserCreateWithoutPostSharesInput, UserUncheckedCreateWithoutPostSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostSharesInput, UserUncheckedUpdateWithoutPostSharesInput>
  }

  export type UserUpdateWithoutPostSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutPostSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithoutSharesInput = {
    update: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutSharesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>
  }

  export type PostUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type UserCreateWithoutMentionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutMentionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutMentionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
  }

  export type UserCreateWithoutMentionedByInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutMentionedByInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutMentionedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMentionedByInput, UserUncheckedCreateWithoutMentionedByInput>
  }

  export type PostCreateWithoutMentionsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutMentionsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutMentionsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
  }

  export type UserUpsertWithoutMentionsInput = {
    update: XOR<UserUpdateWithoutMentionsInput, UserUncheckedUpdateWithoutMentionsInput>
    create: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMentionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMentionsInput, UserUncheckedUpdateWithoutMentionsInput>
  }

  export type UserUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUpsertWithoutMentionedByInput = {
    update: XOR<UserUpdateWithoutMentionedByInput, UserUncheckedUpdateWithoutMentionedByInput>
    create: XOR<UserCreateWithoutMentionedByInput, UserUncheckedCreateWithoutMentionedByInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMentionedByInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMentionedByInput, UserUncheckedUpdateWithoutMentionedByInput>
  }

  export type UserUpdateWithoutMentionedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutMentionedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithoutMentionsInput = {
    update: XOR<PostUpdateWithoutMentionsInput, PostUncheckedUpdateWithoutMentionsInput>
    create: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutMentionsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutMentionsInput, PostUncheckedUpdateWithoutMentionsInput>
  }

  export type PostUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostCreateWithoutHashtagsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutHashtagsInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutHashtagsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutHashtagsInput, PostUncheckedCreateWithoutHashtagsInput>
  }

  export type PostUpsertWithoutHashtagsInput = {
    update: XOR<PostUpdateWithoutHashtagsInput, PostUncheckedUpdateWithoutHashtagsInput>
    create: XOR<PostCreateWithoutHashtagsInput, PostUncheckedCreateWithoutHashtagsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutHashtagsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutHashtagsInput, PostUncheckedUpdateWithoutHashtagsInput>
  }

  export type PostUpdateWithoutHashtagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutHashtagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type UserCreateWithoutVerifiedResolutionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutVerifiedResolutionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutVerifiedResolutionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerifiedResolutionsInput, UserUncheckedCreateWithoutVerifiedResolutionsInput>
  }

  export type PostCreateWithoutResolutionInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutResolutionInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutResolutionInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput>
  }

  export type PostCreateManyResolutionInputEnvelope = {
    data: PostCreateManyResolutionInput | PostCreateManyResolutionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVerifiedResolutionsInput = {
    update: XOR<UserUpdateWithoutVerifiedResolutionsInput, UserUncheckedUpdateWithoutVerifiedResolutionsInput>
    create: XOR<UserCreateWithoutVerifiedResolutionsInput, UserUncheckedCreateWithoutVerifiedResolutionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerifiedResolutionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerifiedResolutionsInput, UserUncheckedUpdateWithoutVerifiedResolutionsInput>
  }

  export type UserUpdateWithoutVerifiedResolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutVerifiedResolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutResolutionInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutResolutionInput, PostUncheckedUpdateWithoutResolutionInput>
    create: XOR<PostCreateWithoutResolutionInput, PostUncheckedCreateWithoutResolutionInput>
  }

  export type PostUpdateWithWhereUniqueWithoutResolutionInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutResolutionInput, PostUncheckedUpdateWithoutResolutionInput>
  }

  export type PostUpdateManyWithWhereWithoutResolutionInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutResolutionInput>
  }

  export type UserCreateWithoutSubmittedRFIsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutSubmittedRFIsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutSubmittedRFIsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmittedRFIsInput, UserUncheckedCreateWithoutSubmittedRFIsInput>
  }

  export type UserCreateWithoutAssignedRFIsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutAssignedRFIsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutAssignedRFIsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedRFIsInput, UserUncheckedCreateWithoutAssignedRFIsInput>
  }

  export type PostCreateWithoutRfisInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentCreateNestedOneWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutRfisInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    safetyIncident?: SafetyIncidentUncheckedCreateNestedOneWithoutPostInput
  }

  export type PostCreateOrConnectWithoutRfisInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutRfisInput, PostUncheckedCreateWithoutRfisInput>
  }

  export type ProjectCreateWithoutRfisInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutRfisInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutRfisInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutRfisInput, ProjectUncheckedCreateWithoutRfisInput>
  }

  export type OrganizationCreateWithoutRfisInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserCreateNestedManyWithoutOrganizationInput
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    posts?: PostCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutRfisInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionTier?: string
    maxProjects?: number
    maxUsersPerProject?: number
    apiRateLimit?: number
    storageLimit?: number
    customBranding?: boolean
    ssoEnabled?: boolean
    auditRetention?: number
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    posts?: PostUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutRfisInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutRfisInput, OrganizationUncheckedCreateWithoutRfisInput>
  }

  export type UserUpsertWithoutSubmittedRFIsInput = {
    update: XOR<UserUpdateWithoutSubmittedRFIsInput, UserUncheckedUpdateWithoutSubmittedRFIsInput>
    create: XOR<UserCreateWithoutSubmittedRFIsInput, UserUncheckedCreateWithoutSubmittedRFIsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmittedRFIsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmittedRFIsInput, UserUncheckedUpdateWithoutSubmittedRFIsInput>
  }

  export type UserUpdateWithoutSubmittedRFIsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmittedRFIsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUpsertWithoutAssignedRFIsInput = {
    update: XOR<UserUpdateWithoutAssignedRFIsInput, UserUncheckedUpdateWithoutAssignedRFIsInput>
    create: XOR<UserCreateWithoutAssignedRFIsInput, UserUncheckedCreateWithoutAssignedRFIsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedRFIsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedRFIsInput, UserUncheckedUpdateWithoutAssignedRFIsInput>
  }

  export type UserUpdateWithoutAssignedRFIsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedRFIsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type PostUpsertWithoutRfisInput = {
    update: XOR<PostUpdateWithoutRfisInput, PostUncheckedUpdateWithoutRfisInput>
    create: XOR<PostCreateWithoutRfisInput, PostUncheckedCreateWithoutRfisInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutRfisInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutRfisInput, PostUncheckedUpdateWithoutRfisInput>
  }

  export type PostUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type ProjectUpsertWithoutRfisInput = {
    update: XOR<ProjectUpdateWithoutRfisInput, ProjectUncheckedUpdateWithoutRfisInput>
    create: XOR<ProjectCreateWithoutRfisInput, ProjectUncheckedCreateWithoutRfisInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutRfisInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutRfisInput, ProjectUncheckedUpdateWithoutRfisInput>
  }

  export type ProjectUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type OrganizationUpsertWithoutRfisInput = {
    update: XOR<OrganizationUpdateWithoutRfisInput, OrganizationUncheckedUpdateWithoutRfisInput>
    create: XOR<OrganizationCreateWithoutRfisInput, OrganizationUncheckedCreateWithoutRfisInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutRfisInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutRfisInput, OrganizationUncheckedUpdateWithoutRfisInput>
  }

  export type OrganizationUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    posts?: PostUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutRfisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    maxProjects?: IntFieldUpdateOperationsInput | number
    maxUsersPerProject?: IntFieldUpdateOperationsInput | number
    apiRateLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    customBranding?: BoolFieldUpdateOperationsInput | boolean
    ssoEnabled?: BoolFieldUpdateOperationsInput | boolean
    auditRetention?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    posts?: PostUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserCreateWithoutApprovalsReceivedInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutApprovalsReceivedInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutApprovalsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalsReceivedInput, UserUncheckedCreateWithoutApprovalsReceivedInput>
  }

  export type UserCreateWithoutApprovalsGivenInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutApprovalsGivenInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutApprovalsGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalsGivenInput, UserUncheckedCreateWithoutApprovalsGivenInput>
  }

  export type ProjectCreateWithoutApprovalsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutApprovalsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutApprovalsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutApprovalsInput, ProjectUncheckedCreateWithoutApprovalsInput>
  }

  export type UserUpsertWithoutApprovalsReceivedInput = {
    update: XOR<UserUpdateWithoutApprovalsReceivedInput, UserUncheckedUpdateWithoutApprovalsReceivedInput>
    create: XOR<UserCreateWithoutApprovalsReceivedInput, UserUncheckedCreateWithoutApprovalsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalsReceivedInput, UserUncheckedUpdateWithoutApprovalsReceivedInput>
  }

  export type UserUpdateWithoutApprovalsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserUpsertWithoutApprovalsGivenInput = {
    update: XOR<UserUpdateWithoutApprovalsGivenInput, UserUncheckedUpdateWithoutApprovalsGivenInput>
    create: XOR<UserCreateWithoutApprovalsGivenInput, UserUncheckedCreateWithoutApprovalsGivenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalsGivenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalsGivenInput, UserUncheckedUpdateWithoutApprovalsGivenInput>
  }

  export type UserUpdateWithoutApprovalsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectUpsertWithoutApprovalsInput = {
    update: XOR<ProjectUpdateWithoutApprovalsInput, ProjectUncheckedUpdateWithoutApprovalsInput>
    create: XOR<ProjectCreateWithoutApprovalsInput, ProjectUncheckedCreateWithoutApprovalsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutApprovalsInput, ProjectUncheckedUpdateWithoutApprovalsInput>
  }

  export type ProjectUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutReportedIncidentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutReportedIncidentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutReportedIncidentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportedIncidentsInput, UserUncheckedCreateWithoutReportedIncidentsInput>
  }

  export type UserCreateWithoutAssignedIncidentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutAssignedIncidentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutAssignedIncidentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedIncidentsInput, UserUncheckedCreateWithoutAssignedIncidentsInput>
  }

  export type ProjectCreateWithoutSafetyIncidentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSafetyIncidentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSafetyIncidentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSafetyIncidentsInput, ProjectUncheckedCreateWithoutSafetyIncidentsInput>
  }

  export type PostCreateWithoutSafetyIncidentInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    organization: OrganizationCreateNestedOneWithoutPostsInput
    project: ProjectCreateNestedOneWithoutPostsInput
    phase?: ProjectPhaseCreateNestedOneWithoutPostsInput
    task?: TaskCreateNestedOneWithoutPostsInput
    attachments?: PostAttachmentCreateNestedManyWithoutPostInput
    markups?: PostMarkupCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: PostCommentCreateNestedManyWithoutPostInput
    shares?: PostShareCreateNestedManyWithoutPostInput
    mentions?: PostMentionCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagCreateNestedManyWithoutPostInput
    rfis?: RFICreateNestedManyWithoutPostInput
    resolution?: PostResolutionCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutSafetyIncidentInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
    attachments?: PostAttachmentUncheckedCreateNestedManyWithoutPostInput
    markups?: PostMarkupUncheckedCreateNestedManyWithoutPostInput
    bimElements?: PostBimElementUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: PostCommentUncheckedCreateNestedManyWithoutPostInput
    shares?: PostShareUncheckedCreateNestedManyWithoutPostInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutPostInput
    hashtags?: PostHashtagUncheckedCreateNestedManyWithoutPostInput
    rfis?: RFIUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutSafetyIncidentInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSafetyIncidentInput, PostUncheckedCreateWithoutSafetyIncidentInput>
  }

  export type UserUpsertWithoutReportedIncidentsInput = {
    update: XOR<UserUpdateWithoutReportedIncidentsInput, UserUncheckedUpdateWithoutReportedIncidentsInput>
    create: XOR<UserCreateWithoutReportedIncidentsInput, UserUncheckedCreateWithoutReportedIncidentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportedIncidentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportedIncidentsInput, UserUncheckedUpdateWithoutReportedIncidentsInput>
  }

  export type UserUpdateWithoutReportedIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutReportedIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUpsertWithoutAssignedIncidentsInput = {
    update: XOR<UserUpdateWithoutAssignedIncidentsInput, UserUncheckedUpdateWithoutAssignedIncidentsInput>
    create: XOR<UserCreateWithoutAssignedIncidentsInput, UserUncheckedCreateWithoutAssignedIncidentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedIncidentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedIncidentsInput, UserUncheckedUpdateWithoutAssignedIncidentsInput>
  }

  export type UserUpdateWithoutAssignedIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectUpsertWithoutSafetyIncidentsInput = {
    update: XOR<ProjectUpdateWithoutSafetyIncidentsInput, ProjectUncheckedUpdateWithoutSafetyIncidentsInput>
    create: XOR<ProjectCreateWithoutSafetyIncidentsInput, ProjectUncheckedCreateWithoutSafetyIncidentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSafetyIncidentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSafetyIncidentsInput, ProjectUncheckedUpdateWithoutSafetyIncidentsInput>
  }

  export type ProjectUpdateWithoutSafetyIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSafetyIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type PostUpsertWithoutSafetyIncidentInput = {
    update: XOR<PostUpdateWithoutSafetyIncidentInput, PostUncheckedUpdateWithoutSafetyIncidentInput>
    create: XOR<PostCreateWithoutSafetyIncidentInput, PostUncheckedCreateWithoutSafetyIncidentInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutSafetyIncidentInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutSafetyIncidentInput, PostUncheckedUpdateWithoutSafetyIncidentInput>
  }

  export type PostUpdateWithoutSafetyIncidentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutSafetyIncidentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserAchievementCreateWithoutAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    user: UserCreateNestedOneWithoutAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    userId: string
  }

  export type UserAchievementCreateOrConnectWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementCreateManyAchievementInputEnvelope = {
    data: UserAchievementCreateManyAchievementInput | UserAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type UserCreateWithoutAchievementsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutAchievementsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
  }

  export type AchievementCreateWithoutUserAchievementsInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points?: number
    rarity?: $Enums.AchievementRarity
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedCreateWithoutUserAchievementsInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.AchievementCategory
    points?: number
    rarity?: $Enums.AchievementRarity
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type AchievementCreateOrConnectWithoutUserAchievementsInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
  }

  export type UserUpsertWithoutAchievementsInput = {
    update: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type AchievementUpsertWithoutUserAchievementsInput = {
    update: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutUserAchievementsInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type AchievementUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type UserBadgeCreateWithoutBadgeInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    user: UserCreateNestedOneWithoutBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutBadgeInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    userId: string
  }

  export type UserBadgeCreateOrConnectWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeCreateManyBadgeInputEnvelope = {
    data: UserBadgeCreateManyBadgeInput | UserBadgeCreateManyBadgeInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutBadgeInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutBadgeInput>
  }

  export type UserCreateWithoutBadgesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutBadgesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
  }

  export type BadgeCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    color?: string
    category: $Enums.BadgeCategory
  }

  export type BadgeUncheckedCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    color?: string
    category: $Enums.BadgeCategory
  }

  export type BadgeCreateOrConnectWithoutUserBadgesInput = {
    where: BadgeWhereUniqueInput
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
  }

  export type UserUpsertWithoutBadgesInput = {
    update: XOR<UserUpdateWithoutBadgesInput, UserUncheckedUpdateWithoutBadgesInput>
    create: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBadgesInput, UserUncheckedUpdateWithoutBadgesInput>
  }

  export type UserUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type BadgeUpsertWithoutUserBadgesInput = {
    update: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    where?: BadgeWhereInput
  }

  export type BadgeUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: BadgeWhereInput
    data: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type BadgeUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
  }

  export type BadgeUncheckedUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
  }

  export type UserCreateWithoutXpTransactionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutXpTransactionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutXpTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutXpTransactionsInput, UserUncheckedCreateWithoutXpTransactionsInput>
  }

  export type UserUpsertWithoutXpTransactionsInput = {
    update: XOR<UserUpdateWithoutXpTransactionsInput, UserUncheckedUpdateWithoutXpTransactionsInput>
    create: XOR<UserCreateWithoutXpTransactionsInput, UserUncheckedCreateWithoutXpTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutXpTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutXpTransactionsInput, UserUncheckedUpdateWithoutXpTransactionsInput>
  }

  export type UserUpdateWithoutXpTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutXpTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDocumentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
  }

  export type TaskCreateWithoutDocumentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutDocumentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutDocumentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutDocumentsInput, TaskUncheckedCreateWithoutDocumentsInput>
  }

  export type UserCreateWithoutDocumentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type ProjectUpsertWithoutDocumentsInput = {
    update: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProjectUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TaskUpsertWithoutDocumentsInput = {
    update: XOR<TaskUpdateWithoutDocumentsInput, TaskUncheckedUpdateWithoutDocumentsInput>
    create: XOR<TaskCreateWithoutDocumentsInput, TaskUncheckedCreateWithoutDocumentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutDocumentsInput, TaskUncheckedUpdateWithoutDocumentsInput>
  }

  export type TaskUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCommentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
  }

  export type TaskCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    phase?: ProjectPhaseCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    createdBy: UserCreateNestedOneWithoutCreatedTasksInput
    parentTask?: TaskCreateNestedOneWithoutSubtasksInput
    subtasks?: TaskCreateNestedManyWithoutParentTaskInput
    documents?: DocumentCreateNestedManyWithoutTaskInput
    posts?: PostCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
    subtasks?: TaskUncheckedCreateNestedManyWithoutParentTaskInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTaskInput
    posts?: PostUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCommentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectUpsertWithoutCommentsInput = {
    update: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TaskUpsertWithoutCommentsInput = {
    update: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    postComments?: PostCommentCreateNestedManyWithoutAuthorInput
    postShares?: PostShareCreateNestedManyWithoutUserInput
    mentions?: PostMentionCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowCreateNestedManyWithoutFollowerInput
    followers?: UserFollowCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFICreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFICreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatedByInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postComments?: PostCommentUncheckedCreateNestedManyWithoutAuthorInput
    postShares?: PostShareUncheckedCreateNestedManyWithoutUserInput
    mentions?: PostMentionUncheckedCreateNestedManyWithoutMentionedUserInput
    mentionedBy?: PostMentionUncheckedCreateNestedManyWithoutMentioningUserInput
    following?: UserFollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: UserFollowUncheckedCreateNestedManyWithoutFollowingInput
    submittedRFIs?: RFIUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedRFIs?: RFIUncheckedCreateNestedManyWithoutAssignedToInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    xpTransactions?: XPTransactionUncheckedCreateNestedManyWithoutUserInput
    reportedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutReporterInput
    assignedIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    verifiedResolutions?: PostResolutionUncheckedCreateNestedManyWithoutVerifierInput
    approvalsGiven?: ApprovalUncheckedCreateNestedManyWithoutApproverInput
    approvalsReceived?: ApprovalUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type ProjectCreateWithoutActivityLogsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    phases?: ProjectPhaseCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    posts?: PostCreateNestedManyWithoutProjectInput
    rfis?: RFICreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentCreateNestedManyWithoutProjectInput
    approvals?: ApprovalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    phases?: ProjectPhaseUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    posts?: PostUncheckedCreateNestedManyWithoutProjectInput
    rfis?: RFIUncheckedCreateNestedManyWithoutProjectInput
    safetyIncidents?: SafetyIncidentUncheckedCreateNestedManyWithoutProjectInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutActivityLogsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutActivityLogsInput, ProjectUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type ProjectUpsertWithoutActivityLogsInput = {
    update: XOR<ProjectUpdateWithoutActivityLogsInput, ProjectUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<ProjectCreateWithoutActivityLogsInput, ProjectUncheckedCreateWithoutActivityLogsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutActivityLogsInput, ProjectUncheckedUpdateWithoutActivityLogsInput>
  }

  export type ProjectUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    bio?: string | null
    specialization?: string | null
    experienceYears?: number | null
    location?: string | null
    contributionScore?: number
    safetyScore?: number
    qualityScore?: number
    collaborationScore?: number
    professionalLevel?: string | null
    certifications?: UserCreatecertificationsInput | string[]
    skills?: UserCreateskillsInput | string[]
    phoneNumber?: string | null
    emergencyContact?: string | null
    lastActiveProject?: string | null
    timezone?: string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.ProjectStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    progress?: number
    address?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: string | null
    isPublic?: boolean
    collaborationScore?: number
    safetyScore?: number
    qualityScore?: number
    efficiencyScore?: number
    clientName?: string | null
    contractNumber?: string | null
    projectCode?: string | null
    regulatoryReqs?: ProjectCreateregulatoryReqsInput | string[]
    complianceStatus?: $Enums.ComplianceStatus
    riskLevel?: $Enums.RiskLevel
    clientApprovalRequired?: boolean
    clientContactEmail?: string | null
    clientContactName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyOrganizationInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
  }

  export type RFICreateManyOrganizationInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatedByNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postComments?: PostCommentUncheckedUpdateManyWithoutAuthorNestedInput
    postShares?: PostShareUncheckedUpdateManyWithoutUserNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutMentionedUserNestedInput
    mentionedBy?: PostMentionUncheckedUpdateManyWithoutMentioningUserNestedInput
    following?: UserFollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: UserFollowUncheckedUpdateManyWithoutFollowingNestedInput
    submittedRFIs?: RFIUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedRFIs?: RFIUncheckedUpdateManyWithoutAssignedToNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    xpTransactions?: XPTransactionUncheckedUpdateManyWithoutUserNestedInput
    reportedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutReporterNestedInput
    assignedIncidents?: SafetyIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    verifiedResolutions?: PostResolutionUncheckedUpdateManyWithoutVerifierNestedInput
    approvalsGiven?: ApprovalUncheckedUpdateManyWithoutApproverNestedInput
    approvalsReceived?: ApprovalUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    experienceYears?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contributionScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    collaborationScore?: IntFieldUpdateOperationsInput | number
    professionalLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: UserUpdatecertificationsInput | string[]
    skills?: UserUpdateskillsInput | string[]
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    lastActiveProject?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    notificationPrefs?: JsonNullValueInput | InputJsonValue
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: ProjectPhaseUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutProjectNestedInput
    posts?: PostUpdateManyWithoutProjectNestedInput
    rfis?: RFIUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: ProjectPhaseUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutProjectNestedInput
    posts?: PostUncheckedUpdateManyWithoutProjectNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutProjectNestedInput
    safetyIncidents?: SafetyIncidentUncheckedUpdateManyWithoutProjectNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    bimModelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    collaborationScore?: IntFieldUpdateOperationsInput | number
    safetyScore?: IntFieldUpdateOperationsInput | number
    qualityScore?: IntFieldUpdateOperationsInput | number
    efficiencyScore?: IntFieldUpdateOperationsInput | number
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    projectCode?: NullableStringFieldUpdateOperationsInput | string | null
    regulatoryReqs?: ProjectUpdateregulatoryReqsInput | string[]
    complianceStatus?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    clientApprovalRequired?: BoolFieldUpdateOperationsInput | boolean
    clientContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientContactName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RFIUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedRFIsNestedInput
    post?: PostUpdateOneRequiredWithoutRfisNestedInput
    project?: ProjectUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    createdById: string
    parentTaskId?: string | null
  }

  export type TaskCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    parentTaskId?: string | null
  }

  export type ProjectMemberCreateManyUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    projectId: string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
  }

  export type DocumentCreateManyUploadedByInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    taskId?: string | null
  }

  export type ActivityLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    projectId?: string | null
  }

  export type PostCreateManyAuthorInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
  }

  export type PostLikeCreateManyUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type PostCommentCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    parentCommentId?: string | null
  }

  export type PostShareCreateManyUserInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    postId: string
  }

  export type PostMentionCreateManyMentionedUserInput = {
    id?: string
    createdAt?: Date | string
    mentioningUserId: string
    postId: string
  }

  export type PostMentionCreateManyMentioningUserInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    postId: string
  }

  export type UserFollowCreateManyFollowerInput = {
    id?: string
    createdAt?: Date | string
    followingId: string
  }

  export type UserFollowCreateManyFollowingInput = {
    id?: string
    createdAt?: Date | string
    followerId: string
  }

  export type RFICreateManySubmittedByInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    assignedToId?: string | null
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RFICreateManyAssignedToInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    postId: string
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAchievementCreateManyUserInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    achievementId: string
  }

  export type UserBadgeCreateManyUserInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    badgeId: string
  }

  export type XPTransactionCreateManyUserInput = {
    id?: string
    amount: number
    reason: string
    category: $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SafetyIncidentCreateManyReporterInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    assignedToId?: string | null
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateManyAssignedToInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    projectId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostResolutionCreateManyVerifierInput = {
    id?: string
    description: string
    implementedAt?: Date | string | null
    verifiedAt?: Date | string | null
    costImpact?: Decimal | DecimalJsLike | number | string | null
    timeImpact?: number | null
    lessonsLearned?: string | null
    preventiveMeasures?: string | null
    clientNotified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateManyApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateManyRequesterInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    approverId: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutDocumentsNestedInput
    task?: TaskUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: PostCommentUpdateOneWithoutRepliesNestedInput
    replies?: PostCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: PostCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostShareUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutSharesNestedInput
  }

  export type PostShareUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostShareUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUpdateWithoutMentionedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentioningUser?: UserUpdateOneRequiredWithoutMentionedByNestedInput
    post?: PostUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type PostMentionUncheckedUpdateWithoutMentionedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUncheckedUpdateManyWithoutMentionedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUpdateWithoutMentioningUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUser?: UserUpdateOneRequiredWithoutMentionsNestedInput
    post?: PostUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type PostMentionUncheckedUpdateWithoutMentioningUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUncheckedUpdateManyWithoutMentioningUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type UserFollowUncheckedUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type UserFollowUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type RFIUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedRFIsNestedInput
    post?: PostUpdateOneRequiredWithoutRfisNestedInput
    project?: ProjectUpdateOneRequiredWithoutRfisNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput
    post?: PostUpdateOneRequiredWithoutRfisNestedInput
    project?: ProjectUpdateOneRequiredWithoutRfisNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    badgeId?: StringFieldUpdateOperationsInput | string
  }

  export type XPTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XPTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XPTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    category?: EnumXPCategoryFieldUpdateOperationsInput | $Enums.XPCategory
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedIncidentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutSafetyIncidentsNestedInput
    post?: PostUpdateOneRequiredWithoutSafetyIncidentNestedInput
  }

  export type SafetyIncidentUncheckedUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportedIncidentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutSafetyIncidentsNestedInput
    post?: PostUpdateOneRequiredWithoutSafetyIncidentNestedInput
  }

  export type SafetyIncidentUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostResolutionUpdateWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutResolutionNestedInput
  }

  export type PostResolutionUncheckedUpdateWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutResolutionNestedInput
  }

  export type PostResolutionUncheckedUpdateManyWithoutVerifierInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    implementedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    timeImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    lessonsLearned?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    clientNotified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutApprovalsReceivedNestedInput
    project?: ProjectUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneRequiredWithoutApprovalsGivenNestedInput
    project?: ProjectUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    approverId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    approverId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectPhaseCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    progress?: number
    order?: number
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseCreatedependenciesInput | string[]
    criticalPath?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
  }

  export type ProjectMemberCreateManyProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    hourlyRate?: Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: number | null
    accessLevel?: $Enums.AccessLevel
    isLead?: boolean
    department?: string | null
    costCenter?: string | null
    userId: string
  }

  export type DocumentCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId?: string | null
    uploadedById: string
  }

  export type CommentCreateManyProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    taskId?: string | null
  }

  export type ActivityLogCreateManyProjectInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    riskLevel?: $Enums.RiskLevel
    complianceFlag?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type PostCreateManyProjectInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    phaseId?: string | null
    taskId?: string | null
    resolutionId?: string | null
  }

  export type RFICreateManyProjectInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    postId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SafetyIncidentCreateManyProjectInput = {
    id?: string
    title: string
    description: string
    type: $Enums.IncidentType
    severity?: $Enums.IncidentSeverity
    status?: $Enums.IncidentStatus
    location?: string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: number
    nearMiss?: boolean
    regulatoryNotificationRequired?: boolean
    clientNotificationRequired?: boolean
    rootCause?: string | null
    correctiveActions?: string | null
    preventiveMeasures?: string | null
    investigationComplete?: boolean
    occurredAt: Date | string
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    reporterId: string
    assignedToId?: string | null
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateManyProjectInput = {
    id?: string
    type: $Enums.ApprovalType
    entityId: string
    entityType: string
    status?: $Enums.ApprovalStatus
    priority?: $Enums.ApprovalPriority
    dueDate?: Date | string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    conditions?: ApprovalCreateconditionsInput | string[]
    requesterId: string
    approverId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectPhaseUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutPhaseNestedInput
    posts?: PostUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutPhaseNestedInput
    posts?: PostUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type ProjectPhaseUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    milestones?: JsonNullValueInput | InputJsonValue
    dependencies?: ProjectPhaseUpdatedependenciesInput | string[]
    criticalPath?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectMemberUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProjectMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hourlyRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxHoursPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    isLead?: BoolFieldUpdateOperationsInput | boolean
    department?: NullableStringFieldUpdateOperationsInput | string | null
    costCenter?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    complianceFlag?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RFIUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedRFIsNestedInput
    post?: PostUpdateOneRequiredWithoutRfisNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportedIncidentsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedIncidentsNestedInput
    post?: PostUpdateOneRequiredWithoutSafetyIncidentNestedInput
  }

  export type SafetyIncidentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SafetyIncidentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumIncidentTypeFieldUpdateOperationsInput | $Enums.IncidentType
    severity?: EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableJsonNullValueInput | InputJsonValue
    injuryCount?: IntFieldUpdateOperationsInput | number
    nearMiss?: BoolFieldUpdateOperationsInput | boolean
    regulatoryNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    clientNotificationRequired?: BoolFieldUpdateOperationsInput | boolean
    rootCause?: NullableStringFieldUpdateOperationsInput | string | null
    correctiveActions?: NullableStringFieldUpdateOperationsInput | string | null
    preventiveMeasures?: NullableStringFieldUpdateOperationsInput | string | null
    investigationComplete?: BoolFieldUpdateOperationsInput | boolean
    occurredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutApprovalsReceivedNestedInput
    approver?: UserUpdateOneRequiredWithoutApprovalsGivenNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    priority?: EnumApprovalPriorityFieldUpdateOperationsInput | $Enums.ApprovalPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: ApprovalUpdateconditionsInput | string[]
    requesterId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    createdById: string
    parentTaskId?: string | null
  }

  export type PostCreateManyPhaseInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    taskId?: string | null
    resolutionId?: string | null
  }

  export type TaskUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    parentTask?: TaskUpdateOneWithoutSubtasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateManyParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    startDate?: Date | string | null
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    estimatedHours?: number | null
    actualHours?: number | null
    progress?: number
    tags?: TaskCreatetagsInput | string[]
    isBlocked?: boolean
    blockedReason?: string | null
    blockedSince?: Date | string | null
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    requiresApproval?: boolean
    isClientVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    phaseId?: string | null
    assigneeId?: string | null
    createdById: string
  }

  export type CommentCreateManyTaskInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type DocumentCreateManyTaskInput = {
    id?: string
    name: string
    description?: string | null
    fileUrl: string
    fileSize: number
    mimeType: string
    version?: string
    type?: $Enums.DocumentType
    isPublic?: boolean
    downloadCount?: number
    isConfidential?: boolean
    requiresApproval?: boolean
    approvalStatus?: $Enums.ApprovalStatus
    accessLevel?: $Enums.AccessLevel
    retentionPeriod?: number | null
    complianceFlags?: DocumentCreatecomplianceFlagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    uploadedById: string
  }

  export type PostCreateManyTaskInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    resolutionId?: string | null
  }

  export type TaskUpdateWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    phase?: ProjectPhaseUpdateOneWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    subtasks?: TaskUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    documents?: DocumentUpdateManyWithoutTaskNestedInput
    posts?: PostUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    subtasks?: TaskUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTaskNestedInput
    posts?: PostUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    tags?: TaskUpdatetagsInput | string[]
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedReason?: NullableStringFieldUpdateOperationsInput | string | null
    blockedSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    downloadCount?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    retentionPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    complianceFlags?: DocumentUpdatecomplianceFlagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type PostUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
    resolution?: PostResolutionUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    resolutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostAttachmentCreateManyPostInput = {
    id?: string
    type: $Enums.AttachmentType
    fileUrl: string
    fileName: string
    fileSize: number
    mimeType: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: number
    isConfidential?: boolean
    accessLevel?: $Enums.AccessLevel
  }

  export type PostMarkupCreateManyPostInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    attachmentId: string
  }

  export type PostBimElementCreateManyPostInput = {
    id?: string
    elementId: string
    elementType: string
    elementName?: string | null
    discipline: $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostLikeCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type PostCommentCreateManyPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    parentCommentId?: string | null
  }

  export type PostShareCreateManyPostInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type PostMentionCreateManyPostInput = {
    id?: string
    createdAt?: Date | string
    mentionedUserId: string
    mentioningUserId: string
  }

  export type PostHashtagCreateManyPostInput = {
    id?: string
    tag: string
  }

  export type RFICreateManyPostInput = {
    id?: string
    number: string
    subject: string
    description: string
    priority?: $Enums.RFIPriority
    status?: $Enums.RFIStatus
    dueDate?: Date | string | null
    responseDate?: Date | string | null
    response?: string | null
    clientVisible?: boolean
    costImpact?: Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: number | null
    category?: $Enums.RFICategory
    externalRFINumber?: string | null
    submittedById: string
    assignedToId?: string | null
    projectId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostAttachmentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    markups?: PostMarkupUpdateManyWithoutAttachmentNestedInput
  }

  export type PostAttachmentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    markups?: PostMarkupUncheckedUpdateManyWithoutAttachmentNestedInput
  }

  export type PostAttachmentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAttachmentTypeFieldUpdateOperationsInput | $Enums.AttachmentType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  }

  export type PostMarkupUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachment?: PostAttachmentUpdateOneRequiredWithoutMarkupsNestedInput
  }

  export type PostMarkupUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachmentId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMarkupUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    attachmentId?: StringFieldUpdateOperationsInput | string
  }

  export type PostBimElementUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostBimElementUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostBimElementUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    elementId?: StringFieldUpdateOperationsInput | string
    elementType?: StringFieldUpdateOperationsInput | string
    elementName?: NullableStringFieldUpdateOperationsInput | string | null
    discipline?: EnumBimDisciplineFieldUpdateOperationsInput | $Enums.BimDiscipline
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PostLikeUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostLikesNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostCommentsNestedInput
    parentComment?: PostCommentUpdateOneWithoutRepliesNestedInput
    replies?: PostCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: PostCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostShareUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostSharesNestedInput
  }

  export type PostShareUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostShareUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUser?: UserUpdateOneRequiredWithoutMentionsNestedInput
    mentioningUser?: UserUpdateOneRequiredWithoutMentionedByNestedInput
  }

  export type PostMentionUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMentionUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mentionedUserId?: StringFieldUpdateOperationsInput | string
    mentioningUserId?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type PostHashtagUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type RFIUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedRFIsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedRFIsNestedInput
    project?: ProjectUpdateOneRequiredWithoutRfisNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutRfisNestedInput
  }

  export type RFIUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RFIUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumRFIPriorityFieldUpdateOperationsInput | $Enums.RFIPriority
    status?: EnumRFIStatusFieldUpdateOperationsInput | $Enums.RFIStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    clientVisible?: BoolFieldUpdateOperationsInput | boolean
    costImpact?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    scheduleImpact?: NullableIntFieldUpdateOperationsInput | number | null
    category?: EnumRFICategoryFieldUpdateOperationsInput | $Enums.RFICategory
    externalRFINumber?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostMarkupCreateManyAttachmentInput = {
    id?: string
    type: $Enums.MarkupType
    coordinates: JsonNullValueInput | InputJsonValue
    content?: string | null
    color?: string
    strokeWidth?: number
    opacity?: number
    postId: string
  }

  export type PostMarkupUpdateWithoutAttachmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    post?: PostUpdateOneRequiredWithoutMarkupsNestedInput
  }

  export type PostMarkupUncheckedUpdateWithoutAttachmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostMarkupUncheckedUpdateManyWithoutAttachmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMarkupTypeFieldUpdateOperationsInput | $Enums.MarkupType
    coordinates?: JsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    strokeWidth?: FloatFieldUpdateOperationsInput | number
    opacity?: FloatFieldUpdateOperationsInput | number
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCommentCreateManyParentCommentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    postId: string
  }

  export type PostCommentUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    replies?: PostCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    replies?: PostCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type PostCommentUncheckedUpdateManyWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyResolutionInput = {
    id?: string
    content: string
    type?: $Enums.PostType
    priority?: $Enums.PostPriority
    status?: $Enums.PostStatus
    isPublic?: boolean
    viewCount?: number
    likeCount?: number
    commentCount?: number
    shareCount?: number
    requiresApproval?: boolean
    approvedAt?: Date | string | null
    approvedById?: string | null
    isClientVisible?: boolean
    estimatedResolution?: Date | string | null
    actualResolution?: Date | string | null
    businessImpact?: $Enums.BusinessImpact
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    organizationId: string
    projectId: string
    phaseId?: string | null
    taskId?: string | null
  }

  export type PostUpdateWithoutResolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutPostsNestedInput
    project?: ProjectUpdateOneRequiredWithoutPostsNestedInput
    phase?: ProjectPhaseUpdateOneWithoutPostsNestedInput
    task?: TaskUpdateOneWithoutPostsNestedInput
    attachments?: PostAttachmentUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: PostCommentUpdateManyWithoutPostNestedInput
    shares?: PostShareUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUpdateManyWithoutPostNestedInput
    rfis?: RFIUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutResolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PostAttachmentUncheckedUpdateManyWithoutPostNestedInput
    markups?: PostMarkupUncheckedUpdateManyWithoutPostNestedInput
    bimElements?: PostBimElementUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: PostCommentUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostShareUncheckedUpdateManyWithoutPostNestedInput
    mentions?: PostMentionUncheckedUpdateManyWithoutPostNestedInput
    hashtags?: PostHashtagUncheckedUpdateManyWithoutPostNestedInput
    rfis?: RFIUncheckedUpdateManyWithoutPostNestedInput
    safetyIncident?: SafetyIncidentUncheckedUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutResolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    priority?: EnumPostPriorityFieldUpdateOperationsInput | $Enums.PostPriority
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    commentCount?: IntFieldUpdateOperationsInput | number
    shareCount?: IntFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    isClientVisible?: BoolFieldUpdateOperationsInput | boolean
    estimatedResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    businessImpact?: EnumBusinessImpactFieldUpdateOperationsInput | $Enums.BusinessImpact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    phaseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAchievementCreateManyAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    userId: string
  }

  export type UserAchievementUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeCreateManyBadgeInput = {
    id?: string
    earnedAt?: Date | string
    level?: number
    userId: string
  }

  export type UserBadgeUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}