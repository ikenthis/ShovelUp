
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subscriptionTier: 'subscriptionTier',
  maxProjects: 'maxProjects',
  maxUsersPerProject: 'maxUsersPerProject',
  apiRateLimit: 'apiRateLimit',
  storageLimit: 'storageLimit',
  customBranding: 'customBranding',
  ssoEnabled: 'ssoEnabled',
  auditRetention: 'auditRetention'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  avatar: 'avatar',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  bio: 'bio',
  specialization: 'specialization',
  experienceYears: 'experienceYears',
  location: 'location',
  contributionScore: 'contributionScore',
  safetyScore: 'safetyScore',
  qualityScore: 'qualityScore',
  collaborationScore: 'collaborationScore',
  professionalLevel: 'professionalLevel',
  certifications: 'certifications',
  skills: 'skills',
  phoneNumber: 'phoneNumber',
  emergencyContact: 'emergencyContact',
  lastActiveProject: 'lastActiveProject',
  timezone: 'timezone',
  notificationPrefs: 'notificationPrefs',
  workingHours: 'workingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  actualCost: 'actualCost',
  progress: 'progress',
  address: 'address',
  coordinates: 'coordinates',
  bimModelUrl: 'bimModelUrl',
  isPublic: 'isPublic',
  collaborationScore: 'collaborationScore',
  safetyScore: 'safetyScore',
  qualityScore: 'qualityScore',
  efficiencyScore: 'efficiencyScore',
  clientName: 'clientName',
  contractNumber: 'contractNumber',
  projectCode: 'projectCode',
  regulatoryReqs: 'regulatoryReqs',
  complianceStatus: 'complianceStatus',
  riskLevel: 'riskLevel',
  clientApprovalRequired: 'clientApprovalRequired',
  clientContactEmail: 'clientContactEmail',
  clientContactName: 'clientContactName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.ProjectPhaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  order: 'order',
  budgetAllocated: 'budgetAllocated',
  actualCost: 'actualCost',
  milestones: 'milestones',
  dependencies: 'dependencies',
  criticalPath: 'criticalPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  hourlyRate: 'hourlyRate',
  maxHoursPerWeek: 'maxHoursPerWeek',
  accessLevel: 'accessLevel',
  isLead: 'isLead',
  department: 'department',
  costCenter: 'costCenter',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  progress: 'progress',
  tags: 'tags',
  isBlocked: 'isBlocked',
  blockedReason: 'blockedReason',
  blockedSince: 'blockedSince',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  requiresApproval: 'requiresApproval',
  isClientVisible: 'isClientVisible',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  phaseId: 'phaseId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  parentTaskId: 'parentTaskId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  priority: 'priority',
  status: 'status',
  isPublic: 'isPublic',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  shareCount: 'shareCount',
  requiresApproval: 'requiresApproval',
  approvedAt: 'approvedAt',
  approvedById: 'approvedById',
  isClientVisible: 'isClientVisible',
  estimatedResolution: 'estimatedResolution',
  actualResolution: 'actualResolution',
  businessImpact: 'businessImpact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  organizationId: 'organizationId',
  projectId: 'projectId',
  phaseId: 'phaseId',
  taskId: 'taskId',
  resolutionId: 'resolutionId'
};

exports.Prisma.PostAttachmentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  metadata: 'metadata',
  order: 'order',
  isConfidential: 'isConfidential',
  accessLevel: 'accessLevel',
  postId: 'postId'
};

exports.Prisma.PostMarkupScalarFieldEnum = {
  id: 'id',
  type: 'type',
  coordinates: 'coordinates',
  content: 'content',
  color: 'color',
  strokeWidth: 'strokeWidth',
  opacity: 'opacity',
  attachmentId: 'attachmentId',
  postId: 'postId'
};

exports.Prisma.PostBimElementScalarFieldEnum = {
  id: 'id',
  elementId: 'elementId',
  elementType: 'elementType',
  elementName: 'elementName',
  discipline: 'discipline',
  properties: 'properties',
  postId: 'postId'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.PostCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  postId: 'postId',
  parentCommentId: 'parentCommentId'
};

exports.Prisma.PostShareScalarFieldEnum = {
  id: 'id',
  comment: 'comment',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.PostMentionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  mentionedUserId: 'mentionedUserId',
  mentioningUserId: 'mentioningUserId',
  postId: 'postId'
};

exports.Prisma.PostHashtagScalarFieldEnum = {
  id: 'id',
  tag: 'tag',
  postId: 'postId'
};

exports.Prisma.PostResolutionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  implementedAt: 'implementedAt',
  verifiedAt: 'verifiedAt',
  costImpact: 'costImpact',
  timeImpact: 'timeImpact',
  lessonsLearned: 'lessonsLearned',
  preventiveMeasures: 'preventiveMeasures',
  clientNotified: 'clientNotified',
  verifiedById: 'verifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RFIScalarFieldEnum = {
  id: 'id',
  number: 'number',
  subject: 'subject',
  description: 'description',
  priority: 'priority',
  status: 'status',
  dueDate: 'dueDate',
  responseDate: 'responseDate',
  response: 'response',
  clientVisible: 'clientVisible',
  costImpact: 'costImpact',
  scheduleImpact: 'scheduleImpact',
  category: 'category',
  externalRFINumber: 'externalRFINumber',
  submittedById: 'submittedById',
  assignedToId: 'assignedToId',
  postId: 'postId',
  projectId: 'projectId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  type: 'type',
  entityId: 'entityId',
  entityType: 'entityType',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  requestedAt: 'requestedAt',
  reviewedAt: 'reviewedAt',
  comments: 'comments',
  conditions: 'conditions',
  requesterId: 'requesterId',
  approverId: 'approverId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SafetyIncidentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  severity: 'severity',
  status: 'status',
  location: 'location',
  coordinates: 'coordinates',
  injuryCount: 'injuryCount',
  nearMiss: 'nearMiss',
  regulatoryNotificationRequired: 'regulatoryNotificationRequired',
  clientNotificationRequired: 'clientNotificationRequired',
  rootCause: 'rootCause',
  correctiveActions: 'correctiveActions',
  preventiveMeasures: 'preventiveMeasures',
  investigationComplete: 'investigationComplete',
  occurredAt: 'occurredAt',
  reportedAt: 'reportedAt',
  resolvedAt: 'resolvedAt',
  reporterId: 'reporterId',
  assignedToId: 'assignedToId',
  projectId: 'projectId',
  postId: 'postId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFollowScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category',
  points: 'points',
  rarity: 'rarity',
  conditions: 'conditions'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  unlockedAt: 'unlockedAt',
  progress: 'progress',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  color: 'color',
  category: 'category'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  level: 'level',
  userId: 'userId',
  badgeId: 'badgeId'
};

exports.Prisma.XPTransactionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  reason: 'reason',
  category: 'category',
  metadata: 'metadata',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  version: 'version',
  type: 'type',
  isPublic: 'isPublic',
  downloadCount: 'downloadCount',
  isConfidential: 'isConfidential',
  requiresApproval: 'requiresApproval',
  approvalStatus: 'approvalStatus',
  accessLevel: 'accessLevel',
  retentionPeriod: 'retentionPeriod',
  complianceFlags: 'complianceFlags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  taskId: 'taskId',
  uploadedById: 'uploadedById'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  projectId: 'projectId',
  taskId: 'taskId'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  riskLevel: 'riskLevel',
  complianceFlag: 'complianceFlag',
  createdAt: 'createdAt',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER',
  CLIENT: 'CLIENT'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ComplianceStatus = exports.$Enums.ComplianceStatus = {
  PENDING: 'PENDING',
  COMPLIANT: 'COMPLIANT',
  NON_COMPLIANT: 'NON_COMPLIANT',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.PhaseStatus = exports.$Enums.PhaseStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

exports.ProjectRole = exports.$Enums.ProjectRole = {
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  ARCHITECT: 'ARCHITECT',
  ENGINEER: 'ENGINEER',
  CONTRACTOR: 'CONTRACTOR',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER',
  CLIENT_REP: 'CLIENT_REP'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  RESTRICTED: 'RESTRICTED',
  STANDARD: 'STANDARD',
  ELEVATED: 'ELEVATED',
  CONFIDENTIAL: 'CONFIDENTIAL'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  BLOCKED: 'BLOCKED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.PostType = exports.$Enums.PostType = {
  GENERAL: 'GENERAL',
  DESIGN_ISSUE: 'DESIGN_ISSUE',
  CLASH_DETECTION: 'CLASH_DETECTION',
  CONSTRUCTION_ISSUE: 'CONSTRUCTION_ISSUE',
  SAFETY_INCIDENT: 'SAFETY_INCIDENT',
  PROGRESS_UPDATE: 'PROGRESS_UPDATE',
  RFI_REQUEST: 'RFI_REQUEST',
  QUALITY_ISSUE: 'QUALITY_ISSUE',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  KNOWLEDGE_SHARE: 'KNOWLEDGE_SHARE',
  CLIENT_UPDATE: 'CLIENT_UPDATE'
};

exports.PostPriority = exports.$Enums.PostPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  CRITICAL: 'CRITICAL'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.BusinessImpact = exports.$Enums.BusinessImpact = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  DRAWING_2D: 'DRAWING_2D',
  BIM_MODEL: 'BIM_MODEL',
  AUDIO: 'AUDIO',
  LINK: 'LINK'
};

exports.MarkupType = exports.$Enums.MarkupType = {
  CIRCLE: 'CIRCLE',
  RECTANGLE: 'RECTANGLE',
  ARROW: 'ARROW',
  TEXT: 'TEXT',
  LINE: 'LINE',
  FREEHAND: 'FREEHAND',
  MEASUREMENT: 'MEASUREMENT',
  HIGHLIGHT: 'HIGHLIGHT',
  PIN: 'PIN'
};

exports.BimDiscipline = exports.$Enums.BimDiscipline = {
  ARCHITECTURAL: 'ARCHITECTURAL',
  STRUCTURAL: 'STRUCTURAL',
  MECHANICAL: 'MECHANICAL',
  ELECTRICAL: 'ELECTRICAL',
  PLUMBING: 'PLUMBING',
  FIRE_PROTECTION: 'FIRE_PROTECTION',
  SITE: 'SITE',
  CIVIL: 'CIVIL'
};

exports.RFIPriority = exports.$Enums.RFIPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.RFIStatus = exports.$Enums.RFIStatus = {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESPONDED: 'RESPONDED',
  CLOSED: 'CLOSED'
};

exports.RFICategory = exports.$Enums.RFICategory = {
  CLARIFICATION: 'CLARIFICATION',
  DESIGN_CHANGE: 'DESIGN_CHANGE',
  SUBSTITUTION: 'SUBSTITUTION',
  CONFLICT_RESOLUTION: 'CONFLICT_RESOLUTION',
  SPECIFICATION_ISSUE: 'SPECIFICATION_ISSUE'
};

exports.ApprovalType = exports.$Enums.ApprovalType = {
  DOCUMENT_REVIEW: 'DOCUMENT_REVIEW',
  RFI_RESPONSE: 'RFI_RESPONSE',
  CHANGE_ORDER: 'CHANGE_ORDER',
  BUDGET_APPROVAL: 'BUDGET_APPROVAL',
  SAFETY_CLEARANCE: 'SAFETY_CLEARANCE',
  QUALITY_SIGN_OFF: 'QUALITY_SIGN_OFF'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION'
};

exports.ApprovalPriority = exports.$Enums.ApprovalPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.IncidentType = exports.$Enums.IncidentType = {
  INJURY: 'INJURY',
  NEAR_MISS: 'NEAR_MISS',
  PROPERTY_DAMAGE: 'PROPERTY_DAMAGE',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  SECURITY: 'SECURITY',
  EQUIPMENT_FAILURE: 'EQUIPMENT_FAILURE',
  PROCESS_DEVIATION: 'PROCESS_DEVIATION'
};

exports.IncidentSeverity = exports.$Enums.IncidentSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.IncidentStatus = exports.$Enums.IncidentStatus = {
  REPORTED: 'REPORTED',
  INVESTIGATING: 'INVESTIGATING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  SAFETY: 'SAFETY',
  QUALITY: 'QUALITY',
  COLLABORATION: 'COLLABORATION',
  INNOVATION: 'INNOVATION',
  LEADERSHIP: 'LEADERSHIP',
  LEARNING: 'LEARNING'
};

exports.AchievementRarity = exports.$Enums.AchievementRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.BadgeCategory = exports.$Enums.BadgeCategory = {
  EXPERTISE: 'EXPERTISE',
  SAFETY: 'SAFETY',
  COLLABORATION: 'COLLABORATION',
  LEADERSHIP: 'LEADERSHIP',
  INNOVATION: 'INNOVATION',
  MILESTONE: 'MILESTONE'
};

exports.XPCategory = exports.$Enums.XPCategory = {
  POST_CREATED: 'POST_CREATED',
  POST_LIKED: 'POST_LIKED',
  COMMENT_ADDED: 'COMMENT_ADDED',
  ISSUE_RESOLVED: 'ISSUE_RESOLVED',
  SAFETY_REPORT: 'SAFETY_REPORT',
  KNOWLEDGE_SHARE: 'KNOWLEDGE_SHARE',
  COLLABORATION: 'COLLABORATION',
  MILESTONE_ACHIEVED: 'MILESTONE_ACHIEVED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  BLUEPRINT: 'BLUEPRINT',
  SPECIFICATION: 'SPECIFICATION',
  CONTRACT: 'CONTRACT',
  REPORT: 'REPORT',
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO',
  BIM_MODEL: 'BIM_MODEL',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Project: 'Project',
  ProjectPhase: 'ProjectPhase',
  ProjectMember: 'ProjectMember',
  Task: 'Task',
  Post: 'Post',
  PostAttachment: 'PostAttachment',
  PostMarkup: 'PostMarkup',
  PostBimElement: 'PostBimElement',
  PostLike: 'PostLike',
  PostComment: 'PostComment',
  PostShare: 'PostShare',
  PostMention: 'PostMention',
  PostHashtag: 'PostHashtag',
  PostResolution: 'PostResolution',
  RFI: 'RFI',
  Approval: 'Approval',
  SafetyIncident: 'SafetyIncident',
  UserFollow: 'UserFollow',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  XPTransaction: 'XPTransaction',
  Document: 'Document',
  Comment: 'Comment',
  ActivityLog: 'ActivityLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
